"use strict";(self.webpackChunkdefra=self.webpackChunkdefra||[]).push([[9933],{22445:function(e,t,s){s.d(t,{$1:function(){return u},H2:function(){return d},MT:function(){return m},VP:function(){return g},WF:function(){return l},Wt:function(){return a},XQ:function(){return h},hK:function(){return f},nS:function(){return p},uh:function(){return i},xY:function(){return c}});var n=s(39819);const o="upload-assets",r=()=>new Error;class a extends n.A{constructor(){super(`${o}:unsupported`,"Layer does not support asset uploads.",r())}}class i extends n.A{constructor(){super(`${o}:no-glb-support`,"Layer does not support glb.",r())}}class c extends n.A{constructor(){super(`${o}:no-supported-source`,"No supported external source found",r())}}class u extends n.A{constructor(){super(`${o}:not-base-64`,"Expected gltf data in base64 format after conversion.",r())}}class l extends n.A{constructor(){super(`${o}:unable-to-prepare-options`,"Unable to prepare uploadAsset request options.",r())}}class p extends n.A{constructor(e,t){super(`${o}:bad-response`,`Bad response. Uploaded ${e} items and received ${t} results.`,r())}}class f extends n.A{constructor(e,t){super(`${o}-layer:upload-failed`,`Failed to upload mesh file ${e}. Error code: ${t?.code??"-1"}. Error message: ${t?.messages??"unknown"}`,r())}}class d extends n.A{constructor(e){super(`${o}-layer:unsupported-format`,`The service allowed us to upload an asset of FormatID ${e}, but it does not list it in its supported formats.`,r())}}class m extends n.A{constructor(){super(`${o}:convert3D-failed`,"convert3D failed.")}}class g extends n.A{constructor(){super("invalid-input:no-model","No supported model found")}}class h extends n.A{constructor(){super("invalid-input:multiple-models","Multiple supported models found")}}},71783:function(e,t,s){s.d(t,{uploadAssets:function(){return R}}),s(50917);var n=s(93040),o=s(58941),r=s(40633),a=s(60539),i=s(38504),c=s(90683),u=s(66110),l=s(23572),p=s(22445);const f={upload:{createFromFiles:.8,loadMesh:.2},uploadAssetBlobs:{prepareAssetItems:.9,uploadAssetItems:.1},uploadConvertibleSource:{uploadEditSource:.5,serviceAssetsToGlb:.5},uploadLocalMesh:{meshToAssetBlob:.5,uploadAssetBlobs:.5}};var d=s(93389),m=s(61226),g=s(25738);function h(e,t=e=>{},s){return new w(e,t,s)}class w{constructor(e,t=e=>{},s){if(this.onProgress=t,this.taskName=s,this._progressMap=new Map,this._startTime=void 0,this._timingsMap=new Map,"number"==typeof e){this._weights={};for(let t=0;t<e;t++){const s=t,n=1/e;this._weights[s]=n,this._progressMap.set(s,0)}}else this._weights=e;this.emitProgress()}emitProgress(){let e=0;for(const[t,s]of this._progressMap.entries())e+=s*this._weights[t];if(1===e&&(0,o.A)("enable-feature:esri-3dofl-upload-timings")){const e=Math.round(performance.now()-(this._startTime??0))/1e3;console.log(`${this.taskName} done in ${e} sec`);for(const[t,s]of this._timingsMap){const n=Math.round(s.end-s.start)/1e3,o=Math.round(n/e*100);console.log(this.taskName??"Task",{stepKey:t,stepTime:n,relativeTime:o})}}this.onProgress(e)}setProgress(e,t){if(this._progressMap.set(e,t),(0,o.A)("enable-feature:esri-3dofl-upload-timings")){const s=performance.now();this._startTime??=s;const n=(0,g.tE)(this._timingsMap,e,(()=>({start:s,end:0})));1===t&&(n.end=s)}this.emitProgress()}simulate(e,t){return y((t=>this.setProgress(e,t)),t)}makeOnProgress(e){return t=>this.setProgress(e,t)}}function y(e=e=>{},t=x){const s=performance.now();e(0);const n=setInterval((()=>{const n=performance.now()-s,o=1-Math.exp(-n/t);e(o)}),v);return(0,m.hA)((()=>{clearInterval(n),e(1)}))}function A(e,t=T){return(0,i.gr)((0,i.Kp)(e*P/t))}const T=10,b=10,P=8e-6,v=(0,i.l5)(50),x=(0,i.l5)(1e3),j=1e6,F=20*j,$=2e9,D=3;async function M({data:e,name:t,description:s},o,r){let i=null;try{const l=(0,c.fj)(o,"uploads"),p=(0,c.fj)(l,"info"),{data:f}=await(0,n.A)(p,{query:{f:"json"},responseType:"json"});(0,a.Te)(r);const m=(0,d.Wo)(o),g=f.maxUploadFileSize*j,w=m?$:g,y=m?Math.min(F,g):F;if(e.size>w)throw new Error("Data too large");const T=(0,c.fj)(l,"register"),{data:b}=await(0,n.A)(T,{query:{f:"json",itemName:(u=t,u.replaceAll("/","_").replaceAll("\\","_")),description:s},responseType:"json",method:"post"});if((0,a.Te)(r),!b.success)throw new Error("Registration failed");const{itemID:P}=b.item;i=(0,c.fj)(l,P);const v=(0,c.fj)(i,"uploadPart"),x=Math.ceil(e.size/y),M=new Array;for(let t=0;t<x;++t)M.push(e.slice(t*y,Math.min((t+1)*y,e.size)));const N=M.slice().reverse(),S=new Array,E=h(x,r?.onProgress,"uploadItem"),k=async()=>{for(;0!==N.length;){const e=M.length-N.length,t=N.pop(),s=new FormData,o=E.simulate(e,A(t.size));try{s.append("f","json"),s.append("file",t),s.append("partId",`${e}`);const{data:o}=await(0,n.A)(v,{timeout:0,body:s,responseType:"json",method:"post"});if((0,a.Te)(r),!o.success)throw new Error("Part upload failed")}finally{o.remove()}}};for(let e=0;e<D&&0!==N.length;++e)S.push(k());await Promise.all(S);const R=(0,c.fj)(i,"commit"),{data:_}=await(0,n.A)(R,{query:{f:"json",parts:M.map(((e,t)=>t)).join(",")},responseType:"json",method:"post"});if((0,a.Te)(r),!_.success)throw new Error("Commit failed");return _.item}catch(e){if(null!=i){const e=(0,c.fj)(i,"delete");await(0,n.A)(e,{query:{f:"json"},responseType:"json",method:"post"})}throw e}var u}var N=s(66228),S=s(18769),E=s(24328),k=s(57165);async function R(e,t,s){const n=e.length;if(!n)return s?.onProgress?.(1),[];const r=h(n,s?.onProgress,"uploadAssets");return Promise.all(e.map(((e,n)=>async function(e,{layer:t,ongoingUploads:s},n){const r=s.get(e);if(r)return r;if(!function(e){return!!e.infoFor3D&&!!e.url}(t))throw new p.Wt;if(function(e,t){const{parsedUrl:s}=t;return null!=s&&e.metadata.externalSources.some((e=>(0,l.eN)(e,s)))}(e,t))return n?.onProgress?.(1),e;const d=async function(e,t,s){const{metadata:n}=e,{displaySource:r}=n,d=_(r?.source,t,{checkForConversionRequired:(0,o.A)("enable-feature:georeferenced-uploads")}),m=null!=d?async function(e,t,s){return{source:await C(e,t,s),original:!0,unitConversionDisabled:!0}}(d,t,s):n.externalSources.length>0?async function(e,t,s){const n=q(t),{externalSources:r}=e.metadata,a=function(e,t){for(const s of e){const e=_(s.source,t);if(e)return e}return null}(r,t);if(!a)throw new p.xY;const u=h(f.uploadConvertibleSource,s?.onProgress,"uploadConvertibleSource"),d=await C(a,t,{onProgress:u.makeOnProgress("uploadEditSource")});e.addExternalSources([{source:d,original:!0}]);const m=a.reduce(((e,{asset:t})=>t instanceof File?e+t.size:e),0),g=u.simulate("serviceAssetsToGlb",function(e,t=b){return(0,i.gr)((0,i.Kp)(e*P/t))}(m));try{const{source:r,transform:a,origin:i}=await async function(e,t,s){const n=e.map((({assetName:e,parts:t})=>({assetName:e,assetHash:t[0].partHash})));let r;try{const e=(0,c.fj)(t.parsedUrl.path,"convert3D"),o=t.capabilities?.operations.supportsAsyncConvert3D;r=(await(o?Z:Y)(e,{query:{f:"json",assets:JSON.stringify(n),transportType:"esriTransportTypeUrl",targetFormat:s,async:o},responseType:"json",timeout:0})).data}catch(e){throw new p.MT}return function(e,t){const s={source:t.assets.map((t=>{const s=(0,N.R_)(t.contentType,e.infoFor3D.supportedFormats);if(!s)throw new p.H2(s);return new l.Qp(t.assetName,t.contentType,[new l.Bq(t.assetURL,t.assetHash)])})),origin:void 0,transform:void 0};if((0,o.A)("enable-feature:georeferenced-uploads")&&t.transform){if(s.transform=(0,E.f)(t.transform),t.spatialReference){const e=k.A.fromJSON(t.spatialReference);s.origin=(0,E.V)(t.transform,e)}}else s.transform=(0,S.Z)(e.spatialReference);return s}(t,r)}(d,t,n);return e.transform=a,i&&(e.metadata.georeferenced=!0,s?.useAssetOrigin&&(e.vertexSpace.origin=[i.x,i.y,i.z??0],e.spatialReference=i.spatialReference)),{source:r,unitConversionDisabled:!0}}finally{g.remove()}}(e,t,s):async function(e,t,s){const n=h(f.uploadLocalMesh,s?.onProgress,"uploadLocalMesh"),o=async function(e,t,s){const n=q(t),o=await e.load(s),r=await o.toBinaryGLTF({origin:o.origin,signal:s?.signal,ignoreLocalTransform:!0,unitConversionDisabled:!0});return(0,a.Te)(s),{blob:new Blob([r],{type:"model/gltf-binary"}),assetName:`${(0,u.yS)()}.glb`,assetType:n}}(e,t,{...s,onProgress:n.makeOnProgress("meshToAssetBlob")});return{source:await U([o],t,{...s,onProgress:n.makeOnProgress("uploadAssetBlobs")}),extent:e.extent.clone(),original:!0}}(e,t,s),g=await m;return(0,a.Te)(s),e.addExternalSources([g]),e}(e,t,n);s.set(e,d);try{await d}finally{s.delete(e)}return e}(e,t,{...s,onProgress:r.makeOnProgress(n)}))))}function _(e,{infoFor3D:t},s={}){if(!e)return null;const{supportedFormats:n,editFormats:o}=t,r=(0,l.WN)(e),a=new Array,i=(0,N.ND)(t),c=(0,N.nr)(t);let u=!1;for(const e of r){const t=I(e,n);if(!t)return null;const{assetType:r}=t;if(s.checkForConversionRequired&&(r===i||r===c))return null;o.includes(r)&&(u=!0),a.push(t)}return u?a:null}function I(e,t){const s=(0,l.fH)(e,t);return s?{asset:e,assetType:s}:null}async function C(e,t,s){return U(e.map((e=>async function(e,t){const{asset:s,assetType:n}=e;if(s instanceof File)return{blob:s,assetName:s.name,assetType:n};const o=await s.toBlob(t);return(0,a.Te)(t),{blob:o,assetName:s.assetName,assetType:n}}(e,s))),t,s)}async function U(e,t,s){const n=h(f.uploadAssetBlobs,s?.onProgress,"uploadAssetBlobs"),o=await function(e,t,s){const n=h(e.length,s?.onProgress,"prepareAssetItems");return Promise.all(e.map((async(e,o)=>{const i=async function(e,t,s){const{blob:n,assetType:o,assetName:i}=e;let u=null;try{const e=await M({data:n,name:i},t.url,s);(0,a.Te)(s),u={assetType:o,assetUploadId:e.itemID}}catch(e){(0,a.QP)(e),r.A.getLogger("esri.layers.graphics.sources.support.uploadAssets").warnOnce(`Service ${t.url} does not support the REST Uploads API.`)}if(!u){const e=await(0,c._0)(n);if((0,a.Te)(s),!e.isBase64)throw new p.$1;u={assetType:o,assetData:e.data}}if(!u)throw new p.WF;return{item:u,assetName:i}}(await e,t,{...s,onProgress:n.makeOnProgress(o)});return(0,a.Te)(s),i})))}(e,t,{...s,onProgress:n.makeOnProgress("prepareAssetItems")});(0,a.Te)(s);const i=o.map((({item:e})=>e)),{uploadResults:u}=await B(i,t,{...s,onProgress:n.makeOnProgress("uploadAssetItems")});return(0,a.Te)(s),e.map(((e,s)=>function(e,t,s){const{success:n}=t;if(!n){const{error:s}=t;throw new p.hK(e.assetName,s)}const{assetHash:o}=t,{assetName:r,item:{assetType:a}}=e,{infoFor3D:{supportedFormats:i}}=s,c=(0,N.Fm)(a,i);if(!c)throw new p.H2(a);return new l.Qp(r,c,[new l.Bq(`${s.parsedUrl.path}/assets/${o}`,o)])}(o[s],u[s],t)))}async function B(e,t,s){const o=y(s?.onProgress);try{const o=await(0,n.A)((0,c.fj)(t.parsedUrl.path,"uploadAssets"),{timeout:0,query:{f:"json",assets:JSON.stringify(e)},method:"post",responseType:"json"});if((0,a.Te)(s),o.data.uploadResults.length!==e.length)throw new p.nS(e.length,o.data.uploadResults.length);return o.data}finally{o.remove()}}function Y(e,t){return(0,n.A)(e,t)}async function Z(e,t){const s=(await(0,n.A)(e,t)).data.statusUrl;for(;;){const e=(await(0,n.A)(s,{query:{f:"json"},responseType:"json"})).data;switch(e.status){case"Completed":return(0,n.A)(e.resultUrl,{query:{f:"json"},responseType:"json"});case"CompletedWithErrors":throw new Error(e.status);case"Failed ImportChanges":case"InProgress":case"Pending":case"ExportAttachments":case"ExportChanges":case"ExportingData":case"ExportingSnapshot":case"ImportAttachments":case"ProvisioningReplica":case"UnRegisteringReplica":break;default:throw new Error}await(0,a.Pl)(O)}}function q({infoFor3D:e}){const t=(0,N.U9)(e);if(!t)throw new p.uh;return t}const O=(0,i.l5)(1e3)},18769:function(e,t,s){s.d(t,{Z:function(){return r}});var n=s(62938),o=s(36405);function r(e){const t=1/(0,n.GA)(e,1);return 1!==t?new o.A({scale:[t,t,t]}):void 0}},24328:function(e,t,s){s.d(t,{V:function(){return r},f:function(){return a}}),s(50917);var n=s(36405),o=s(45532);function r(e,t,s=i){return new o.default({x:e[s.originX],y:e[s.originY],z:e[s.originZ],spatialReference:t})}function a(e,t=i){return new n.A({translation:[e[t.translationX],-e[t.translationZ],e[t.translationY]],rotationAxis:[e[t.rotationX],-e[t.rotationZ],e[t.rotationY]],rotationAngle:e[t.rotationDeg],scale:[e[t.scaleX],e[t.scaleZ],e[t.scaleY]]})}const i={originX:"originX",originY:"originY",originZ:"originZ",translationX:"translationX",translationY:"translationY",translationZ:"translationZ",scaleX:"scaleX",scaleY:"scaleY",scaleZ:"scaleZ",rotationX:"rotationX",rotationY:"rotationY",rotationZ:"rotationZ",rotationDeg:"rotationDeg"}}}]);
//# sourceMappingURL=support-uploadAssets.js.map