{"version":3,"file":"4060.js","mappings":"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","sources":["webpack://defra/./node_modules/@stencil/core/internal/client/shadow-css.js"],"sourcesContent":["// src/utils/regular-expression.ts\nvar escapeRegExpSpecialCharacters = (text) => {\n  return text.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n};\n\n// src/utils/shadow-css.ts\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n *\n * This file is a port of shadowCSS from `webcomponents.js` to TypeScript.\n * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js\n * https://github.com/angular/angular/blob/master/packages/compiler/src/shadow_css.ts\n */\nvar safeSelector = (selector) => {\n  const placeholders = [];\n  let index = 0;\n  selector = selector.replace(/(\\[[^\\]]*\\])/g, (_, keep) => {\n    const replaceBy = `__ph-${index}__`;\n    placeholders.push(keep);\n    index++;\n    return replaceBy;\n  });\n  const content = selector.replace(/(:nth-[-\\w]+)(\\([^)]+\\))/g, (_, pseudo, exp) => {\n    const replaceBy = `__ph-${index}__`;\n    placeholders.push(exp);\n    index++;\n    return pseudo + replaceBy;\n  });\n  const ss = {\n    content,\n    placeholders\n  };\n  return ss;\n};\nvar restoreSafeSelector = (placeholders, content) => {\n  return content.replace(/__ph-(\\d+)__/g, (_, index) => placeholders[+index]);\n};\nvar _polyfillHost = \"-shadowcsshost\";\nvar _polyfillSlotted = \"-shadowcssslotted\";\nvar _polyfillHostContext = \"-shadowcsscontext\";\nvar _parenSuffix = \")(?:\\\\(((?:\\\\([^)(]*\\\\)|[^)(]*)+?)\\\\))?([^,{]*)\";\nvar _cssColonHostRe = new RegExp(\"(\" + _polyfillHost + _parenSuffix, \"gim\");\nvar _cssColonHostContextRe = new RegExp(\"(\" + _polyfillHostContext + _parenSuffix, \"gim\");\nvar _cssColonSlottedRe = new RegExp(\"(\" + _polyfillSlotted + _parenSuffix, \"gim\");\nvar _polyfillHostNoCombinator = _polyfillHost + \"-no-combinator\";\nvar _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\\s]*)/;\nvar _shadowDOMSelectorsRe = [/::shadow/g, /::content/g];\nvar _selectorReSuffix = \"([>\\\\s~+[.,{:][\\\\s\\\\S]*)?$\";\nvar _polyfillHostRe = /-shadowcsshost/gim;\nvar createSupportsRuleRe = (selector) => new RegExp(`((?<!(^@supports(.*)))|(?<={.*))(${selector}\\\\b)`, \"gim\");\nvar _colonSlottedRe = createSupportsRuleRe(\"::slotted\");\nvar _colonHostRe = createSupportsRuleRe(\":host\");\nvar _colonHostContextRe = createSupportsRuleRe(\":host-context\");\nvar _commentRe = /\\/\\*\\s*[\\s\\S]*?\\*\\//g;\nvar stripComments = (input) => {\n  return input.replace(_commentRe, \"\");\n};\nvar _commentWithHashRe = /\\/\\*\\s*#\\s*source(Mapping)?URL=[\\s\\S]+?\\*\\//g;\nvar extractCommentsWithHash = (input) => {\n  return input.match(_commentWithHashRe) || [];\n};\nvar _ruleRe = /(\\s*)([^;\\{\\}]+?)(\\s*)((?:{%BLOCK%}?\\s*;?)|(?:\\s*;))/g;\nvar _curlyRe = /([{}])/g;\nvar _selectorPartsRe = /(^.*?[^\\\\])??((:+)(.*)|$)/;\nvar OPEN_CURLY = \"{\";\nvar CLOSE_CURLY = \"}\";\nvar BLOCK_PLACEHOLDER = \"%BLOCK%\";\nvar processRules = (input, ruleCallback) => {\n  const inputWithEscapedBlocks = escapeBlocks(input);\n  let nextBlockIndex = 0;\n  return inputWithEscapedBlocks.escapedString.replace(_ruleRe, (...m) => {\n    const selector = m[2];\n    let content = \"\";\n    let suffix = m[4];\n    let contentPrefix = \"\";\n    if (suffix && suffix.startsWith(\"{\" + BLOCK_PLACEHOLDER)) {\n      content = inputWithEscapedBlocks.blocks[nextBlockIndex++];\n      suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);\n      contentPrefix = \"{\";\n    }\n    const cssRule = {\n      selector,\n      content\n    };\n    const rule = ruleCallback(cssRule);\n    return `${m[1]}${rule.selector}${m[3]}${contentPrefix}${rule.content}${suffix}`;\n  });\n};\nvar escapeBlocks = (input) => {\n  const inputParts = input.split(_curlyRe);\n  const resultParts = [];\n  const escapedBlocks = [];\n  let bracketCount = 0;\n  let currentBlockParts = [];\n  for (let partIndex = 0; partIndex < inputParts.length; partIndex++) {\n    const part = inputParts[partIndex];\n    if (part === CLOSE_CURLY) {\n      bracketCount--;\n    }\n    if (bracketCount > 0) {\n      currentBlockParts.push(part);\n    } else {\n      if (currentBlockParts.length > 0) {\n        escapedBlocks.push(currentBlockParts.join(\"\"));\n        resultParts.push(BLOCK_PLACEHOLDER);\n        currentBlockParts = [];\n      }\n      resultParts.push(part);\n    }\n    if (part === OPEN_CURLY) {\n      bracketCount++;\n    }\n  }\n  if (currentBlockParts.length > 0) {\n    escapedBlocks.push(currentBlockParts.join(\"\"));\n    resultParts.push(BLOCK_PLACEHOLDER);\n  }\n  const strEscapedBlocks = {\n    escapedString: resultParts.join(\"\"),\n    blocks: escapedBlocks\n  };\n  return strEscapedBlocks;\n};\nvar insertPolyfillHostInCssText = (cssText) => {\n  cssText = cssText.replace(_colonHostContextRe, `$1${_polyfillHostContext}`).replace(_colonHostRe, `$1${_polyfillHost}`).replace(_colonSlottedRe, `$1${_polyfillSlotted}`);\n  return cssText;\n};\nvar convertColonRule = (cssText, regExp, partReplacer) => {\n  return cssText.replace(regExp, (...m) => {\n    if (m[2]) {\n      const parts = m[2].split(\",\");\n      const r = [];\n      for (let i = 0; i < parts.length; i++) {\n        const p = parts[i].trim();\n        if (!p) break;\n        r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));\n      }\n      return r.join(\",\");\n    } else {\n      return _polyfillHostNoCombinator + m[3];\n    }\n  });\n};\nvar colonHostPartReplacer = (host, part, suffix) => {\n  return host + part.replace(_polyfillHost, \"\") + suffix;\n};\nvar convertColonHost = (cssText) => {\n  return convertColonRule(cssText, _cssColonHostRe, colonHostPartReplacer);\n};\nvar colonHostContextPartReplacer = (host, part, suffix) => {\n  if (part.indexOf(_polyfillHost) > -1) {\n    return colonHostPartReplacer(host, part, suffix);\n  } else {\n    return host + part + suffix + \", \" + part + \" \" + host + suffix;\n  }\n};\nvar convertColonSlotted = (cssText, slotScopeId) => {\n  const slotClass = \".\" + slotScopeId + \" > \";\n  const selectors = [];\n  cssText = cssText.replace(_cssColonSlottedRe, (...m) => {\n    if (m[2]) {\n      const compound = m[2].trim();\n      const suffix = m[3];\n      const slottedSelector = slotClass + compound + suffix;\n      let prefixSelector = \"\";\n      for (let i = m[4] - 1; i >= 0; i--) {\n        const char = m[5][i];\n        if (char === \"}\" || char === \",\") {\n          break;\n        }\n        prefixSelector = char + prefixSelector;\n      }\n      const orgSelector = (prefixSelector + slottedSelector).trim();\n      const addedSelector = `${prefixSelector.trimEnd()}${slottedSelector.trim()}`.trim();\n      if (orgSelector !== addedSelector) {\n        const updatedSelector = `${addedSelector}, ${orgSelector}`;\n        selectors.push({\n          orgSelector,\n          updatedSelector\n        });\n      }\n      return slottedSelector;\n    } else {\n      return _polyfillHostNoCombinator + m[3];\n    }\n  });\n  return {\n    selectors,\n    cssText\n  };\n};\nvar convertColonHostContext = (cssText) => {\n  return convertColonRule(cssText, _cssColonHostContextRe, colonHostContextPartReplacer);\n};\nvar convertShadowDOMSelectors = (cssText) => {\n  return _shadowDOMSelectorsRe.reduce((result, pattern) => result.replace(pattern, \" \"), cssText);\n};\nvar makeScopeMatcher = (scopeSelector2) => {\n  const lre = /\\[/g;\n  const rre = /\\]/g;\n  scopeSelector2 = scopeSelector2.replace(lre, \"\\\\[\").replace(rre, \"\\\\]\");\n  return new RegExp(\"^(\" + scopeSelector2 + \")\" + _selectorReSuffix, \"m\");\n};\nvar selectorNeedsScoping = (selector, scopeSelector2) => {\n  const re = makeScopeMatcher(scopeSelector2);\n  return !re.test(selector);\n};\nvar injectScopingSelector = (selector, scopingSelector) => {\n  return selector.replace(_selectorPartsRe, (_, before = \"\", _colonGroup, colon = \"\", after = \"\") => {\n    return before + scopingSelector + colon + after;\n  });\n};\nvar applySimpleSelectorScope = (selector, scopeSelector2, hostSelector) => {\n  _polyfillHostRe.lastIndex = 0;\n  if (_polyfillHostRe.test(selector)) {\n    const replaceBy = `.${hostSelector}`;\n    return selector.replace(_polyfillHostNoCombinatorRe, (_, selector2) => injectScopingSelector(selector2, replaceBy)).replace(_polyfillHostRe, replaceBy + \" \");\n  }\n  return scopeSelector2 + \" \" + selector;\n};\nvar applyStrictSelectorScope = (selector, scopeSelector2, hostSelector) => {\n  const isRe = /\\[is=([^\\]]*)\\]/g;\n  scopeSelector2 = scopeSelector2.replace(isRe, (_, ...parts) => parts[0]);\n  const className = \".\" + scopeSelector2;\n  const _scopeSelectorPart = (p) => {\n    let scopedP = p.trim();\n    if (!scopedP) {\n      return \"\";\n    }\n    if (p.indexOf(_polyfillHostNoCombinator) > -1) {\n      scopedP = applySimpleSelectorScope(p, scopeSelector2, hostSelector);\n    } else {\n      const t = p.replace(_polyfillHostRe, \"\");\n      if (t.length > 0) {\n        scopedP = injectScopingSelector(t, className);\n      }\n    }\n    return scopedP;\n  };\n  const safeContent = safeSelector(selector);\n  selector = safeContent.content;\n  let scopedSelector = \"\";\n  let startIndex = 0;\n  let res;\n  const sep = /( |>|\\+|~(?!=))\\s*/g;\n  const hasHost = selector.indexOf(_polyfillHostNoCombinator) > -1;\n  let shouldScope = !hasHost;\n  while ((res = sep.exec(selector)) !== null) {\n    const separator = res[1];\n    const part2 = selector.slice(startIndex, res.index).trim();\n    shouldScope = shouldScope || part2.indexOf(_polyfillHostNoCombinator) > -1;\n    const scopedPart = shouldScope ? _scopeSelectorPart(part2) : part2;\n    scopedSelector += `${scopedPart} ${separator} `;\n    startIndex = sep.lastIndex;\n  }\n  const part = selector.substring(startIndex);\n  shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n  scopedSelector += shouldScope ? _scopeSelectorPart(part) : part;\n  return restoreSafeSelector(safeContent.placeholders, scopedSelector);\n};\nvar scopeSelector = (selector, scopeSelectorText, hostSelector, slotSelector) => {\n  return selector.split(\",\").map((shallowPart) => {\n    if (slotSelector && shallowPart.indexOf(\".\" + slotSelector) > -1) {\n      return shallowPart.trim();\n    }\n    if (selectorNeedsScoping(shallowPart, scopeSelectorText)) {\n      return applyStrictSelectorScope(shallowPart, scopeSelectorText, hostSelector).trim();\n    } else {\n      return shallowPart.trim();\n    }\n  }).join(\", \");\n};\nvar scopeSelectors = (cssText, scopeSelectorText, hostSelector, slotSelector) => {\n  return processRules(cssText, (rule) => {\n    let selector = rule.selector;\n    let content = rule.content;\n    if (rule.selector[0] !== \"@\") {\n      selector = scopeSelector(rule.selector, scopeSelectorText, hostSelector, slotSelector);\n    } else if (rule.selector.startsWith(\"@media\") || rule.selector.startsWith(\"@supports\") || rule.selector.startsWith(\"@page\") || rule.selector.startsWith(\"@document\")) {\n      content = scopeSelectors(rule.content, scopeSelectorText, hostSelector, slotSelector);\n    }\n    const cssRule = {\n      selector: selector.replace(/\\s{2,}/g, \" \").trim(),\n      content\n    };\n    return cssRule;\n  });\n};\nvar scopeCssText = (cssText, scopeId, hostScopeId, slotScopeId) => {\n  cssText = insertPolyfillHostInCssText(cssText);\n  cssText = convertColonHost(cssText);\n  cssText = convertColonHostContext(cssText);\n  const slotted = convertColonSlotted(cssText, slotScopeId);\n  cssText = slotted.cssText;\n  cssText = convertShadowDOMSelectors(cssText);\n  if (scopeId) {\n    cssText = scopeSelectors(cssText, scopeId, hostScopeId, slotScopeId);\n  }\n  cssText = replaceShadowCssHost(cssText, hostScopeId);\n  cssText = cssText.replace(/>\\s*\\*\\s+([^{, ]+)/gm, \" $1 \");\n  return {\n    cssText: cssText.trim(),\n    // We need to replace the shadow CSS host string in each of these selectors since we created\n    // them prior to the replacement happening in the components CSS text.\n    slottedSelectors: slotted.selectors.map((ref) => ({\n      orgSelector: replaceShadowCssHost(ref.orgSelector, hostScopeId),\n      updatedSelector: replaceShadowCssHost(ref.updatedSelector, hostScopeId)\n    }))\n  };\n};\nvar replaceShadowCssHost = (cssText, hostScopeId) => {\n  return cssText.replace(/-shadowcsshost-no-combinator/g, `.${hostScopeId}`);\n};\nvar scopeCss = (cssText, scopeId) => {\n  const hostScopeId = scopeId + \"-h\";\n  const slotScopeId = scopeId + \"-s\";\n  const commentsWithHash = extractCommentsWithHash(cssText);\n  cssText = stripComments(cssText);\n  const scoped = scopeCssText(cssText, scopeId, hostScopeId, slotScopeId);\n  cssText = [scoped.cssText, ...commentsWithHash].join(\"\\n\");\n  scoped.slottedSelectors.forEach((slottedSelector) => {\n    const regex = new RegExp(escapeRegExpSpecialCharacters(slottedSelector.orgSelector), \"g\");\n    cssText = cssText.replace(regex, slottedSelector.updatedSelector);\n  });\n  return cssText;\n};\nexport {\n  scopeCss\n};\n"],"names":["_polyfillHost","_polyfillSlotted","_polyfillHostContext","_parenSuffix","_cssColonHostRe","RegExp","_cssColonHostContextRe","_cssColonSlottedRe","_polyfillHostNoCombinator","_polyfillHostNoCombinatorRe","_shadowDOMSelectorsRe","_polyfillHostRe","createSupportsRuleRe","selector","_colonSlottedRe","_colonHostRe","_colonHostContextRe","_commentRe","_commentWithHashRe","_ruleRe","_curlyRe","_selectorPartsRe","BLOCK_PLACEHOLDER","convertColonRule","cssText","regExp","partReplacer","replace","m","parts","split","r","i","length","p","trim","push","join","colonHostPartReplacer","host","part","suffix","colonHostContextPartReplacer","indexOf","injectScopingSelector","scopingSelector","_","before","_colonGroup","colon","after","scopeSelectors","scopeSelectorText","hostSelector","slotSelector","input","inputWithEscapedBlocks","inputParts","resultParts","escapedBlocks","bracketCount","currentBlockParts","partIndex","escapedString","blocks","escapeBlocks","nextBlockIndex","content","contentPrefix","startsWith","substring","rule","map","shallowPart","scopeSelector2","makeScopeMatcher","test","selectorNeedsScoping","className","_scopeSelectorPart","scopedP","lastIndex","replaceBy","selector2","applySimpleSelectorScope","t","safeContent","placeholders","index","keep","pseudo","exp","safeSelector","res","scopedSelector","startIndex","sep","shouldScope","exec","separator","part2","slice","applyStrictSelectorScope","scopeSelector","ruleCallback","processRules","replaceShadowCssHost","hostScopeId","scopeCss","scopeId","slotScopeId","commentsWithHash","match","scoped","slotted","slotClass","selectors","compound","slottedSelector","prefixSelector","char","orgSelector","addedSelector","trimEnd","updatedSelector","convertColonSlotted","convertColonHostContext","convertColonHost","insertPolyfillHostInCssText","reduce","result","pattern","convertShadowDOMSelectors","slottedSelectors","ref","scopeCssText","forEach","regex"],"sourceRoot":""}