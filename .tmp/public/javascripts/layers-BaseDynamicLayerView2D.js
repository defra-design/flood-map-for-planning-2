"use strict";(self.webpackChunkdefra=self.webpackChunkdefra||[]).push([[2458],{59122:function(e,t,n){function i(e,t,n){n=n||2;var i,o,s,l,u,c,d,h=t&&t.length,_=h?t[0]*n:e.length,p=r(e,0,_,n,!0),m=[];if(!p||p.next===p.prev)return m;if(h&&(p=f(e,t,p,n)),e.length>80*n){i=s=e[0],o=l=e[1];for(var g=n;g<_;g+=n)(u=e[g])<i&&(i=u),(c=e[g+1])<o&&(o=c),u>s&&(s=u),c>l&&(l=c);d=0!==(d=Math.max(s-i,l-o))?1/d:0}return a(p,m,n,i,o,d),m}function r(e,t,n,i,r){var o,a;if(r===P(e,t,n,i)>0)for(o=t;o<n;o+=i)a=R(o,e[o],e[o+1],a);else for(o=n-i;o>=t;o-=i)a=R(o,e[o],e[o+1],a);if(a&&T(a,a.next)){var s=a.next;M(a),a=s}return a}function o(e,t){if(!e)return e;t||(t=e);var n,i=e;do{if(n=!1,i.steiner||!T(i,i.next)&&0!==S(i.prev,i,i.next))i=i.next;else{var r=i.prev;if(M(i),(i=t=r)===i.next)break;n=!0}}while(n||i!==t);return t}function a(e,t,n,i,r,f,d){if(e){!d&&f&&m(e,i,r,f);for(var h,_,p=e;e.prev!==e.next;)if(h=e.prev,_=e.next,f?l(e,i,r,f):s(e))t.push(h.i/n),t.push(e.i/n),t.push(_.i/n),M(e),e=_.next,p=_.next;else if((e=_)===p){d?1===d?a(e=u(o(e),t,n),t,n,i,r,f,2):2===d&&c(e,t,n,i,r,f):a(o(e),t,n,i,r,f,1);break}}}function s(e){var t=e.prev,n=e,i=e.next;if(S(t,n,i)>=0)return!1;for(var r=e.next.next;r!==e.prev;){if(x(t.x,t.y,n.x,n.y,i.x,i.y,r.x,r.y)&&S(r.prev,r,r.next)>=0)return!1;r=r.next}return!0}function l(e,t,n,i){var r=e.prev,o=e,a=e.next;if(S(r,o,a)>=0)return!1;for(var s=r.x<o.x?r.x<a.x?r.x:a.x:o.x<a.x?o.x:a.x,l=r.y<o.y?r.y<a.y?r.y:a.y:o.y<a.y?o.y:a.y,u=r.x>o.x?r.x>a.x?r.x:a.x:o.x>a.x?o.x:a.x,c=r.y>o.y?r.y>a.y?r.y:a.y:o.y>a.y?o.y:a.y,f=g(s,l,t,n,i),d=g(u,c,t,n,i),h=e.prevZ,_=e.nextZ;h&&h.z>=f&&_&&_.z<=d;){if(h!==e.prev&&h!==e.next&&x(r.x,r.y,o.x,o.y,a.x,a.y,h.x,h.y)&&S(h.prev,h,h.next)>=0)return!1;if(h=h.prevZ,_!==e.prev&&_!==e.next&&x(r.x,r.y,o.x,o.y,a.x,a.y,_.x,_.y)&&S(_.prev,_,_.next)>=0)return!1;_=_.nextZ}for(;h&&h.z>=f;){if(h!==e.prev&&h!==e.next&&x(r.x,r.y,o.x,o.y,a.x,a.y,h.x,h.y)&&S(h.prev,h,h.next)>=0)return!1;h=h.prevZ}for(;_&&_.z<=d;){if(_!==e.prev&&_!==e.next&&x(r.x,r.y,o.x,o.y,a.x,a.y,_.x,_.y)&&S(_.prev,_,_.next)>=0)return!1;_=_.nextZ}return!0}function u(e,t,n){var i=e;do{var r=i.prev,a=i.next.next;!T(r,a)&&b(r,i,i.next,a)&&I(r,a)&&I(a,r)&&(t.push(r.i/n),t.push(i.i/n),t.push(a.i/n),M(i),M(i.next),i=e=a),i=i.next}while(i!==e);return o(i)}function c(e,t,n,i,r,s){var l=e;do{for(var u=l.next.next;u!==l.prev;){if(l.i!==u.i&&y(l,u)){var c=O(l,u);return l=o(l,l.next),c=o(c,c.next),a(l,t,n,i,r,s),void a(c,t,n,i,r,s)}u=u.next}l=l.next}while(l!==e)}function f(e,t,n,i){var a,s,l,u=[];for(a=0,s=t.length;a<s;a++)(l=r(e,t[a]*i,a<s-1?t[a+1]*i:e.length,i,!1))===l.next&&(l.steiner=!0),u.push(v(l));for(u.sort(d),a=0;a<u.length;a++)n=o(n=_(u[a],n),n.next);return n}function d(e,t){return e.x-t.x}function h(e){if(e.next.prev===e)return e;let t=e;for(;;){const n=t.next;if(n.prev===t||n===t||n===e)break;t=n}return t}function _(e,t){var n=function(e,t){var n,i=t,r=e.x,o=e.y,a=-1/0;do{if(o<=i.y&&o>=i.next.y&&i.next.y!==i.y){var s=i.x+(o-i.y)*(i.next.x-i.x)/(i.next.y-i.y);if(s<=r&&s>a){if(a=s,s===r){if(o===i.y)return i;if(o===i.next.y)return i.next}n=i.x<i.next.x?i:i.next}}i=i.next}while(i!==t);if(!n)return null;if(r===a)return n;var l,u=n,c=n.x,f=n.y,d=1/0;i=n;do{r>=i.x&&i.x>=c&&r!==i.x&&x(o<f?r:a,o,c,f,o<f?a:r,o,i.x,i.y)&&(l=Math.abs(o-i.y)/(r-i.x),I(i,e)&&(l<d||l===d&&(i.x>n.x||i.x===n.x&&p(n,i)))&&(n=i,d=l)),i=i.next}while(i!==u);return n}(e,t);if(!n)return t;var i=O(n,e),r=o(n,n.next);let a=h(i);return o(a,a.next),r=h(r),h(t===n?r:t)}function p(e,t){return S(e.prev,e,t.prev)<0&&S(t.next,e,e.next)<0}function m(e,t,n,i){var r=e;do{null===r.z&&(r.z=g(r.x,r.y,t,n,i)),r.prevZ=r.prev,r.nextZ=r.next,r=r.next}while(r!==e);r.prevZ.nextZ=null,r.prevZ=null,function(e){var t,n,i,r,o,a,s,l,u=1;do{for(n=e,e=null,o=null,a=0;n;){for(a++,i=n,s=0,t=0;t<u&&(s++,i=i.nextZ);t++);for(l=u;s>0||l>0&&i;)0!==s&&(0===l||!i||n.z<=i.z)?(r=n,n=n.nextZ,s--):(r=i,i=i.nextZ,l--),o?o.nextZ=r:e=r,r.prevZ=o,o=r;n=i}o.nextZ=null,u*=2}while(a>1)}(r)}function g(e,t,n,i,r){return(e=1431655765&((e=858993459&((e=252645135&((e=16711935&((e=32767*(e-n)*r)|e<<8))|e<<4))|e<<2))|e<<1))|(t=1431655765&((t=858993459&((t=252645135&((t=16711935&((t=32767*(t-i)*r)|t<<8))|t<<4))|t<<2))|t<<1))<<1}function v(e){var t=e,n=e;do{(t.x<n.x||t.x===n.x&&t.y<n.y)&&(n=t),t=t.next}while(t!==e);return n}function x(e,t,n,i,r,o,a,s){return(r-a)*(t-s)-(e-a)*(o-s)>=0&&(e-a)*(i-s)-(n-a)*(t-s)>=0&&(n-a)*(o-s)-(r-a)*(i-s)>=0}function y(e,t){return e.next.i!==t.i&&e.prev.i!==t.i&&!function(e,t){var n=e;do{if(n.i!==e.i&&n.next.i!==e.i&&n.i!==t.i&&n.next.i!==t.i&&b(n,n.next,e,t))return!0;n=n.next}while(n!==e);return!1}(e,t)&&(I(e,t)&&I(t,e)&&function(e,t){var n=e,i=!1,r=(e.x+t.x)/2,o=(e.y+t.y)/2;do{n.y>o!=n.next.y>o&&n.next.y!==n.y&&r<(n.next.x-n.x)*(o-n.y)/(n.next.y-n.y)+n.x&&(i=!i),n=n.next}while(n!==e);return i}(e,t)&&(S(e.prev,e,t.prev)||S(e,t.prev,t))||T(e,t)&&S(e.prev,e,e.next)>0&&S(t.prev,t,t.next)>0)}function S(e,t,n){return(t.y-e.y)*(n.x-t.x)-(t.x-e.x)*(n.y-t.y)}function T(e,t){return e.x===t.x&&e.y===t.y}function b(e,t,n,i){var r=A(S(e,t,n)),o=A(S(e,t,i)),a=A(S(n,i,e)),s=A(S(n,i,t));return r!==o&&a!==s||!(0!==r||!E(e,n,t))||!(0!==o||!E(e,i,t))||!(0!==a||!E(n,e,i))||!(0!==s||!E(n,t,i))}function E(e,t,n){return t.x<=Math.max(e.x,n.x)&&t.x>=Math.min(e.x,n.x)&&t.y<=Math.max(e.y,n.y)&&t.y>=Math.min(e.y,n.y)}function A(e){return e>0?1:e<0?-1:0}function I(e,t){return S(e.prev,e,e.next)<0?S(e,t,e.next)>=0&&S(e,e.prev,t)>=0:S(e,t,e.prev)<0||S(e,e.next,t)<0}function O(e,t){var n=new C(e.i,e.x,e.y),i=new C(t.i,t.x,t.y),r=e.next,o=t.prev;return e.next=t,t.prev=e,n.next=r,r.prev=n,i.next=n,n.prev=i,o.next=i,i.prev=o,i}function R(e,t,n,i){var r=new C(e,t,n);return i?(r.next=i.next,r.prev=i,i.next.prev=r,i.next=r):(r.prev=r,r.next=r),r}function M(e){e.next.prev=e.prev,e.prev.next=e.next,e.prevZ&&(e.prevZ.nextZ=e.nextZ),e.nextZ&&(e.nextZ.prevZ=e.prevZ)}function C(e,t,n){this.i=e,this.x=t,this.y=n,this.prev=null,this.next=null,this.z=null,this.prevZ=null,this.nextZ=null,this.steiner=!1}function P(e,t,n,i){for(var r=0,o=t,a=n-i;o<n;o+=i)r+=(e[a]-e[o])*(e[o+1]+e[a+1]),a=o;return r}n.d(t,{e:function(){return i}}),i.deviation=function(e,t,n,i){var r=t&&t.length,o=r?t[0]*n:e.length,a=Math.abs(P(e,0,o,n));if(r)for(var s=0,l=t.length;s<l;s++){var u=t[s]*n,c=s<l-1?t[s+1]*n:e.length;a-=Math.abs(P(e,u,c,n))}var f=0;for(s=0;s<i.length;s+=3){var d=i[s]*n,h=i[s+1]*n,_=i[s+2]*n;f+=Math.abs((e[d]-e[_])*(e[h+1]-e[d+1])-(e[d]-e[h])*(e[_+1]-e[d+1]))}return 0===a&&0===f?0:Math.abs((f-a)/a)},i.flatten=function(e){for(var t=e[0][0].length,n={vertices:[],holes:[],dimensions:t},i=0,r=0;r<e.length;r++){for(var o=0;o<e[r].length;o++)for(var a=0;a<t;a++)n.vertices.push(e[r][o][a]);r>0&&(i+=e[r-1].length,n.holes.push(i))}return n}},43274:function(e,t,n){function i(){return new Float32Array(3)}function r(e){const t=new Float32Array(3);return t[0]=e[0],t[1]=e[1],t[2]=e[2],t}function o(e,t,n){const i=new Float32Array(3);return i[0]=e,i[1]=t,i[2]=n,i}function a(){return i()}function s(){return o(1,1,1)}function l(){return o(1,0,0)}function u(){return o(0,1,0)}function c(){return o(0,0,1)}n.d(t,{fA:function(){return o},o8:function(){return r},vt:function(){return i}});const f=a(),d=s(),h=l(),_=u(),p=c();Object.freeze(Object.defineProperty({__proto__:null,ONES:d,UNIT_X:h,UNIT_Y:_,UNIT_Z:p,ZEROS:f,clone:r,create:i,createView:function(e,t){return new Float32Array(e,t,3)},fromValues:o,ones:s,unitX:l,unitY:u,unitZ:c,zeros:a},Symbol.toStringTag,{value:"Module"}))},43745:function(e,t,n){function i(){return new Float32Array(4)}function r(e,t,n,i){const r=new Float32Array(4);return r[0]=e,r[1]=t,r[2]=n,r[3]=i,r}function o(){return i()}function a(){return r(1,1,1,1)}function s(){return r(1,0,0,0)}function l(){return r(0,1,0,0)}function u(){return r(0,0,1,0)}function c(){return r(0,0,0,1)}n.d(t,{fA:function(){return r}});const f=o(),d=a(),h=s(),_=l(),p=u(),m=c();Object.freeze(Object.defineProperty({__proto__:null,ONES:d,UNIT_W:m,UNIT_X:h,UNIT_Y:_,UNIT_Z:p,ZEROS:f,clone:function(e){const t=new Float32Array(4);return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t},create:i,createView:function(e,t){return new Float32Array(e,t,4)},fromValues:r,ones:a,unitW:c,unitX:s,unitY:l,unitZ:u,zeros:o},Symbol.toStringTag,{value:"Module"}))},36729:function(e,t,n){n.d(t,{$B:function(){return d}});var i=n(53804),r=n(83525),o=n(58941),a=n(21609),s=n(40633),l=n(23502),u=n(65953),c=n(70994),f=n(25128);let d=class extends r.A{constructor(e){super(e),this._from=null,this._to=null,this._final=null,this._current=[],this._time=0,this.duration=(0,o.A)("mapview-transitions-duration"),this.effects=[]}set effect(e){if(this._get("effect")!==(e=e||"")){this._set("effect",e);try{this._transitionTo(h(e))}catch(t){this._transitionTo([]),s.A.getLogger(this).warn("Invalid Effect",{effect:e,error:t})}}}get final(){return this._final}get hasEffects(){return this.transitioning||!!this.effects.length}set scale(e){this._updateForScale(e)}get transitioning(){return null!==this._to}canTransitionTo(e){try{return this.scale>0&&_(this._current,h(e),this.scale)}catch{return!1}}transitionStep(e,t){this._applyTimeTransition(e),this._updateForScale(t)}endTransition(){this._applyTimeTransition(this.duration)}_transitionTo(e){this.scale>0&&_(this._current,e,this.scale)?(this._final=e,this._to=(0,a.o8)(e),function(e,t,n){const i=e.length>t.length?e:t,r=e.length>t.length?t:e,o=r[r.length-1],a=o?.scale??n,s=o?.effects??[];for(let e=r.length;e<i.length;e++)r.push({scale:a,effects:[...s]});for(let e=0;e<i.length;e++)r[e].scale=-1===r[e].scale?n:r[e].scale,i[e].scale=-1===i[e].scale?n:i[e].scale,(0,f.O9)(r[e].effects,i[e].effects)}(this._current,this._to,this.scale),this._from=(0,a.o8)(this._current),this._time=0):(this._from=this._to=this._final=null,this._current=e),this._set("effects",this._current[0]?(0,a.o8)(this._current[0].effects):[])}_applyTimeTransition(e){if(!(this._to&&this._from&&this._current&&this._final))return;this._time+=e;const t=Math.min(1,this._time/this.duration);for(let e=0;e<this._current.length;e++){const n=this._current[e],i=this._from[e],r=this._to[e];n.scale=p(i.scale,r.scale,t);for(let e=0;e<n.effects.length;e++){const o=n.effects[e],a=i.effects[e],s=r.effects[e];o.interpolate(a,s,t)}}1===t&&(this._current=this._final,this._set("effects",this._current[0]?(0,a.o8)(this._current[0].effects):[]),this._from=this._to=this._final=null)}_updateForScale(e){if(this._set("scale",e),0===this._current.length)return;const t=this._current,n=this._current.length-1;let i,r,o=1;if(1===t.length||e>=t[0].scale)r=i=t[0].effects;else if(e<=t[n].scale)r=i=t[n].effects;else for(let a=0;a<n;a++){const n=t[a],s=t[a+1];if(n.scale>=e&&s.scale<=e){o=(e-n.scale)/(s.scale-n.scale),i=n.effects,r=s.effects;break}}for(let e=0;e<this.effects.length;e++)this.effects[e].interpolate(i[e],r[e],o)}};function h(e){const t=(0,c.q)(e)||[];return function(e){const t=e[0];return!!t&&"type"in t}(t)?[{scale:-1,effects:t}]:t}function _(e,t,n){return!e[0]?.effects||!t[0]?.effects||!((-1===e[0]?.scale||-1===t[0]?.scale)&&(e.length>1||t.length>1)&&n<=0)&&(0,f.mj)(e[0].effects,t[0].effects)}function p(e,t,n){return e+(t-e)*n}(0,i._)([(0,l.MZ)()],d.prototype,"_to",void 0),(0,i._)([(0,l.MZ)()],d.prototype,"duration",void 0),(0,i._)([(0,l.MZ)({value:""})],d.prototype,"effect",null),(0,i._)([(0,l.MZ)({readOnly:!0})],d.prototype,"effects",void 0),(0,i._)([(0,l.MZ)({readOnly:!0})],d.prototype,"final",null),(0,i._)([(0,l.MZ)({readOnly:!0})],d.prototype,"hasEffects",null),(0,i._)([(0,l.MZ)({value:0})],d.prototype,"scale",null),(0,i._)([(0,l.MZ)({readOnly:!0})],d.prototype,"transitioning",null),d=(0,i._)([(0,u.$)("esri.layers.effects.EffectView")],d)},65215:function(e,t,n){n.d(t,{N3:function(){return o},Om:function(){return r}});var i=n(76613);class r{constructor(e=null,t={},n,i){this.geometry=e,this.attributes=t,this.centroid=n,this.objectId=i,this.displayId=0,this.geohashX=0,this.geohashY=0}static fromJSON(e,t){const n=e.geometry?i.A.fromJSON(e.geometry):null,o=e.centroid?i.A.fromJSON(e.centroid):null,a=e.attributes[t];return new r(n,e.attributes,o,a)}weakClone(){const e=new r(this.geometry,this.attributes,this.centroid,this.objectId);return e.displayId=this.displayId,e.geohashX=this.geohashX,e.geohashY=this.geohashY,e}clone(){const e=this.geometry?.clone(),t=new r(e,{...this.attributes},this.centroid?.clone(),this.objectId);return t.displayId=this.displayId,t.geohashX=this.geohashX,t.geohashY=this.geohashY,t}}function o(e){return!!e.geometry?.coords?.length}},72887:function(e,t,n){n.d(t,{A:function(){return i}});class i{constructor(){this.objectIdFieldName=null,this.globalIdFieldName=null,this.geohashFieldName=null,this.geometryProperties=null,this.geometryType=null,this.spatialReference=null,this.hasZ=!1,this.hasM=!1,this.features=[],this.fields=[],this.transform=null,this.exceededTransferLimit=!1,this.uniqueIdField=null,this.queryGeometryType=null,this.queryGeometry=null}weakClone(){const e=new i;return e.objectIdFieldName=this.objectIdFieldName,e.globalIdFieldName=this.globalIdFieldName,e.geohashFieldName=this.geohashFieldName,e.geometryProperties=this.geometryProperties,e.geometryType=this.geometryType,e.spatialReference=this.spatialReference,e.hasZ=this.hasZ,e.hasM=this.hasM,e.features=this.features,e.fields=this.fields,e.transform=this.transform,e.exceededTransferLimit=this.exceededTransferLimit,e.uniqueIdField=this.uniqueIdField,e.queryGeometry=this.queryGeometry,e.queryGeometryType=this.queryGeometryType,e}}},76613:function(e,t,n){n.d(t,{A:function(){return i}});class i{constructor(e=[],t=[]){this.lengths=e??[],this.coords=t??[]}static fromJSON(e){return new i(e.lengths,e.coords)}static fromRect(e){const[t,n,r,o]=e,a=r-t,s=o-n;return new i([5],[t,n,a,0,0,s,-a,0,0,-s])}get isPoint(){return 0===this.lengths.length&&this.coords.length>=2}get maxLength(){return Math.max(...this.lengths)}get size(){return this.lengths.reduce(((e,t)=>e+t))}forEachVertex(e){let t=0;this.lengths.length||e(this.coords[0],this.coords[1]);for(let n=0;n<this.lengths.length;n++){const i=this.lengths[n];for(let n=0;n<i;n++)e(this.coords[2*(n+t)],this.coords[2*(n+t)+1]);t+=i}}deltaDecode(){const e=this.clone(),{coords:t,lengths:n}=e;let i=0;for(const e of n){for(let n=1;n<e;n++)t[2*(i+n)]+=t[2*(i+n)-2],t[2*(i+n)+1]+=t[2*(i+n)-1];i+=e}return e}clone(e){if(0===this.lengths.length)return new i([],[this.coords[0],this.coords[1]]);const t=2*(0===this.lengths.length?1:this.lengths.reduce(((e,t)=>e+t))),n=this.coords.slice(0,t);return e?(e.set(n),new i(this.lengths,e)):new i(Array.from(this.lengths),Array.from(n))}}},58081:function(e,t,n){n.d(t,{B2:function(){return S},BW:function(){return F},Ch:function(){return re},DF:function(){return b},Di:function(){return Y},E2:function(){return H},IE:function(){return y},Nl:function(){return J},Q4:function(){return oe},Rk:function(){return se},Ux:function(){return W},Ye:function(){return B},ZF:function(){return X},eU:function(){return U},eY:function(){return $},jH:function(){return Q},jQ:function(){return ie},kz:function(){return ee},oN:function(){return Z},q3:function(){return K},qK:function(){return N},qN:function(){return D},z5:function(){return V},zv:function(){return j}});var i=n(39819),r=n(40633),o=n(95929),a=n(24761),s=n(87416),l=n(74697),u=n(65215),c=n(72887),f=n(76613);function d(e,t){return e?t?4:3:t?3:2}const h=()=>r.A.getLogger("esri.layers.graphics.featureConversionUtils"),_={esriGeometryPoint:0,esriGeometryPolyline:2,esriGeometryPolygon:3,esriGeometryMultipoint:0,esriGeometryMultiPatch:3,esriGeometryEnvelope:0},p=(e,t,n,i,r,o)=>{e[n]=r,e[n+1]=o},m=(e,t,n,i,r,o)=>{e[n]=r,e[n+1]=o,e[n+2]=t[i+2]},g=(e,t,n,i,r,o)=>{e[n]=r,e[n+1]=o,e[n+2]=t[i+3]},v=(e,t,n,i,r,o)=>{e[n]=r,e[n+1]=o,e[n+2]=t[i+2],e[n+3]=t[i+3]};function x(e,t,n,i){if(e){if(n)return t&&i?v:m;if(t&&i)return g}else if(t&&i)return m;return p}function y({scale:e,translate:t},n){return Math.round((n-t[0])/e[0])}function S({scale:e,translate:t},n){return Math.round((t[1]-n)/e[1])}function T({scale:e,translate:t},n,i){return n*e[i]+t[i]}function b(e,t,n){return e?t?n?C(e):I(e):n?R(e):E(e):null}function E(e){const t=e.coords;return{x:t[0],y:t[1]}}function A(e,t){return e.coords[0]=t.x,e.coords[1]=t.y,e}function I(e){const t=e.coords;return{x:t[0],y:t[1],z:t[2]}}function O(e,t){return e.coords[0]=t.x,e.coords[1]=t.y,e.coords[2]=t.z,e}function R(e){const t=e.coords;return{x:t[0],y:t[1],m:t[2]}}function M(e,t){return e.coords[0]=t.x,e.coords[1]=t.y,e.coords[2]=t.m,e}function C(e){const t=e.coords;return{x:t[0],y:t[1],z:t[2],m:t[3]}}function P(e,t){return e.coords[0]=t.x,e.coords[1]=t.y,e.coords[2]=t.z,e.coords[3]=t.m,e}function w(e,t){return e&&t?P:e?O:t?M:A}function D(e,t,n=w(null!=t.z,null!=t.m)){return n(e,t)}function N(e,t,n){if(null==e)return null;const i=d(t,n),r=[];for(let t=0;t<e.coords.length;t+=i){const n=[];for(let r=0;r<i;r++)n.push(e.coords[t+r]);r.push(n)}return t?n?{points:r,hasZ:t,hasM:n}:{points:r,hasZ:t}:n?{points:r,hasM:n}:{points:r}}function L(e,t,n=d(t.hasZ,t.hasM)){e.lengths[0]=t.points.length;const i=e.coords;let r=0;for(const e of t.points)for(let t=0;t<n;t++)i[r++]=e[t];return e}function F(e,t,n){if(!e)return null;const i=d(t,n),{coords:r,lengths:o}=e,a=[];let s=0;for(const e of o){const t=[];for(let n=0;n<e;n++){const e=[];for(let t=0;t<i;t++)e.push(r[s++]);t.push(e)}a.push(t)}return t?n?{paths:a,hasZ:t,hasM:n}:{paths:a,hasZ:t}:n?{paths:a,hasM:n}:{paths:a}}function z(e,t,n=d(t.hasZ,t.hasM)){const{lengths:i,coords:r}=e;let o=0;for(const e of t.paths){for(const t of e)for(let e=0;e<n;e++)r[o++]=t[e];i.push(e.length)}return e}function V(e,t,n){if(!e)return null;const i=d(t,n),{coords:r,lengths:o}=e,a=[];let s=0;for(const e of o){const t=[];for(let n=0;n<e;n++){const e=[];for(let t=0;t<i;t++)e.push(r[s++]);t.push(e)}a.push(t)}return t?n?{rings:a,hasZ:t,hasM:n}:{rings:a,hasZ:t}:n?{rings:a,hasM:n}:{rings:a}}function B(e,t,n=t.hasZ,i=t.hasM){return U(e,t.rings,n,i)}function U(e,t,n,i){const r=d(n,i),{lengths:o,coords:a}=e;let s=0;le(e);for(const e of t){for(const t of e)for(let e=0;e<r;e++)a[s++]=t[e];o.push(e.length)}return e}const G=[],k=[];function H(e,t,n,i,r){G[0]=e;const[o]=Y(k,G,t,n,i,r);return ue(G),ue(k),o}function Y(e,t,n,r,o,a){if(ue(e),!n){for(const n of t){const t=a?n.attributes[a]:void 0;e.push(new u.Om(null,n.attributes,null,t))}return e}switch(n){case"esriGeometryPoint":return function(e,t,n,i,r){const o=w(n,i);for(const{geometry:n,attributes:i}of t){const t=null!=n?o(new f.A,n):null;e.push(new u.Om(t,i,null,r?i[r]:void 0))}return e}(e,t,r,o,a);case"esriGeometryMultipoint":return function(e,t,n,i,r){const o=d(n,i);for(const{geometry:n,attributes:i}of t){const t=null!=n?L(new f.A,n,o):null;e.push(new u.Om(t,i,null,r?i[r]:void 0))}return e}(e,t,r,o,a);case"esriGeometryPolyline":return function(e,t,n,i,r){const o=d(n,i);for(const{geometry:n,attributes:i,centroid:a}of t){const t=null!=n?z(new f.A,n,o):null,s=null!=a?D(new f.A,a):null;e.push(new u.Om(t,i,s,r?i[r]:void 0))}return e}(e,t,r,o,a);case"esriGeometryPolygon":case"esriGeometryMultiPatch":return function(e,t,n,i,r){for(const{geometry:o,centroid:a,attributes:s}of t){const t=null!=o?B(new f.A,o,n,i):null,l=r?s[r]:void 0;null!=a?e.push(new u.Om(t,s,A(new f.A,a),l)):e.push(new u.Om(t,s,null,l))}return e}(e,t,r,o,a);default:h().error("convertToFeatureSet:unknown-geometry",new i.A(`Unable to parse unknown geometry type '${n}'`)),ue(e)}return e}function Z(e,t,n,i){k[0]=e,q(G,k,t,n,i);const r=G[0];return ue(G),ue(k),r}function W(e,t,n){if(null==e)return null;const r=new f.A;return"hasZ"in e&&null==t&&(t=e.hasZ),"hasM"in e&&null==n&&(n=e.hasM),(0,l.fT)(e)?w(null!=t?t:null!=e.z,null!=n?n:null!=e.m)(r,e):(0,l.Bi)(e)?B(r,e,t,n):(0,l.Rg)(e)?z(r,e,d(t,n)):(0,l.U9)(e)?L(r,e,d(t,n)):void h().error("convertFromGeometry:unknown-geometry",new i.A(`Unable to parse unknown geometry type '${e}'`))}function j(e,t,n,r){const o=e&&("coords"in e?e:e.geometry);if(null==o)return null;switch(t){case"esriGeometryPoint":{let e=E;return n&&r?e=C:n?e=I:r&&(e=R),e(o)}case"esriGeometryMultipoint":return N(o,n,r);case"esriGeometryPolyline":return F(o,n,r);case"esriGeometryPolygon":return V(o,n,r);default:return h().error("convertToGeometry:unknown-geometry",new i.A(`Unable to parse unknown geometry type '${t}'`)),null}}function q(e,t,n,r,o){if(ue(e),null==n)return function(e,t){for(const n of t)e.push({attributes:n.attributes});return e}(e,t);switch(n){case"esriGeometryPoint":return function(e,t,n,i){let r=E;n&&i?r=C:n?r=I:i&&(r=R);for(const n of t){const{geometry:t,attributes:i}=n,o=null!=t?r(t):null;e.push({attributes:i,geometry:o})}return e}(e,t,r,o);case"esriGeometryMultipoint":return function(e,t,n,i){for(const{geometry:r,attributes:o}of t)e.push({attributes:o,geometry:null!=r?N(r,n,i):null});return e}(e,t,r,o);case"esriGeometryPolyline":return function(e,t,n,i){for(const{geometry:r,attributes:o}of t)e.push({attributes:o,geometry:null!=r?F(r,n,i):null});return e}(e,t,r,o);case"esriGeometryPolygon":return function(e,t,n,i){for(const{geometry:r,attributes:o,centroid:a}of t){const t=null!=r?V(r,n,i):null;if(null!=a){const n=E(a);e.push({attributes:o,centroid:n,geometry:t})}else e.push({attributes:o,geometry:t})}return e}(e,t,r,o);default:h().error("convertToFeatureSet:unknown-geometry",new i.A(`Unable to parse unknown geometry type '${n}'`))}return e}function X(e){const{objectIdFieldName:t,spatialReference:n,transform:i,fields:r,hasM:o,hasZ:a,features:s,geometryType:l,exceededTransferLimit:u,uniqueIdField:c,queryGeometry:f,queryGeometryType:d}=e,h={features:q([],s,l,a,o),fields:r,geometryType:l,objectIdFieldName:t,spatialReference:n,uniqueIdField:c,queryGeometry:j(f,d,!1,!1)};return i&&(h.transform=i),u&&(h.exceededTransferLimit=u),o&&(h.hasM=o),a&&(h.hasZ=a),h}function K(e,t){const n=new c.A,{hasM:r,hasZ:o,features:a,objectIdFieldName:s,spatialReference:l,geometryType:u,exceededTransferLimit:f,transform:d,fields:_}=e;return _&&(n.fields=_),n.geometryType=u??null,n.objectIdFieldName=s??t??null,n.spatialReference=l??null,n.objectIdFieldName?(a&&Y(n.features,a,u,o,r,n.objectIdFieldName),f&&(n.exceededTransferLimit=f),r&&(n.hasM=r),o&&(n.hasZ=o),d&&(n.transform=d),n):(h().error(new i.A("optimized-features:invalid-objectIdFieldName","objectIdFieldName is missing")),n)}function $(e){const{transform:t,features:n,hasM:i,hasZ:r}=e;if(!t)return e;for(const e of n)null!=e.geometry&&re(e.geometry,e.geometry,i,r,t),null!=e.centroid&&re(e.centroid,e.centroid,i,r,t);return e.transform=null,e}function Q(e,t){const{geometryType:n,features:i,hasM:r,hasZ:o}=t;if(!e)return t;for(let t=0;t<i.length;t++){const a=i[t],s=a.weakClone();s.geometry=new f.A,J(s.geometry,a.geometry,r,o,n,e),a.centroid&&(s.centroid=new f.A,J(s.centroid,a.centroid,r,o,"esriGeometryPoint",e)),i[t]=s}return t.transform=e,t}function J(e,t,n,i,r,o,a=n,s=i){if(le(e),!t?.coords.length)return null;const l=_[r],{coords:u,lengths:c}=t,f=d(n,i),h=d(n&&a,i&&s),p=x(n,i,a,s);if(!c.length)return p(e.coords,u,0,0,y(o,u[0]),S(o,u[1])),le(e,f,0),e;let m,g,v,T,b=0,E=0,A=E;for(const t of c){if(t<l)continue;let n=0;E=A,v=m=y(o,u[b]),T=g=S(o,u[b+1]),p(e.coords,u,E,b,v,T),n++,b+=f,E+=h;for(let i=1;i<t;i++,b+=f)v=y(o,u[b]),T=S(o,u[b+1]),v===m&&T===g||(p(e.coords,u,E,b,v-m,T-g),E+=h,n++,m=v,g=T);n>=l&&(e.lengths.push(n),A=E)}return ue(e.coords,A),e.coords.length?e:null}function ee(e,t,n,i,r,o,a=n,s=i){if(le(e),!t?.coords.length)return null;const l=_[r],{coords:u,lengths:c}=t,f=d(n,i),h=d(n&&a,i&&s),p=x(n,i,a,s);if(!c.length)return p(e.coords,u,0,0,u[0],u[1]),le(e,f,0),e;let m=0;const g=o*o;for(const t of c){if(t<l){m+=t*f;continue}const n=e.coords.length/h,i=m,r=m+(t-1)*f;p(e.coords,u,e.coords.length,i,u[i],u[i+1]),ne(e.coords,u,f,g,p,i,r),p(e.coords,u,e.coords.length,r,u[r],u[r+1]);const o=e.coords.length/h-n;o>=l?e.lengths.push(o):ue(e.coords,n*h),m+=t*f}return e.coords.length?e:null}function te(e,t,n,i){const r=e[t],o=e[t+1],a=e[n],s=e[n+1],l=e[i],u=e[i+1];let c=a,f=s,d=l-c,h=u-f;if(0!==d||0!==h){const e=((r-c)*d+(o-f)*h)/(d*d+h*h);e>1?(c=l,f=u):e>0&&(c+=d*e,f+=h*e)}return d=r-c,h=o-f,d*d+h*h}function ne(e,t,n,i,r,o,a){let s,l=i,u=0;for(let e=o+n;e<a;e+=n)s=te(t,e,o,a),s>l&&(u=e,l=s);l>i&&(u-o>n&&ne(e,t,n,i,r,o,u),r(e,t,e.length,u,t[u],t[u+1]),a-u>n&&ne(e,t,n,i,r,u,a))}function ie(e,t,n,i){if(!t?.coords?.length)return null;const r=d(n,i);let o=Number.POSITIVE_INFINITY,l=Number.POSITIVE_INFINITY,u=Number.NEGATIVE_INFINITY,c=Number.NEGATIVE_INFINITY;if(t&&t.coords){const e=t.coords;for(let t=0;t<e.length;t+=r){const n=e[t],i=e[t+1];o=Math.min(o,n),u=Math.max(u,n),l=Math.min(l,i),c=Math.max(c,i)}}return(0,a.is)(e)?(0,a.BI)(e,o,l,u,c):(0,s.fA)(o,l,u,c,e),e}function re(e,t,n,i,r){const{coords:a,lengths:s}=t,l=d(n,i);if(!a.length)return e!==t&&le(e),e;(0,o.Lw)(r);const{originPosition:u,scale:c,translate:f}=r,h=ce;h.originPosition=u;const _=h.scale;_[0]=c[0]??1,_[1]=-(c[1]??1),_[2]=c[2]??1,_[3]=c[3]??1;const p=h.translate;if(p[0]=f[0]??0,p[1]=f[1]??0,p[2]=f[2]??0,p[3]=f[3]??0,!s.length){for(let t=0;t<l;++t)e.coords[t]=T(h,a[t],t);return e!==t&&le(e,l,0),e}let m=0;for(let t=0;t<s.length;t++){const n=s[t];e.lengths[t]=n;for(let t=0;t<l;++t)e.coords[m+t]=T(h,a[m+t],t);let i=e.coords[m],r=e.coords[m+1];m+=l;for(let t=1;t<n;t++,m+=l){i+=a[m]*_[0],r+=a[m+1]*_[1],e.coords[m]=i,e.coords[m+1]=r;for(let t=2;t<l;++t)e.coords[m+t]=T(h,a[m+t],t)}}return e!==t&&le(e,a.length,s.length),e}function oe(e,t,n,i,r,o){if(le(e),e.lengths.push(...t.lengths),n===r&&i===o)for(let n=0;n<t.coords.length;n++)e.coords.push(t.coords[n]);else{const a=d(n,i),s=x(n,i,r,o),l=t.coords;for(let t=0;t<l.length;t+=a)s(e.coords,l,e.coords.length,t,l[t],l[t+1])}return e}function ae(e,t,n,i){let r=0,o=e[i*t],a=e[i*(t+1)];for(let s=1;s<n;s++){const n=o+e[i*(t+s)],l=a+e[i*(t+s)+1],u=(n-o)*(l+a);o=n,a=l,r+=u}return.5*r}function se(e,t){const{coords:n,lengths:i}=e;let r=0,o=0;for(let e=0;e<i.length;e++){const a=i[e];o+=ae(n,r,a,t),r+=a}return Math.abs(o)}function le(e,t=0,n=0){ue(e.lengths,n),ue(e.coords,t)}function ue(e,t=0){e.length!==t&&(e.length=t)}const ce={originPosition:"lowerLeft",scale:[1,1,1,1],translate:[0,0,0,0]}},82603:function(e,t,n){n.d(t,{LG:function(){return d},mb:function(){return _},yr:function(){return h}});var i=n(60539),r=n(44705),o=n(25090),a=n(14583),s=n(77515),l=n(83556),u=n(85456),c=n(12285),f=n(10956);function d(e){return e&&"render"in e}function h(e){const t=document.createElement("canvas");return t.width=e.width,t.height=e.height,e.render(t.getContext("2d")),t}class _ extends s.q{constructor(e=null,t=!1){super(),this.blendFunction="standard",this._sourceWidth=0,this._sourceHeight=0,this._textureInvalidated=!1,this._texture=null,this.stencilRef=0,this.coordScale=[1,1],this._height=void 0,this.pixelRatio=1,this.resolution=0,this.rotation=0,this._source=null,this._width=void 0,this.x=0,this.y=0,this.immutable=t,this.source=e,this.requestRender=this.requestRender.bind(this)}destroy(){this._texture&&(this._texture.dispose(),this._texture=null),null!=this._uploadStatus&&(this._uploadStatus.controller.abort(),this._uploadStatus=null)}get isSourceScaled(){return this.width!==this._sourceWidth||this.height!==this._sourceHeight}get height(){return void 0!==this._height?this._height:this._sourceHeight}set height(e){this._height=e}get source(){return this._source}set source(e){null==e&&null==this._source||(this._source=e,this.invalidateTexture(),this.requestRender())}get width(){return void 0!==this._width?this._width:this._sourceWidth}set width(e){this._width=e}beforeRender(e){super.beforeRender(e),this.updateTexture(e)}async setSourceAsync(e,t){null!=this._uploadStatus&&this._uploadStatus.controller.abort();const n=new AbortController,r=(0,i.Tw)();return(0,i.NY)(t,(()=>n.abort())),(0,i.NY)(n,(e=>r.reject(e))),this._uploadStatus={controller:n,resolver:r},this.source=e,r.promise}invalidateTexture(){this._textureInvalidated||(this._textureInvalidated=!0,this._source instanceof HTMLImageElement?(this._sourceHeight=this._source.naturalHeight,this._sourceWidth=this._source.naturalWidth):this._source&&(this._sourceHeight=this._source.height,this._sourceWidth=this._source.width))}transitionStep(e,t){e>=64&&(this.fadeTransitionEnabled=!1),super.transitionStep(e,t)}setTransform(e){const t=(0,r.D_)(this.transforms.displayViewScreenMat3),[n,i]=e.toScreenNoRotation([0,0],[this.x,this.y]),o=this.resolution/this.pixelRatio/e.resolution,s=o*this.width,l=o*this.height,u=Math.PI*this.rotation/180;(0,r.Tl)(t,t,(0,a.fA)(n,i)),(0,r.Tl)(t,t,(0,a.fA)(s/2,l/2)),(0,r.e$)(t,t,-u),(0,r.Tl)(t,t,(0,a.fA)(-s/2,-l/2)),(0,r.Oe)(t,t,(0,a.fA)(s,l)),(0,r.lw)(this.transforms.displayViewScreenMat3,e.displayViewMat3,t)}setSamplingProfile(e){this._texture&&(e.mips&&!this._texture.descriptor.hasMipmap&&this._texture.generateMipmap(),this._texture.setSamplingMode(e.samplingMode))}bind(e,t){this._texture&&e.bindTexture(this._texture,t)}async updateTexture({context:e,painter:t}){if(!this._textureInvalidated)return;if(this._textureInvalidated=!1,this._texture||(this._texture=this._createTexture(e)),!this.source)return void this._texture.setData(null);this._texture.resize(this._sourceWidth,this._sourceHeight);const n=function(e){return d(e)?e instanceof l.A?e.getRenderedRasterPixels()?.renderedRasterPixels:h(e):e}(this.source);try{if(null!=this._uploadStatus){const{controller:e,resolver:i}=this._uploadStatus,r={signal:e.signal},{width:o,height:a}=this,s=this._texture,l=t.textureUploadManager;await l.enqueueTextureUpdate({data:n,texture:s,width:o,height:a},r),i.resolve(),this._uploadStatus=null}else this._texture.setData(n);this.ready()}catch(e){(0,i.jH)(e)}}onDetach(){this.destroy()}_createTransforms(){return{displayViewScreenMat3:(0,o.vt)()}}_createTexture(e){const t=this.immutable,n=new f.R;return n.internalFormat=t?u.H0.RGBA8:u.Ab.RGBA,n.wrapMode=u.pF.CLAMP_TO_EDGE,n.isImmutable=t,n.width=this._sourceWidth,n.height=this._sourceHeight,new c.g(e,n)}}},70016:function(e,t,n){n.d(t,{l:function(){return a}});var i=n(80708),r=n(28230),o=n(57672);class a extends o.A{constructor(){super(...arguments),this._hasCrossfade=!1}get requiresDedicatedFBO(){return super.requiresDedicatedFBO||this._hasCrossfade}beforeRender(e){super.beforeRender(e),this._manageFade()}prepareRenderPasses(e){const t=e.registerRenderPass({name:"bitmap",brushes:[i.d.bitmap],target:()=>this.children,drawPhase:r.S5.MAP});return[...super.prepareRenderPasses(e),t]}_manageFade(){this.children.reduce(((e,t)=>e+(t.inFadeTransition?1:0)),0)>=2?(this.children.forEach((e=>e.blendFunction="additive")),this._hasCrossfade=!0):(this.children.forEach((e=>e.blendFunction="standard")),this._hasCrossfade=!1)}}},7965:function(e,t,n){n.d(t,{m:function(){return l}});var i=n(44567),r=n(87085),o=n(25090),a=n(36729),s=n(77515);class l extends s.q{constructor(){super(...arguments),this._childrenSet=new Set,this._needsSort=!1,this._children=[],this._childrenObservable=new r.I,this._effectView=null,this._highlightGradient=null}get blendMode(){return this._blendMode}set blendMode(e){this._blendMode=e,this.requestRender()}get children(){return(0,i.gc)(this._childrenObservable),this._children}get clips(){return this._clips}set clips(e){this._clips=e,this.children.forEach((t=>t.clips=e))}get computedEffects(){return this._effectView?.effects??null}get effect(){return this._effectView?.effect??""}set effect(e){(this._effectView||e)&&(this._effectView||(this._effectView=new a.$B,this.addTransitionable(this._effectView)),this._effectView.effect=e,this.requestRender())}get highlightGradient(){return this._highlightGradient}set highlightGradient(e){this._highlightGradient=e,this.requestRender()}get hasBlending(){return!!this.blendMode}get hasHighlight(){return this.children.some((e=>e.hasHighlight))}get hasLabels(){return this.children.some((e=>e.hasLabels))}get requiresDedicatedFBO(){return this.children.some((e=>"blendMode"in e&&e.blendMode&&"normal"!==e.blendMode))}get isReady(){return this.children.every((e=>e.isReady))}get sortFunction(){return this._sortFunction}set sortFunction(e){this._sortFunction=e,e&&(this._needsSort=!0)}doRender(e){const t=this.createRenderParams(e),{painter:n}=t;n.beforeRenderLayer(t,this._clips?.length?255:0,this.computedOpacity),this.renderChildren(t),n.afterRenderLayer(t,this.computedOpacity)}addChild(e){return this.addChildAt(e,this.children.length)}addChildAt(e,t=this.children.length){if(!e)return e;if(this.contains(e))return e;this._needsSort=!0;const n=e.parent;return n&&n!==this&&n.removeChild(e),t>=this.children.length?this.children.push(e):this.children.splice(t,0,e),this._childrenSet.add(e),e.parent=this,e.stage=this.stage,this!==this.stage&&(e.clips=this.clips),this.requestRender(),this._childrenObservable.notify(),e}contains(e){return(0,i.gc)(this._childrenObservable),this._childrenSet.has(e)}removeAllChildren(){this._childrenSet.clear(),this._needsSort=!0;for(const e of this.children)this!==this.stage&&(e.clips=null),e.stage=null,e.parent=null;this.children.length=0,this._childrenObservable.notify()}removeChild(e){return this.contains(e)?this.removeChildAt(this.children.indexOf(e)):e}removeChildAt(e){if(e<0||e>=this.children.length)return null;this._needsSort=!0;const t=this.children.splice(e,1)[0];return this._childrenSet.delete(t),this!==this.stage&&(t.clips=null),t.stage=null,t.parent=null,this._childrenObservable.notify(),t}beforeRender(e){super.beforeRender(e),this.sortFunction&&this._needsSort&&(this.children.sort(this.sortFunction),this._needsSort=!1,this._childrenObservable.notify());for(const t of this.children)t.beforeRender(e)}afterRender(e){super.afterRender(e);for(const t of this.children)t.afterRender(e)}_createTransforms(){return{displayViewScreenMat3:(0,o.vt)()}}onAttach(){super.onAttach();const e=this.stage;for(const t of this.children)t.stage=e}onDetach(){super.onDetach();for(const e of this.children)e.stage=null}renderChildren(e){for(const t of this.children)t.processRender(e)}createRenderParams(e){return{...e,requireFBO:this.requiresDedicatedFBO,blendMode:this.blendMode,effects:this.computedEffects,globalOpacity:e.globalOpacity*this.computedOpacity,inFadeTransition:this.inFadeTransition,highlightGradient:this._highlightGradient||e.highlightGradient}}isTransitioning(){return super.isTransitioning()||this.children.some((e=>e.transitioning))}}},77515:function(e,t,n){n.d(t,{q:function(){return a}});var i=n(50659),r=n(48996),o=n(86668);class a extends r.A{constructor(){super(...arguments),this._transitionables=null,this._clips=null,this._fadeTransition=null,this._isReady=!1,this._opacity=1,this.parent=null,this._stage=null,this._visible=!0}get computedOpacity(){return this._fadeTransition?.computedOpacity??this.opacity}get clips(){return this._clips}set clips(e){this._clips=e,this.requestRender()}get fadeTransitionEnabled(){return null!==this._fadeTransition}set fadeTransitionEnabled(e){!this._fadeTransition&&e?(this._fadeTransition=new o.A({opacity:this.opacity,visible:this.visible}),this.addTransitionable(this._fadeTransition)):this._fadeTransition&&!e&&(this.removeTransitionable(this._fadeTransition),this._fadeTransition=null)}get inFadeTransition(){return this._fadeTransition?.transitioning??!1}get isReady(){return this._isReady}get opacity(){return this._opacity}set opacity(e){this._opacity!==e&&(this._opacity=Math.min(1,Math.max(e,0)),this._fadeTransition&&(this._fadeTransition.opacity=this._opacity),this.requestRender())}get stage(){return this._stage}set stage(e){if(this._stage===e)return;const t=this._stage;this._stage=e,e?this._stage?.untrashDisplayObject(this)||(this.onAttach(),this.emit("attach")):t?.trashDisplayObject(this)}get transforms(){return null==this._transforms&&(this._transforms=this._createTransforms()),this._transforms}get transitioning(){return this.isTransitioning()}get visible(){return this._visible}set visible(e){this._visible!==e&&(this._visible=e,this._fadeTransition&&(this._fadeTransition.visible=this._visible),this.requestRender())}get hasLabels(){return!1}get hasHighlight(){return!1}get hasBlending(){return!1}addTransitionable(e){this._transitionables??=[],this._transitionables.push(e),this.requestRender()}removeTransitionable(e){e.endTransition(),this._transitionables&&(0,i.TF)(this._transitionables,e),this.requestRender()}fadeIn(){this.fadeTransitionEnabled=!0;const e=this._fadeTransition.fadeIn();return this.opacity=1,this.requestRender(),e}fadeOut(){this.fadeTransitionEnabled=!0;const e=this._fadeTransition.fadeOut();return this.opacity=0,this.requestRender(),e}endTransitions(){if(this._transitionables){for(const e of this._transitionables)e.endTransition();this.requestRender()}}beforeRender(e){this.transitionStep(e.deltaTime,e.state.scale),this.setTransform(e.state)}afterRender(e){this.transitioning&&this.requestRender()}remove(){this.parent?.removeChild(this)}setTransform(e){}processRender(e){this.stage&&(this._fadeTransition?.computedVisible??this.visible)&&this.doRender(e)}requestRender(){this.stage&&this.stage.requestRender()}processDetach(){this.endTransitions(),this.onDetach(),this.emit("detach")}isTransitioning(){return this._transitionables?.some((e=>e.transitioning))??!1}transitionStep(e,t){if(this._transitionables)for(const n of this._transitionables)n.transitionStep(e,t)}onAttach(){}onDetach(){}doRender(e){}ready(){this._isReady||(this._isReady=!0,this.emit("isReady"),this.requestRender())}}},83556:function(e,t,n){n.d(t,{A:function(){return i}});class i{constructor(e,t,n){this.pixelBlock=e,this.extent=t,this.originalPixelBlock=n}get width(){return null!=this.pixelBlock?this.pixelBlock.width:0}get height(){return null!=this.pixelBlock?this.pixelBlock.height:0}render(e){const t=this.pixelBlock;if(null==t)return;const n=this.filter({extent:this.extent,pixelBlock:this.originalPixelBlock??t});if(null==n.pixelBlock)return;n.pixelBlock.maskIsAlpha&&(n.pixelBlock.premultiplyAlpha=!0);const i=n.pixelBlock.getAsRGBA(),r=e.createImageData(n.pixelBlock.width,n.pixelBlock.height);r.data.set(i),e.putImageData(r,0,0)}getRenderedRasterPixels(){const e=this.filter({extent:this.extent,pixelBlock:this.pixelBlock});return null==e.pixelBlock?null:(e.pixelBlock.maskIsAlpha&&(e.pixelBlock.premultiplyAlpha=!0),{width:e.pixelBlock.width,height:e.pixelBlock.height,renderedRasterPixels:new Uint8Array(e.pixelBlock.getAsRGBA().buffer)})}}},80708:function(e,t,n){n.d(t,{d:function(){return M}});var i=n(73936),r=n(43745),o=n(88413),a=n(52937),s=n(94020),l=n(85456),u=n(10904);class c extends a.A{constructor(){super(...arguments),this._color=(0,r.fA)(0,1,0,1)}dispose(){this._program&&this._program.dispose()}prepareState({context:e}){e.setStencilTestEnabled(!0),e.setBlendingEnabled(!1),e.setFaceCullingEnabled(!1),e.setColorMask(!1,!1,!1,!1),e.setStencilOp(l.eA.KEEP,l.eA.KEEP,l.eA.REPLACE),e.setStencilWriteMask(255),e.setStencilFunction(l.MT.ALWAYS,0,255)}draw(e,t){const{context:n,state:i,requestRender:r,allowDelayedRender:a}=e,c=(0,o.ES)("clip",{geometry:[{location:0,name:"a_pos",count:2,type:l.pe.SHORT}]}),f=t.getVAO(n,i,c.attributes,c.bufferLayouts);null!=f.indexBuffer&&(this._program||(this._program=(0,u.r)(n,s.T)),!a||null==r||this._program.compiled?(n.useProgram(this._program),this._program.setUniform2fv("u_coord_range",[1,1]),this._program.setUniform4fv("u_color",this._color),this._program.setUniformMatrix3fv("u_dvsMat3",i.displayMat3),n.bindVAO(f),n.drawElements(l.WR.TRIANGLES,f.indexBuffer.size,l.pe.UNSIGNED_INT,0),n.bindVAO()):r())}}var f=n(829),d=n(55382),h=n(15774),_=n(25090),p=n(39686),m=n(86305),g=n(81438);class v extends a.A{constructor(){super(...arguments),this._color=(0,r.fA)(1,0,0,1),this._patternMatrix=(0,_.vt)(),this._programOptions={id:!1,pattern:!1}}dispose(){this._vao&&(this._vao.dispose(),this._vao=null)}drawMany(e,t){const{context:n,painter:i,requestRender:r,allowDelayedRender:o}=e;this._loadWGLResources(e);const a=e.displayLevel,s=e.styleLayer,u=s.backgroundMaterial,c=i.vectorTilesMaterialManager,f=s.getPaintValue("background-color",a),d=s.getPaintValue("background-opacity",a),_=s.getPaintValue("background-pattern",a),m=void 0!==_,g=1|window.devicePixelRatio,v=e.spriteMosaic;let x,y;const S=g>p.C_?2:1,T=this._programOptions;T.pattern=m;const b=c.getMaterialProgram(n,u,T);if(!o||null==r||b.compiled){if(n.bindVAO(this._vao),n.useProgram(b),m){const e=v.getMosaicItemPosition(_,!0);if(null!=e){const{tl:t,br:i,page:r}=e;x=i[0]-t[0],y=i[1]-t[1];const o=v.getPageSize(r);null!=o&&(v.bind(n,l.Cj.LINEAR,r,p.$U),b.setUniform4f("u_tlbr",t[0],t[1],i[0],i[1]),b.setUniform2fv("u_mosaicSize",o),b.setUniform1i("u_texture",p.$U))}b.setUniform1f("u_opacity",d)}else{const e=f[3]*d;this._color[0]=e*f[0],this._color[1]=e*f[1],this._color[2]=e*f[2],this._color[3]=e,b.setUniform4fv("u_color",this._color)}b.setUniform1f("u_depth",s.z||0);for(const e of t){if(b.setUniform1f("u_coord_range",e.rangeX),b.setUniformMatrix3fv("u_dvsMat3",e.transforms.displayViewScreenMat3),m){const t=Math.max(2**(Math.round(a)-e.key.level),1),n=S*e.width*t,i=n/(0,h.yR)(x),r=n/(0,h.yR)(y);this._patternMatrix[0]=i,this._patternMatrix[4]=r,b.setUniformMatrix3fv("u_pattern_matrix",this._patternMatrix)}n.setStencilFunction(l.MT.EQUAL,0,255),n.drawArrays(l.WR.TRIANGLE_STRIP,0,4)}}else r()}_loadWGLResources(e){if(this._vao)return;const{context:t,styleLayer:n}=e,i=n.backgroundMaterial,r=new Int8Array([0,0,1,0,0,1,1,1]),o=m.g.createVertex(t,l._U.STATIC_DRAW,r),a=new g.Z(t,i.getAttributeLocations(),i.getLayoutInfo(),new Map([["geometry",o]]));this._vao=a}}var x=n(5367);class y extends a.A{constructor(){super(...arguments),this._programOptions={id:!1}}dispose(){}drawMany(e,t){const{context:n,displayLevel:i,requiredLevel:r,state:o,painter:a,spriteMosaic:s,styleLayerUID:u,requestRender:c,allowDelayedRender:f}=e;if(!t.some((e=>e.layerData.get(u)?.circleIndexCount??!1)))return;const d=e.styleLayer,h=d.circleMaterial,_=a.vectorTilesMaterialManager,p=d.getPaintValue("circle-translate",i),m=d.getPaintValue("circle-translate-anchor",i),g=this._programOptions,v=_.getMaterialProgram(n,h,g);if(f&&null!=c&&!v.compiled)return void c();n.useProgram(v),v.setUniformMatrix3fv("u_displayMat3",m===x.Cq.VIEWPORT?o.displayMat3:o.displayViewMat3),v.setUniform2fv("u_circleTranslation",p),v.setUniform1f("u_depth",d.z),v.setUniform1f("u_antialiasingWidth",1.2);let y=-1;for(const e of t){if(!e.layerData.has(u))continue;e.key.level!==y&&(y=e.key.level,h.setDataUniforms(v,i,d,y,s));const t=e.layerData.get(u);if(!t.circleIndexCount)continue;t.prepareForRendering(n);const o=t.vao;null!=o&&(n.bindVAO(o),v.setUniformMatrix3fv("u_dvsMat3",e.transforms.displayViewScreenMat3),r!==e.key.level?n.setStencilFunction(l.MT.EQUAL,e.stencilRef,255):n.setStencilFunction(l.MT.GREATER,255,255),n.drawElements(l.WR.TRIANGLES,t.circleIndexCount,l.pe.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*t.circleIndexStart),e.triangleCount+=t.circleIndexCount/3)}}}const S=1/65536;class T extends a.A{constructor(){super(...arguments),this._fillProgramOptions={id:!1,pattern:!1},this._outlineProgramOptions={id:!1}}dispose(){}drawMany(e,t){const{displayLevel:n,renderPass:i,spriteMosaic:r,styleLayerUID:o}=e;let a=!1;for(const e of t)if(e.layerData.has(o)){const t=e.layerData.get(o);if(t.fillIndexCount>0||t.outlineIndexCount>0){a=!0;break}}if(!a)return;const s=e.styleLayer,l=s.getPaintProperty("fill-pattern"),u=void 0!==l,c=u&&l.isDataDriven;let f;if(u&&!c){const e=l.getValue(n);f=r.getMosaicItemPosition(e,!0)}const d=!u&&s.getPaintValue("fill-antialias",n);let h=!0,_=1;if(!u){const e=s.getPaintProperty("fill-color"),t=s.getPaintProperty("fill-opacity");if(!e?.isDataDriven&&!t?.isDataDriven){const e=s.getPaintValue("fill-color",n);_=s.getPaintValue("fill-opacity",n)*e[3],_>=1&&(h=!1)}}if(h&&"opaque"===i)return;const p=s.getPaintValue("fill-translate",n),m=s.getPaintValue("fill-translate-anchor",n);(h||"translucent"!==i)&&this._drawFill(e,o,s,t,p,m,u,f,c);const g=!s.hasDataDrivenOutlineColor&&s.outlineUsesFillColor&&_<1;d&&"opaque"!==i&&!g&&this._drawOutline(e,o,s,t,p,m)}_drawFill(e,t,n,i,r,o,a,s,u){if(a&&!u&&null==s)return;const{context:c,displayLevel:f,state:d,painter:h,pixelRatio:_,spriteMosaic:m,requestRender:g,allowDelayedRender:v}=e,y=n.fillMaterial,T=h.vectorTilesMaterialManager,b=_>p.C_?2:1,E=this._fillProgramOptions;E.pattern=a;const A=T.getMaterialProgram(c,y,E);if(v&&null!=g&&!A.compiled)return void g();if(c.useProgram(A),null!=s){const{page:e}=s,t=m.getPageSize(e);null!=t&&(m.bind(c,l.Cj.LINEAR,e,p.$U),A.setUniform2fv("u_mosaicSize",t),A.setUniform1i("u_texture",p.$U))}A.setUniformMatrix3fv("u_displayMat3",o===x.Cq.VIEWPORT?d.displayMat3:d.displayViewMat3),A.setUniform2fv("u_fillTranslation",r),A.setUniform1f("u_depth",n.z+S);let I=-1;for(const e of i){if(!e.layerData.has(t))continue;e.key.level!==I&&(I=e.key.level,y.setDataUniforms(A,f,n,I,m));const i=e.layerData.get(t);if(!i.fillIndexCount)continue;i.prepareForRendering(c);const r=i.fillVAO;if(null!=r){if(c.bindVAO(r),A.setUniformMatrix3fv("u_dvsMat3",e.transforms.displayViewScreenMat3),c.setStencilFunction(l.MT.EQUAL,e.stencilRef,255),a){const t=Math.max(2**(Math.round(f)-e.key.level),1),n=e.rangeX/(b*e.width*t);A.setUniform1f("u_patternFactor",n)}if(u){const e=i.patternMap;if(!e)continue;for(const[t,n]of e){const e=m.getPageSize(t);null!=e&&(m.bind(c,l.Cj.LINEAR,t,p.$U),A.setUniform2fv("u_mosaicSize",e),A.setUniform1i("u_texture",p.$U),c.drawElements(l.WR.TRIANGLES,n[1],l.pe.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*n[0]))}}else c.drawElements(l.WR.TRIANGLES,i.fillIndexCount,l.pe.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*i.fillIndexStart);e.triangleCount+=i.fillIndexCount/3}}}_drawOutline(e,t,n,i,r,o){const{context:a,displayLevel:s,state:u,painter:c,pixelRatio:f,spriteMosaic:d,requestRender:h,allowDelayedRender:_}=e,p=n.outlineMaterial,m=c.vectorTilesMaterialManager,g=.75/f,v=this._outlineProgramOptions,y=m.getMaterialProgram(a,p,v);if(_&&null!=h&&!y.compiled)return void h();a.useProgram(y),y.setUniformMatrix3fv("u_displayMat3",o===x.Cq.VIEWPORT?u.displayMat3:u.displayViewMat3),y.setUniform2fv("u_fillTranslation",r),y.setUniform1f("u_depth",n.z+S),y.setUniform1f("u_outline_width",g);let T=-1;for(const e of i){if(!e.layerData.has(t))continue;e.key.level!==T&&(T=e.key.level,p.setDataUniforms(y,s,n,T,d));const i=e.layerData.get(t);if(i.prepareForRendering(a),!i.outlineIndexCount)continue;const r=i.outlineVAO;null!=r&&(a.bindVAO(r),y.setUniformMatrix3fv("u_dvsMat3",e.transforms.displayViewScreenMat3),a.setStencilFunction(l.MT.EQUAL,e.stencilRef,255),a.drawElements(l.WR.TRIANGLES,i.outlineIndexCount,l.pe.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*i.outlineIndexStart),e.triangleCount+=i.outlineIndexCount/3)}}}class b extends a.A{constructor(){super(...arguments),this._programOptions={id:!1,pattern:!1,sdf:!1}}dispose(){}drawMany(e,t){const{context:n,displayLevel:i,state:r,painter:o,pixelRatio:a,spriteMosaic:s,styleLayerUID:u,requestRender:c,allowDelayedRender:f}=e;if(!t.some((e=>e.layerData.get(u)?.lineIndexCount??!1)))return;const d=e.styleLayer,h=d.lineMaterial,_=o.vectorTilesMaterialManager,m=d.getPaintValue("line-translate",i),g=d.getPaintValue("line-translate-anchor",i),v=d.getPaintProperty("line-pattern"),y=void 0!==v,S=y&&v.isDataDriven;let T,b;if(y&&!S){const e=v.getValue(i);T=s.getMosaicItemPosition(e)}let E=!1;if(!y){const e=d.getPaintProperty("line-dasharray");if(b=void 0!==e,E=b&&e.isDataDriven,b&&!E){const t=e.getValue(i),n=d.getDashKey(t,d.getLayoutValue("line-cap",i));T=s.getMosaicItemPosition(n)}}const A=1/a,I=this._programOptions;I.pattern=y,I.sdf=b;const O=_.getMaterialProgram(n,h,I);if(f&&null!=c&&!O.compiled)return void c();if(n.useProgram(O),O.setUniformMatrix3fv("u_displayViewMat3",r.displayViewMat3),O.setUniformMatrix3fv("u_displayMat3",g===x.Cq.VIEWPORT?r.displayMat3:r.displayViewMat3),O.setUniform2fv("u_lineTranslation",m),O.setUniform1f("u_depth",d.z),O.setUniform1f("u_antialiasing",A),T&&null!=T){const{page:e}=T,t=s.getPageSize(e);null!=t&&(s.bind(n,l.Cj.LINEAR,e,p.$U),O.setUniform2fv("u_mosaicSize",t),O.setUniform1i("u_texture",p.$U))}let R=-1;for(const e of t){if(!e.layerData.has(u))continue;e.key.level!==R&&(R=e.key.level,h.setDataUniforms(O,i,d,R,s));const t=2**(i-R)/a;O.setUniform1f("u_zoomFactor",t);const r=e.layerData.get(u);if(!r.lineIndexCount)continue;r.prepareForRendering(n);const o=r.vao;if(null!=o){if(n.bindVAO(o),O.setUniformMatrix3fv("u_dvsMat3",e.transforms.displayViewScreenMat3),n.setStencilFunction(l.MT.EQUAL,e.stencilRef,255),S||E){const e=r.patternMap;if(!e)continue;for(const[t,i]of e){const e=s.getPageSize(t);null!=e&&(s.bind(n,l.Cj.LINEAR,t,p.$U),O.setUniform2fv("u_mosaicSize",e),O.setUniform1i("u_texture",p.$U),n.drawElements(l.WR.TRIANGLES,i[1],l.pe.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*i[0]))}}else n.drawElements(l.WR.TRIANGLES,r.lineIndexCount,l.pe.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*r.lineIndexStart);e.triangleCount+=r.lineIndexCount/3}}}}var E=n(14583),A=n(92422),I=n(36753);const O=1/65536;class R extends a.A{constructor(){super(...arguments),this._iconProgramOptions={id:!1,sdf:!1},this._sdfProgramOptions={id:!1},this._spritesTextureSize=(0,E.vt)()}dispose(){}drawMany(e,t){const n=e.styleLayer;this._drawIcons(e,n,t),this._drawText(e,n,t)}_drawIcons(e,t,n){const{context:i,displayLevel:r,painter:o,spriteMosaic:a,state:s,styleLayerUID:l,requestRender:u,allowDelayedRender:c}=e,f=t.iconMaterial,d=o.vectorTilesMaterialManager;let h,_=!1;for(const e of n)if(e.layerData.has(l)&&(h=e.layerData.get(l),h.iconPerPageElementsMap.size>0)){_=!0;break}if(!_)return;const m=t.getPaintValue("icon-translate",r),g=t.getPaintValue("icon-translate-anchor",r);let v=t.getLayoutValue("icon-rotation-alignment",r);v===x.I5.AUTO&&(v=t.getLayoutValue("symbol-placement",r)===x.kt.POINT?x.I5.VIEWPORT:x.I5.MAP);const y=v===x.I5.MAP,S=t.getLayoutValue("icon-keep-upright",r)&&y,T=h.isIconSDF,b=this._iconProgramOptions;b.sdf=T;const E=d.getMaterialProgram(i,f,b);if(c&&null!=u&&!E.compiled)return void u();i.useProgram(E),E.setUniformMatrix3fv("u_displayViewMat3",v===x.I5.MAP?s.displayViewMat3:s.displayMat3),E.setUniformMatrix3fv("u_displayMat3",g===x.Cq.VIEWPORT?s.displayMat3:s.displayViewMat3),E.setUniform2fv("u_iconTranslation",m),E.setUniform1f("u_depth",t.z),E.setUniform1f("u_mapRotation",(0,I.wV)(s.rotation)),E.setUniform1f("u_keepUpright",S?1:0),E.setUniform1f("u_level",10*r),E.setUniform1i("u_texture",p.$U),E.setUniform1f("u_fadeDuration",A.zk/1e3);let O=-1;for(const o of n){if(!o.layerData.has(l))continue;if(o.key.level!==O&&(O=o.key.level,f.setDataUniforms(E,r,t,O,a)),h=o.layerData.get(l),0===h.iconPerPageElementsMap.size)continue;h.prepareForRendering(i),h.updateOpacityInfo();const n=h.iconVAO;if(null!=n){i.bindVAO(n),E.setUniformMatrix3fv("u_dvsMat3",o.transforms.displayViewScreenMat3),E.setUniform1f("u_time",(performance.now()-h.lastOpacityUpdate)/1e3);for(const[t,n]of h.iconPerPageElementsMap)this._renderIconRange(e,E,n,t,o)}}}_renderIconRange(e,t,n,i,r){const{context:o,spriteMosaic:a}=e;this._spritesTextureSize[0]=a.getWidth(i)/4,this._spritesTextureSize[1]=a.getHeight(i)/4,t.setUniform2fv("u_mosaicSize",this._spritesTextureSize),a.bind(o,l.Cj.LINEAR,i,p.$U),this._setStencilState(e,r),o.drawElements(l.WR.TRIANGLES,n[1],l.pe.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*n[0]),r.triangleCount+=n[1]/3}_drawText(e,t,n){const{context:i,displayLevel:r,glyphMosaic:o,painter:a,pixelRatio:s,spriteMosaic:l,state:u,styleLayerUID:c,requestRender:f,allowDelayedRender:d}=e,h=t.textMaterial,_=a.vectorTilesMaterialManager;let m,g=!1;for(const e of n)if(e.layerData.has(c)&&(m=e.layerData.get(c),m.glyphPerPageElementsMap.size>0)){g=!0;break}if(!g)return;const v=t.getPaintProperty("text-opacity");if(v&&!v.isDataDriven&&0===v.getValue(r))return;const y=t.getPaintProperty("text-color"),S=!y||y.isDataDriven||y.getValue(r)[3]>0,T=t.getPaintProperty("text-halo-width"),b=t.getPaintProperty("text-halo-color"),R=(!T||T.isDataDriven||T.getValue(r)>0)&&(!b||b.isDataDriven||b.getValue(r)[3]>0);if(!S&&!R)return;let M=t.getLayoutValue("text-rotation-alignment",r);M===x.I5.AUTO&&(M=t.getLayoutValue("symbol-placement",r)===x.kt.POINT?x.I5.VIEWPORT:x.I5.MAP);const C=M===x.I5.MAP,P=t.getLayoutValue("text-keep-upright",r)&&C,w=.8*3/s;this._glyphTextureSize||(this._glyphTextureSize=(0,E.fA)(o.width/4,o.height/4));const D=t.getPaintValue("text-translate",r),N=t.getPaintValue("text-translate-anchor",r),L=this._sdfProgramOptions,F=_.getMaterialProgram(i,h,L);if(d&&null!=f&&!F.compiled)return void f();i.useProgram(F),F.setUniformMatrix3fv("u_displayViewMat3",M===x.I5.MAP?u.displayViewMat3:u.displayMat3),F.setUniformMatrix3fv("u_displayMat3",N===x.Cq.VIEWPORT?u.displayMat3:u.displayViewMat3),F.setUniform2fv("u_textTranslation",D),F.setUniform1f("u_depth",t.z+O),F.setUniform2fv("u_mosaicSize",this._glyphTextureSize),F.setUniform1f("u_mapRotation",(0,I.wV)(u.rotation)),F.setUniform1f("u_keepUpright",P?1:0),F.setUniform1f("u_level",10*r),F.setUniform1i("u_texture",p.mg),F.setUniform1f("u_antialiasingWidth",w),F.setUniform1f("u_fadeDuration",A.zk/1e3);let z=-1;for(const a of n){if(!a.layerData.has(c))continue;if(a.key.level!==z&&(z=a.key.level,h.setDataUniforms(F,r,t,z,l)),m=a.layerData.get(c),0===m.glyphPerPageElementsMap.size)continue;m.prepareForRendering(i),m.updateOpacityInfo();const n=m.textVAO;if(null==n)continue;i.bindVAO(n),F.setUniformMatrix3fv("u_dvsMat3",a.transforms.displayViewScreenMat3),this._setStencilState(e,a);const s=(performance.now()-m.lastOpacityUpdate)/1e3;F.setUniform1f("u_time",s),m.glyphPerPageElementsMap.forEach(((e,t)=>{this._renderGlyphRange(i,e,t,o,F,R,S,a)}))}}_renderGlyphRange(e,t,n,i,r,o,a,s){i.bind(e,l.Cj.LINEAR,n,p.mg),o&&(r.setUniform1f("u_halo",1),e.drawElements(l.WR.TRIANGLES,t[1],l.pe.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*t[0]),s.triangleCount+=t[1]/3),a&&(r.setUniform1f("u_halo",0),e.drawElements(l.WR.TRIANGLES,t[1],l.pe.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*t[0]),s.triangleCount+=t[1]/3)}_setStencilState(e,t){const{context:n,is3D:i,stencilSymbols:r}=e;if(n.setStencilTestEnabled(!0),r)return n.setStencilWriteMask(255),void n.setStencilFunction(l.MT.ALWAYS,t.stencilRef,255);n.setStencilWriteMask(0),i?n.setStencilFunction(l.MT.EQUAL,t.stencilRef,255):n.setStencilFunction(l.MT.GREATER,255,255)}}const M={clip:c,stencil:f.A,bitmap:i.A,tileDebugInfo:d.A,vtlBackground:v,vtlFill:T,vtlLine:b,vtlCircle:y,vtlSymbol:R}},86668:function(e,t,n){n.d(t,{A:function(){return u}});var i=n(53804),r=n(83525),o=n(58941),a=n(60539),s=n(23502),l=(n(40633),n(13798),n(65953));let u=class extends r.A{constructor(e){super(e),this.computedOpacity=1,this.computedVisible=!0,this.opacity=1,this.visible=!0,this._fadeOutResolver=null,this._fadeInResolver=null}get transitioning(){return(this._fadeOutResolver||!this.visible?0:this.opacity)!==this.computedOpacity}endTransition(){this._fadeInResolver?.(),this._fadeOutResolver?.(),this._fadeInResolver=this._fadeOutResolver=null,this.computedOpacity=this.visible?this.opacity:0}fadeIn(){return this._fadeInResolver||(this.opacity=1,this.computedOpacity=0,this._fadeOutResolver?.(),this._fadeOutResolver=null,this._fadeInResolver=(0,a.Tw)()),this._fadeInResolver.promise}fadeOut(){return this._fadeOutResolver||(this.opacity=0,this._fadeInResolver?.(),this._fadeInResolver=null,this._fadeOutResolver=(0,a.Tw)()),this._fadeOutResolver.promise}transitionStep(e,t){const n=(0,o.A)("mapview-transitions-duration"),i=n?1/n:0;if(0===i)this.computedOpacity=this.opacity,this.computedVisible=this.visible;else{const t=this._fadeOutResolver||!this.visible?0:this.opacity,n=this.computedOpacity;if(n===t)this.computedVisible=this.visible;else{const r=e*i;this.computedOpacity=n>t?Math.max(t,n-r):Math.min(t,n+r),this.computedVisible=this.computedOpacity>0}}this.transitioning||(this._fadeInResolver?.(),this._fadeOutResolver?.(),this._fadeOutResolver=this._fadeInResolver=null)}};(0,i._)([(0,s.MZ)()],u.prototype,"computedOpacity",void 0),(0,i._)([(0,s.MZ)()],u.prototype,"computedVisible",void 0),(0,i._)([(0,s.MZ)()],u.prototype,"opacity",void 0),(0,i._)([(0,s.MZ)()],u.prototype,"visible",void 0),(0,i._)([(0,s.MZ)()],u.prototype,"transitioning",null),(0,i._)([(0,s.MZ)()],u.prototype,"_fadeOutResolver",void 0),(0,i._)([(0,s.MZ)()],u.prototype,"_fadeInResolver",void 0),u=(0,i._)([(0,l.$)("esri.views.2d.engine.transitions.FadeTransition")],u)},92422:function(e,t,n){n.d(t,{IT:function(){return i},av:function(){return o},o2:function(){return r},zk:function(){return a}});const i=!0,r=32,o=1.5,a=200},58013:function(e,t,n){n.d(t,{u:function(){return h}});var i=n(67348),r=n(10793),o=n(44705),a=n(25090),s=n(20551),l=n(43274),u=n(39686),c=n(54631);const f=(0,a.vt)(),d=(0,l.vt)();class h extends c.Y{constructor(e,t,n,i){super(e,t,n,i,u.CQ,u.CQ)}destroy(){super.destroy()}setTransform(e){const t=this.resolution/e.resolution,n=this.transforms.tileMat3,[a,s]=e.toScreenNoRotation([0,0],[this.x,this.y]),l=this.width/this.rangeX*t,u=this.height/this.rangeY*t;(0,o.hZ)(n,l,0,0,0,u,0,a,s,1),(0,o.lw)(this.transforms.displayViewScreenMat3,e.displayViewMat3,n);const c=(0,i.hZ)((0,r.vt)(),l,0,0,u,a,s);(0,i.lw)(this.transforms.labelMat2d,e.viewMat2d,c)}_createTransforms(){return{labelMat2d:(0,r.vt)(),tileMat3:(0,a.vt)(),displayViewScreenMat3:(0,a.vt)()}}containsScreenPoint(e,t,n){const i=(0,o.lw)(f,e.viewMat3,this.transforms.tileMat3),r=(0,o.B8)(f,i);if(null==r)return!0;(0,s.i)(d,...t,1);const a=(0,s.q)(d,d,r),l=n*(this.resolution/e.resolution);return a[0]>=-l&&a[0]<this.width+l&&a[1]>=-l&&a[1]<this.height+l}}},94860:function(e,t,n){n.d(t,{Pd:function(){return o},VS:function(){return s},oI:function(){return a}});var i=n(85456),r=n(3817);const o=new Map([["geometry",[new r._("a_pos",2,i.pe.BYTE,0,2)]]]),a=new Map([["geometry",[new r._("a_pos",2,i.pe.BYTE,0,4),new r._("a_tex",2,i.pe.BYTE,2,4)]]]),s=new Map([["geometry",[new r._("a_pos",2,i.pe.UNSIGNED_SHORT,0,4)]]])},46065:function(e,t,n){n.d(t,{A:function(){return o}});var i=n(88231),r=n(24964);class o{constructor(e,t){this.id=e,this.sortKey=t,this.records=[]}serialize(e){return e.push(this.id),e.writeF32(this.sortKey),(0,r.j)(e,this.records),e}static deserialize(e){const t=e.readInt32(),n=e.readF32(),a=new o(t,n);return a.records=(0,r._)(e,i.A)??[],a}}o.byteSizeHint=2*Uint32Array.BYTES_PER_ELEMENT+i.A.byteSizeHint},88231:function(e,t,n){n.d(t,{A:function(){return i}});class i{constructor(e,t,n,i,r,o,a){this.instanceId=e,this.textureKey=t,this.indexStart=n,this.indexCount=i,this.vertexStart=r,this.vertexCount=o,this.overlaps=a}updateBaseOffsets(e){this.vertexStart+=e.vertexFrom,this.indexStart+=e.indexFrom}clone(){return new i(this.instanceId,this.textureKey,this.indexStart,this.indexCount,this.vertexStart,this.vertexCount,this.overlaps)}static write(e,t,n,i,r,o,a,s){e.push(t),e.push(n),e.push(i),e.push(r),e.push(o),e.push(a),e.push(s)}serialize(e){return e.push(this.instanceId),e.push(this.textureKey),e.push(this.indexStart),e.push(this.indexCount),e.push(this.vertexStart),e.push(this.vertexCount),e.push(this.overlaps),e}static deserialize(e){const t=e.readInt32(),n=e.readInt32(),r=e.readInt32(),o=e.readInt32(),a=e.readInt32(),s=e.readInt32(),l=e.readInt32();return new i(t,n,r,o,a,s,l)}}i.byteSizeHint=7*Uint32Array.BYTES_PER_ELEMENT},27657:function(e,t,n){n.d(t,{R:function(){return P}});var i=n(58941),r=n(40633),o=n(10793),a=n(58013),s=n(39686),l=n(46065),u=n(28230),c=n(83258),f=n(86847),d=n(85456);function h(e,t){return e<<16|255&t}class _{constructor(e,t,n,i,r){this.instance=e,this.materialKey=t,this.target=n,this.start=i,this.count=r}get textureKey(){return 255&this.materialKey}get indexEnd(){return this.start+this.count}extend(e){this.count+=e}render(e){this.instance.techniqueRef.render(e,this)}getStencilReference(){return this.target.stencilRef}getAttributePrecisionPackFactors(){const e=this.instance.instanceId;return this.target.getMesh(e).getAttributePrecisionPackFactors()}draw(e,t){(0,f.Eq)(e)?this.drawCompute(e.context,t):this.drawGeometry(e.context,t)}drawCompute(e,t){const n=this.instance.instanceId,i=this.target.getMesh(n).getComputeVAO(e,t),r=this.start*Uint32Array.BYTES_PER_ELEMENT/3;e.bindVAO(i),e.drawElements(d.WR.POINTS,this.count/3,d.pe.UNSIGNED_INT,r),e.bindVAO(null)}drawGeometry(e,t){const n=this.instance.instanceId,i=this.target.getMesh(n).getGeometryVAO(e,t),r=this.start*Uint32Array.BYTES_PER_ELEMENT;e.bindVAO(i),e.drawElements(d.WR.TRIANGLES,this.count,d.pe.UNSIGNED_INT,r),e.bindVAO(null)}}class p{constructor(){this._length=0,this._minOrderedLength=0,this._materialKeys=new Set}static fromDisplayEntities(e,t,n,i){const r=new p;for(const o of e.values())for(const e of o.records){const o=n.getInstance(e.instanceId),a=h(o.instanceId,e.textureKey);r.addRecord(o,a,e.indexStart,e.indexCount,e.vertexStart,e.vertexCount,t,i)}return r}get length(){return this._length}get minOrderedLength(){return this._minOrderedLength}get minUnorderedLength(){return this._materialKeys.size}render(e,t){const{drawPhase:n}=e;for(const i of this.infos()){const r=i.instance.techniqueRef;r.drawPhase&n&&(null==t||r.type===t)&&i.render(e)}}addRecord(e,t,n,i,r,o,a,s){let l=n,f=i;if(f||(l=r,f=o),!f)return;if(null==this._head){const n=new _(e,t,a,l,f);return this._head=new c.B(n),this._tail=this._head,this._length++,void this._minOrderedLength++}if(s===u.ch.STRICT_ORDER)return this._insert(e,t,a,l,f,this._tail,null);let d=null,h=this._head;const p=e.instanceId,m=e.techniqueRef.symbologyPlane;if(s===u.ch.STRICT_MARKERS_AND_TEXT&&(m===u.uC.MARKER||m===u.uC.TEXT))return this._insert(e,t,a,l,f,this._tail,null);for(;h;){const n=h.data.instance,i=n.instanceId,r=n.techniqueRef.symbologyPlane,o=d?.data.instance.instanceId;if(m<r||p===o&&p!==i)return this._insert(e,t,a,l,f,d,h);d=h,h=h.next}this._insert(e,t,a,l,f,d,null)}*infos(){if(null!=this._head)for(const e of this._head.values())yield e}_insert(e,t,n,i,r,o,a){if(null==o&&null==a){const o=new _(e,t,n,i,r);return this._head=new c.B(o),this._tail=this._head,this._length++,void this._minOrderedLength++}return t!==this._tail.data.materialKey&&this._minOrderedLength++,this._materialKeys.add(t),null==o&&null!=a?this._insertAtHead(e,t,n,i,r,a):null!=o&&null==a?this._insertAtEnd(e,t,n,i,r,o):null!=o&&null!=a?this._insertAtMiddle(e,t,n,i,r,o,a):void 0}_insertAtHead(e,t,n,i,r,o){const a=i+r;if(t===o.data.materialKey&&n===o.data.target&&a===o.data.start)o.data.start=i,o.data.count+=r;else{const a=new _(e,t,n,i,r);this._head=new c.B(a),this._head.next=o,this._length++}}_insertAtEnd(e,t,n,i,r,o){if(o.data.materialKey===t&&o.data.indexEnd===i)o.data.count+=r;else{const a=new _(e,t,n,i,r);this._tail=new c.B(a),o.next=this._tail,this._length++}}_insertAtMiddle(e,t,n,i,r,o,a){const s=i+r;if(o.data.materialKey===t&&o.data.target===n&&o.data.indexEnd===i)o.data.count+=r,o.data.materialKey===a.data.materialKey&&o.data.target===a.data.target&&o.data.indexEnd===a.data.start&&(o.data.count+=a.data.count,o.next=a.next,this._length--);else if(t===a.data.materialKey&&n===a.data.target&&s===a.data.start)a.data.start=i,a.data.count+=r;else{const s=new _(e,t,n,i,r),l=new c.B(s);o.next=l,l.next=a,this._length++}}}class m{constructor(e){this._indexOnly=e,this.vertex={count:0,operations:[]},this.index={count:0,operations:[]}}copyRecord(e){let t=0;this._indexOnly||(t=this.vertex.count-e.vertexStart,this.vertex.operations.push({srcFrom:e.vertexStart,dstFrom:this.vertex.count,count:e.vertexCount,mutate:0}),e.vertexStart=this.vertex.count,this.vertex.count+=e.vertexCount);let n=!1;if(this._indexOnly&&this.index.operations.length>=1){const t=this.index.operations[this.index.operations.length-1];t.srcFrom+t.count===e.indexStart&&(t.count+=e.indexCount,n=!0)}n||this.index.operations.push({srcFrom:e.indexStart,dstFrom:this.index.count,count:e.indexCount,mutate:t}),e.indexStart=this.index.count,this.index.count+=e.indexCount}}var g=n(57650),v=n(95929),x=n(85475),y=n(28055),S=n(86305);class T{constructor(e,t,n,i){this._pool=i;const r=y.W.create(t*n*Uint32Array.BYTES_PER_ELEMENT,this._pool);this.size=t,this.strideInt=n,this.bufferType=e,this.dirty={start:1/0,end:0},this.memoryStats={bytesUsed:0,bytesReserved:t*n*Uint32Array.BYTES_PER_ELEMENT},this._gpu=null,this._cpu=r,this.clear()}get elementSize(){return this._cpu.length/this.strideInt}get intSize(){return this.fillPointer*this.strideInt}get byteSize(){return this.intSize*Uint32Array.BYTES_PER_ELEMENT}get invalidated(){return this.bufferSize>0&&!this._gpu}get invalidatedComputeBuffer(){return this.bufferSize>0&&!this._gpuComputeTriangles}invalidate(){this._invalidateTriangleBuffer(),this._gpu?.dispose(),this._gpu=null}_invalidateTriangleBuffer(){this._gpuComputeTriangles?.dispose(),this._gpuComputeTriangles=null}destroy(){this._gpu?.dispose(),this._gpuComputeTriangles?.dispose(),this._cpu?.destroy()}clear(){this.dirty.start=1/0,this.dirty.end=0,this.freeList=new c.P({start:0,end:this._cpu.length/this.strideInt}),this.fillPointer=0}ensure(e){if(!(this.maxAvailableSpace()>=e)&&e*this.strideInt>this._cpu.length-this.fillPointer){this.invalidate();const t=this._cpu.length/this.strideInt,n=Math.round(1.25*(t+e)),i=n*this.strideInt;this._cpu.expand(i*Uint32Array.BYTES_PER_ELEMENT),this.freeList.free(t,n-t),this.memoryStats.bytesReserved+=(n-t)*this.strideInt*Uint32Array.BYTES_PER_ELEMENT}}set(e,t){this._cpu.array[e]!==t&&(this._cpu.array[e]=t,this.dirty.start=Math.min(e,this.dirty.start),this.dirty.end=Math.max(e+1,this.dirty.end))}getGPUBuffer(e,t=!1){if(!this.bufferSize)return null;if(t){if("index"!==this.bufferType)throw new Error("Tired to get triangle buffer, but target is not an index buffer");return null==this._gpuComputeTriangles&&(this._gpuComputeTriangles=this._createComputeBuffer(e)),this._gpuComputeTriangles}return null==this._gpu&&(this._gpu=this._createBuffer(e)),this._gpu}getView(e,t){return this._cpu.getUint32View(e,t/Uint32Array.BYTES_PER_ELEMENT)}get bufferSize(){return this._cpu.length/this.strideInt}maxAvailableSpace(){return this.freeList.maxAvailableSpace()}insert(e,t,n,i){const r=n*this.strideInt;if(!r)return 0;const o=t*this.strideInt*Uint32Array.BYTES_PER_ELEMENT,a=new Uint32Array(e,o,r),s=this.freeList.firstFit(n);(0,v.Lw)(s,"First fit region must be defined");const l=s*this.strideInt,u=r;if(this._cpu.array.set(a,l),0!==i)for(let e=0;e<a.length;e++)this._cpu.array[e+l]+=i;return this.dirty.start=Math.min(this.dirty.start,l),this.dirty.end=Math.max(this.dirty.end,l+u),this.fillPointer=Math.max(this.fillPointer,l+u),this.memoryStats.bytesUsed+=n*this.strideInt*Uint32Array.BYTES_PER_ELEMENT,s}copyFrom(e,t,n,i,r){const o=n*this.strideInt;if(!o)return 0;const a=t*this.strideInt*Uint32Array.BYTES_PER_ELEMENT,s=e._cpu.getUint32View(a,o),l=this.freeList.firstFit(n);(0,v.Lw)(l,"First fit region must be defined");const u=l*this.strideInt,c=o;if(this._cpu.array.set(s,u),0!==i)for(let e=0;e<o;e++)this._cpu.array[u+e*this.strideInt+r]+=i;return this.dirty.start=Math.min(this.dirty.start,u),this.dirty.end=Math.max(this.dirty.end,u+c),this.fillPointer=Math.max(this.fillPointer,u+c),this.memoryStats.bytesUsed+=n*this.strideInt*Uint32Array.BYTES_PER_ELEMENT,l}free(e,t,n){const i=e*this.strideInt,r=(e+t)*this.strideInt;if(!0===n)for(let n=e;n!==e+t;n++)this._cpu.array[n*this.strideInt]=2147450879;this.dirty.start=Math.min(this.dirty.start,i),this.dirty.end=Math.max(this.dirty.end,r),this.freeList.free(e,t),this.memoryStats.bytesUsed-=t*this.strideInt*Uint32Array.BYTES_PER_ELEMENT}upload(){if(this.dirty.end){if(this._invalidateTriangleBuffer(),null==this._gpu)return this.dirty.start=1/0,void(this.dirty.end=0);this._gpu.setSubData(this._cpu.array,this.dirty.start,this.dirty.start,this.dirty.end),this.dirty.start=1/0,this.dirty.end=0}}reshuffle(e,t){if(0===t.length)return;const n=this.byteSize,i=e*this.strideInt*Uint32Array.BYTES_PER_ELEMENT,r=n>i,o=this._cpu,a=y.W.create(i,this._pool);r||a.array.set(this._cpu.getUint32View(0,this.intSize));for(const e of t)if(r||e.srcFrom!==e.dstFrom||0!==e.mutate){this.dirty.start=Math.min(this.dirty.start,e.dstFrom*this.strideInt),this.dirty.end=Math.max(this.dirty.end,(e.dstFrom+e.count)*this.strideInt);for(let t=0;t<e.count;t++){const n=(e.dstFrom+t)*this.strideInt,i=(e.srcFrom+t)*this.strideInt;for(let t=0;t<this.strideInt;t++)a.array[n+t]=o.array[i+t]+e.mutate}}this._cpu.destroy(),this._cpu=a,r&&this.invalidate(),this.freeList.clear(),this.memoryStats.bytesUsed=this.memoryStats.bytesReserved=i}_createBuffer(e){const t=d._U.DYNAMIC_DRAW;return"index"===this.bufferType?S.g.createIndex(e,t,this._cpu.array):S.g.createVertex(e,t,this._cpu.array)}_createComputeBuffer(e){const t=d._U.DYNAMIC_DRAW,n=new Uint32Array(this.fillPointer/3);for(let e=0;e<this.fillPointer;e+=3)n[e/3]=this._cpu.array[e];return S.g.createIndex(e,t,n)}}var b=n(5544),E=n(81438);class A{constructor(e,t){if(this._bufferPool=e,this._layout=t,this._invalidatedGeometry=!1,this._invalidatedCompute=!1,this._position=this._layout.attributes.find((e=>"pos"===e.name||"position"===e.name)),!this._position)throw new Error("InternalError: Unable to find position attribute")}destroy(){this._indexBuffer=(0,v.pR)(this._indexBuffer),this._vertexBuffer=(0,v.pR)(this._vertexBuffer),this._computeVAO?.disposeVAOOnly(),this._geometryVAO?.disposeVAOOnly()}get layout(){return this._layout}getDrawArgs(e,t,n,i){return i?{primitive:d.WR.POINTS,count:t/3,offset:n/3}:{primitive:e,count:t,offset:n}}getAttributePrecisionPackFactors(){const e={};for(const t of this.layout.attributes)t.packPrecisionFactor&&(e[t.name]=t.packPrecisionFactor);return e}getDebugVertexInfo(e=!1,t){if(!this._vertexBuffer)return null;const n=this._layout,i=n.stride,r=this._vertexBuffer.getView(0,this._vertexBuffer.byteSize),o=[];if(e)if(null==t)console.log("must provide location info to see compute attributes");else for(const e of n.attributes){const n=t.computeAttributeMap[e.name];null!=n&&2===n.length&&(o.push({...e,name:n[0],offset:e.offset+i}),o.push({...e,name:n[1],offset:e.offset+2*i}))}const a=new DataView(r.slice().buffer);let s=r.byteLength/i;e&&(s=this._indexBuffer.fillPointer/3);const l=this._indexBuffer.getView(0,this._indexBuffer.byteSize);let u=0;const c=[];for(let t=0;t<s;t++){e&&(u=l[3*t]*i);const r={};for(const e of[...n.attributes,...o]){let t=`${e.offset} ${e.name}`,n=(0,b.q)(a,e,u);if(e.packPrecisionFactor)if(t+=` (precision: ${e.packPrecisionFactor})`,"number"==typeof n)n/=e.packPrecisionFactor;else for(let t=0;t<n.length;t++)n[t]/=e.packPrecisionFactor;r[t]=n}u+=i,c.push(r)}return{vertices:c,layout:n}}_ensure(e,t){if(this._vertexBuffer&&this._indexBuffer)this._indexBuffer.ensure(Math.max(e,1e3)),this._vertexBuffer.ensure(Math.max(t,1e3));else{const n=this._layout.stride/Uint32Array.BYTES_PER_ELEMENT;this._indexBuffer=new T("index",Math.max(e,1e3),1,this._bufferPool),this._vertexBuffer=new T("vertex",Math.max(t,1e3),n,this._bufferPool)}}append(e){const t=e.layout.stride,n=e.indices.byteLength/Uint32Array.BYTES_PER_ELEMENT,i=e.vertices.byteLength/t;this._ensure(n,i);const{vertices:r,indices:o}=e,a=this._vertexBuffer.insert(r,0,r.byteLength/t,0);return{vertexFrom:a,indexFrom:this._indexBuffer.insert(o,0,o.byteLength/4,a)}}copyRecordFrom(e,t,n,i){const{indexStart:r,indexCount:o,vertexStart:a,vertexCount:s}=t;this._ensure(o,s);const l=e._position,u=n*(l.packPrecisionFactor??1),c=i*(l.packPrecisionFactor??1),f=l.offset,d=(0,x.M9)(u,c),h=this._vertexBuffer.copyFrom(e._vertexBuffer,a,s,d,f),_=this._indexBuffer.copyFrom(e._indexBuffer,r,o,h-a,0),p=t.clone();return p.vertexStart=h,p.indexStart=_,p.overlaps=0,p}remove(e,t,n,i){this._indexBuffer.free(e,t),this._vertexBuffer.free(n,i)}upload(){this._invalidatedGeometry=!0,this._invalidatedCompute=!0}getGeometryVAO(e,t){if(!this._vertexBuffer||!this._indexBuffer||!this._vertexBuffer.bufferSize)return null;if(this._invalidatedGeometry){(this._vertexBuffer.invalidated||this._indexBuffer.invalidated)&&(this._vertexBuffer.invalidate(),this._indexBuffer.invalidate(),this._geometryVAO?.disposeVAOOnly(),this._geometryVAO=null),this._vertexBuffer.upload(),this._indexBuffer.upload();const n=this._indexBuffer.getGPUBuffer(e,!1),i=this._vertexBuffer.getGPUBuffer(e);this._geometryVAO||(this._geometryVAO=new E.Z(e,t.locations,function(e,t){const n=e.attributes.filter((e=>t.locations.has(e.name))).map((t=>({name:t.name,type:t.type,count:t.count,divisor:0,normalized:t.normalized??!1,offset:t.offset,stride:e.stride})));return new Map([["geometry",n]])}(this.layout,t),new Map([["geometry",i]]),n)),this._invalidatedGeometry=!1}return this._geometryVAO}getComputeVAO(e,t){if(!this._vertexBuffer||!this._indexBuffer||!this._vertexBuffer.bufferSize)return null;if(this._invalidatedCompute){(this._vertexBuffer.invalidated||this._indexBuffer.invalidatedComputeBuffer)&&(this._vertexBuffer.invalidate(),this._indexBuffer.invalidate(),this._computeVAO?.disposeVAOOnly(),this._computeVAO=null),this._vertexBuffer.upload(),this._indexBuffer.upload();const n=this._indexBuffer.getGPUBuffer(e,!0),i=this._vertexBuffer.getGPUBuffer(e);this._computeVAO||(this._computeVAO=new E.Z(e,t.locations,function(e,t){const n=[],i=e.attributes.filter((e=>t.locations.has(e.name)));for(const r of i){n.push({name:r.name,type:r.type,count:r.count,divisor:0,normalized:r.normalized??!1,offset:r.offset,stride:e.stride});const i=t.computeAttributeMap[r.name];null!=i&&2===i.length&&(n.push({name:i[0],count:r.count,divisor:0,type:r.type,normalized:r.normalized??!1,offset:r.offset+e.stride,stride:e.stride}),n.push({name:i[1],count:r.count,divisor:0,type:r.type,normalized:r.normalized??!1,offset:r.offset+2*e.stride,stride:e.stride}))}return new Map([["geometry",n]])}(this.layout,t),new Map([["geometry",i]]),n),this._invalidatedCompute=!1)}return this._computeVAO}get memoryStats(){return{bytesUsed:this._vertexBuffer.memoryStats.bytesUsed+this._indexBuffer.memoryStats.bytesUsed,bytesReserved:this._vertexBuffer.memoryStats.bytesReserved+this._indexBuffer.memoryStats.bytesReserved,vertex:this._vertexBuffer.memoryStats,index:this._indexBuffer.memoryStats}}reshuffle(e){this._vertexBuffer&&this._vertexBuffer.reshuffle(e.vertex.count,e.vertex.operations),this._indexBuffer&&this._indexBuffer.reshuffle(e.index.count,e.index.operations)}}class I{constructor(e){this._pos=0,this._buffer=e,this._i32View=new Int32Array(this._buffer),this._f32View=new Float32Array(this._buffer)}readInt32(){return this._i32View[this._pos++]}readF32(){return this._f32View[this._pos++]}}var O=n(24964);function R(e){return e?{entities:(0,O._)(new I(e.entities),l.A),vertexData:e.data.map(M)}:null}function M(e){const t=e.layout.stride,n=new DataView(e.vertices),i=[],r=e.vertices.byteLength/t;let o=0;for(let a=0;a<r;a++){const r={};for(const t of e.layout.attributes){let e=`${t.offset} ${t.name}`,i=(0,b.q)(n,t,o);if(t.packPrecisionFactor)if(e+=` (precision: ${t.packPrecisionFactor})`,"number"==typeof i)i/=t.packPrecisionFactor;else for(let e=0;e<i.length;e++)i[e]/=t.packPrecisionFactor;r[e]=i}o+=t,i.push(r)}return{vertices:i,layout:e.layout}}let C=0;class P extends a.u{constructor(e,t,n,i,r=!1){super(e,t,n,i),this._meshes=new Map,this._entities=[],this._invalidated=!1,this._nextUploadAllowed=!1,this.tileAge=C++,this._metrics=[],this._entityIds=new Set,this._entityIdsFromBuffer=new Set,this._attributeEpoch=0,this._encounteredEnd=!1,this._objectIdMap=null,this.visible=!0,this.transforms.labelMat2d=(0,o.vt)(),this.enableDeferredUploads=r}destroy(){super.destroy(),this.clear()}clear(){for(const e of this._meshes.values())e.destroy();this._meshes.clear(),this._entities=[],this._metrics=[],this._displayList=null,this._invalidated=!0,this._entityIds.clear(),this._nextUploadAllowed=!0}beforeRender(e){super.beforeRender(e),this._needsReshuffle&&e.reshuffleManager.schedule(this)}tryReady(e){const t=this._invalidated&&!this._uploadAllowed;return!(this.isReady||t||!this._encounteredEnd||!(e>=this._attributeEpoch)||((0,i.A)("esri-2d-update-debug")&&console.debug(`Tile[${this.key.id}] FeatureTile.ready [epoch=${e}]`),this.ready(),this.requestRender(),0))}get labelMetrics(){return this._metrics}get hasData(){return!!this._meshes.size}get hasAnimations(){return!!this._objectIdMap}get needsUpload(){return this._invalidated}get _uploadAllowed(){return!this.enableDeferredUploads||this._nextUploadAllowed}upload(){this._nextUploadAllowed=!0}getDisplayList(e,t){if(this._uploadAllowed&&this._invalidated){this._entities.sort(((e,t)=>{const n=t.sortKey,i=e.sortKey;return i===n?e.id-t.id:i-n})),t===u.ch.BATCHING&&this.reshuffle(!0),this._displayList=p.fromDisplayEntities(this._entities,this,e,t);for(const e of this._meshes.values())e.upload();this.debugInfo.display.length=this._displayList.length,this.debugInfo.display.minOrderedLength=this._displayList.minOrderedLength,this.debugInfo.display.minUnorderedLength=this._displayList.minUnorderedLength,this.requestRender(),this._invalidated=!1,this._nextUploadAllowed=!1}return this._displayList}getMesh(e){if(!this._meshes.has(e))throw new Error(`InternalError: Unable to find VAO for instance: ${e}`);return this._meshes.get(e)}getSortKeys(e){const t=new Map;for(const{id:n,sortKey:i}of this._entities)if(e.has(n)&&t.set(n,i),t.size===e.size)break;return t}onMessage(e){if(e.objectIdMap)for(const t in e.objectIdMap)this._objectIdMap||(this._objectIdMap={}),this._objectIdMap[t]=e.objectIdMap[t];switch(e.type){case"append":this._onAppendMessage(e);break;case"update":this._onUpdateMessage(e)}if(this._aggregateMemoryStats(),this.requestRender(),e.end){if((0,i.A)("esri-2d-update-debug")&&console.debug(`Tile[${this.key.id}] FeatureTile.end [epoch=${e.attributeEpoch}]`),!e.attributeEpoch)throw new Error("InternalError: Attribute epoch not defined.");this._attributeEpoch=e.attributeEpoch,this._encounteredEnd=!0}}_onAppendMessage(e){if((0,i.A)("esri-2d-update-debug")&&console.debug(`Tile[${this.key.id}] FeatureTile.append`,{append:R(e?.append)}),e.clear&&this.clear(),!e.append)return;const t=(0,O._)(new I(e.append.entities),l.A);this._insert(t,e.append.data,!1)}_onUpdateMessage(e){(0,i.A)("esri-2d-update-debug")&&console.debug(`Tile[${this.key.id}] FeatureTile.update`,{isPixelBuffer:e.isPixelBuffer,modify:R(e.modify),remove:e.remove});const t=(0,O._)(new I(e.modify.entities),l.A),n=t.map((e=>e.id)),r=e.isPixelBuffer??!1,o=[...e.remove,...n];r?this._removeByIdsFromBuffer(o):this._removeByIds(o),this._insert(t,e.modify.data,r)}reshuffle(e=!1){if(this.destroyed)return;const t=new Map;for(const n of this._entities)for(const i of n.records){const n=this._meshes.get(i.instanceId);let r=t.get(n);r||(r=new m(e),t.set(n,r)),r.copyRecord(i)}for(const[e,n]of t)e.reshuffle(n);this._invalidated=!0,this._aggregateMemoryStats(),(0,i.A)("esri-2d-update-debug")&&r.A.getLogger("esri.views.2d.engine.webgl.FeatureTile").info(`Tile ${this.key.id} was reshuffled.`)}copyPixelBufferedEntitesFrom(e,t,n,i){const r=n*s.CQ,o=i*s.CQ;for(const n of e._entities){let i=null;for(const a of n.records)if(a.overlaps&t){const t=e.getMesh(a.instanceId),s=this._ensureMesh(a.instanceId,t.layout).copyRecordFrom(t,a,r,o);i||(i=new l.A(n.id,n.sortKey),this._entityIdsFromBuffer.add(n.id),this._entities.push(i)),i.records.push(s)}}this._invalidated=!0}_ensureMesh(e,t){return this._meshes.has(e)||this._meshes.set(e,new A(this._stage.bufferPool,t)),this._meshes.get(e)}_insert(e,t,n){if(!e.length)return;this._removeDuplicatedBufferedEntites(e);const i=this._insertVertexData(t);for(const t of e){for(const e of t.records)e.updateBaseOffsets(i.get(e.instanceId));n?this._tryInsertBufferedEntity(t):this._insertEntity(t)}this._invalidated=!0}_insertVertexData(e){const t=new Map;for(const n of e){const{instanceId:e,layout:i}=n,r=this._ensureMesh(e,i).append(n);if(n.metrics){const e=(0,O._)(new I(n.metrics),g.f)??[];this._metrics.push(...e)}t.set(e,r)}return t}_insertEntity(e){(0,i.A)("esri-2d-update-debug")&&this._entityIds.has(e.id)&&console.error(`Tile ${this.key.id} insertEnitty: Already have entityId ${e.id}`),this._entityIds.add(e.id),this._entities.push(e)}_tryInsertBufferedEntity(e){this._entityIds.has(e.id)?this._removeRecordsFromMesh(e.records):(this._entityIdsFromBuffer.add(e.id),this._entities.push(e))}_removeDuplicatedBufferedEntites(e){if(!this._entityIdsFromBuffer.size)return;const t=[];for(const n of e)this._entityIdsFromBuffer.has(n.id)&&t.push(n.id);this._removeByIds(t)}_removeByIdsFromBuffer(e){this._removeByIds(e.filter((e=>this._entityIdsFromBuffer.has(e))))}_removeByIds(e){if(0===e.length)return;const t=new Set(e),n=[];for(const e of this._entities)t.has(e.id)?this._remove(e):n.push(e);this._entities=n,this._invalidated=!0}_remove(e){this._removeRecordsFromMesh(e.records),this._entityIds.delete(e.id),this._entityIdsFromBuffer.delete(e.id);for(let t=this._metrics.length-1;t>=0;t--)this._metrics[t].entityTexel===e.id&&this._metrics.splice(t,1)}_removeRecordsFromMesh(e){for(const t of e){const{instanceId:e,indexStart:n,indexCount:i,vertexStart:r,vertexCount:o}=t;this._meshes.get(e)?.remove(n,i,r,o)}}_aggregateMemoryStats(){this.debugInfo.memory.bytesUsed=0,this.debugInfo.memory.bytesReserved=0;for(const e of this._meshes.values())this.debugInfo.memory.bytesUsed+=e.memoryStats.bytesUsed,this.debugInfo.memory.bytesReserved+=e.memoryStats.bytesReserved}get _needsReshuffle(){if(this.destroyed)return!1;const{bytesUsed:e,bytesReserved:t}=this.debugInfo.memory,n=e/t,{minOrderedLength:i,length:r}=this.debugInfo.display;return t>s._x&&n<s.eI||r>s.Xh&&i/r<s.Vl}get entityIds(){return this._objectIdMap?this._entities.map((({id:e})=>({objectId:this._objectIdMap[e],displayId:e}))):[]}}},36753:function(e,t,n){n.d(t,{p6:function(){return a},wV:function(){return o}}),Math.PI;const i=256/360,r=1/Math.LN2;function o(e){return function(e,t){return(e%=t)>=0?e:e+t}(e*i,256)}function a(e){return Math.log(e)*r}},28055:function(e,t,n){n.d(t,{W:function(){return s},o:function(){return u}});var i=n(58941),r=n(95929),o=n(83258);const a=(0,i.A)("esri-2d-log-allocations");class s{static create(e,t){const n=t.acquireUint32Array(e);return new s(n,t)}constructor(e,t){this._array=e,this._pool=t}get array(){return this._array}get length(){return this._array.length}getUint32View(e,t){return new Uint32Array(this._array.buffer,e+this._array.byteOffset,t)}expand(e){if(e<=this._array.byteLength)return;const t=this._pool.acquireUint32Array(e);t.set(this._array),this._pool.releaseUint32Array(this._array),this._array=t}destroy(){this._pool.releaseUint32Array(this._array)}}class l{constructor(){this._data=new ArrayBuffer(l.BYTE_LENGTH),this._freeList=new o.P({start:0,end:this._data.byteLength})}static get BYTE_LENGTH(){return 16e6}get buffer(){return this._data}acquireUint32Array(e){const t=this._freeList.firstFit(e);return null==t?null:new Uint32Array(this._data,t,e/Uint32Array.BYTES_PER_ELEMENT)}releaseUint32Array(e){this._freeList.free(e.byteOffset,e.byteLength)}}class u{constructor(){this._pages=[],this._pagesByBuffer=new Map,this._bytesAllocated=0}destroy(){this._pages=[],this._pagesByBuffer=null}get _bytesTotal(){return this._pages.length*l.BYTE_LENGTH}acquireUint32Array(e){if(this._bytesAllocated+=e,a&&console.log(`Allocating ${e}, (${this._bytesAllocated} / ${this._bytesTotal})`),e>=l.BYTE_LENGTH)return new Uint32Array(e/Uint32Array.BYTES_PER_ELEMENT);for(const t of this._pages){const n=t.acquireUint32Array(e);if(null!=n)return n}const t=this._addPage().acquireUint32Array(e);return(0,r.Lw)(t,"Expected to allocate page"),t}releaseUint32Array(e){this._bytesAllocated-=e.byteLength,a&&console.log(`Freeing ${e.byteLength}, (${this._bytesAllocated} / ${this._bytesTotal})`);const t=this._pagesByBuffer.get(e.buffer);t&&t.releaseUint32Array(e)}_addPage(){const e=new l;return this._pages.push(e),this._pagesByBuffer.set(e.buffer,e),e}}},54631:function(e,t,n){n.d(t,{Y:function(){return a}});var i=n(44705),r=n(77515),o=n(36008);class a extends r.q{constructor(e,t,n,i,r,a,s=r,l=a){super(),this.tileDebugInfoTexture=null,this.debugInfo={display:{length:0,minOrderedLength:0,minUnorderedLength:0,triangleCount:0},memory:{bytesUsed:0,bytesReserved:0}},this._destroyed=!1,this.key=new o.A(e),this.resolution=t,this.x=n,this.y=i,this.width=r,this.height=a,this.rangeX=s,this.rangeY=l}destroy(){this.tileDebugInfoTexture&&(this.tileDebugInfoTexture.dispose(),this.tileDebugInfoTexture=null),this._destroyed=!0}get debugSlot(){let e=this;for(;e.parent!==this._stage;){if(!e.parent)return 0;e=e.parent}return this._stage.children.indexOf(e)}setTransform(e){const t=this.resolution/(e.resolution*e.pixelRatio),n=this.transforms.tileMat3,[r,o]=e.toScreenNoRotation([0,0],[this.x,this.y]),a=this.width/this.rangeX*t,s=this.height/this.rangeY*t;(0,i.hZ)(n,a,0,0,0,s,0,r,o,1),(0,i.lw)(this.transforms.displayViewScreenMat3,e.displayViewMat3,n)}get destroyed(){return this._destroyed}}},88413:function(e,t,n){n.d(t,{AV:function(){return f},ES:function(){return m},IF:function(){return y},Qz:function(){return d},UE:function(){return g},bX:function(){return v},sZ:function(){return x}});var i=n(39819),r=n(40633),o=(n(33389),n(13798),n(58941),n(41835),n(85456)),a=(n(96402),n(69452),n(48347)),s=n(12285),l=n(10956),u=n(3817);const c=()=>r.A.getLogger("esri.views.2d.engine.webgl.Utils");function f(e){switch(e){case o.ld.UNSIGNED_BYTE:return 1;case o.ld.UNSIGNED_SHORT_4_4_4_4:return 2;case o.ld.FLOAT:return 4;default:return void c().error(new i.A("webgl-utils",`Unable to handle type ${e}`))}}function d(e){switch(e){case o.ld.UNSIGNED_BYTE:return Uint8Array;case o.ld.UNSIGNED_SHORT_4_4_4_4:return Uint16Array;case o.ld.FLOAT:return Float32Array;default:return void c().error(new i.A("webgl-utils",`Unable to handle type ${e}`))}}const h=e=>{const t=new Map;for(const n in e)for(const i of e[n])t.set(i.name,i.location);return t},_=e=>{const t={};return e.forEach(((e,n)=>t[n]=e?.length?e[0].stride:0)),t},p=new Map,m=(e,t)=>{if(!p.has(e)){const n=function(e){const t=new Map;for(const n in e){const i=e[n];let r=0;t.set(n,i.map((e=>{const t=new u._(e.name,e.count,e.type,r,0,e.normalized||!1);return r+=e.count*(0,a._)(e.type),t}))),t.get(n).forEach((e=>e.stride=r))}return t}(t),i={strides:_(n),bufferLayouts:n,attributes:h(t)};p.set(e,i)}return p.get(e)},g=e=>e.includes("data:image/svg+xml");function v(e){const t=[];for(let n=0;n<e.length;n++)t.push(e.charCodeAt(n));return t}function x(e,t,n){const i=new l.R(t.width,t.height);return i.dataType=t.dataType,t.depth&&(i.depth=t.depth),t.flipped&&(i.flipped=t.flipped),t.hasMipmap&&(i.hasMipmap=t.hasMipmap),i.internalFormat=t.internalFormat,t.isImmutable&&(i.isImmutable=t.isImmutable),t.isOpaque&&(i.isOpaque=t.isOpaque),t.maxAnisotropy&&(i.maxAnisotropy=t.maxAnisotropy),i.pixelFormat=t.pixelFormat,t.preMultiplyAlpha&&(i.preMultiplyAlpha=t.preMultiplyAlpha),t.samplingMode&&(i.samplingMode=t.samplingMode),t.target&&(i.target=t.target),i.uniform=t.uniform,t.unpackAlignment&&(i.unpackAlignment=t.unpackAlignment),t.wrapMode&&(i.wrapMode=t.wrapMode),new s.g(e,i,n)}function y(e){return"url"in e&&"urlHash"in e?{...e,url:""}:e}},77416:function(e,t,n){n.d(t,{A:function(){return l}});var i=n(25731),r=n(86305),o=n(85456),a=n(81438),s=n(3817);class l{constructor(e,t){this._rctx=e,this._attributes=[{name:"position",offset:0,type:o.pe.SHORT,count:2}],this.layout={hash:(0,i.hU)(this._attributes),attributes:this._attributes,stride:4},this._vertexBuffer=r.g.createVertex(e,o._U.STATIC_DRAW,new Uint16Array(t)),this._vao=new a.Z(e,new Map([["a_position",0]]),new Map([["geometry",[new s._("a_position",2,o.pe.SHORT,0,4)]]]),new Map([["geometry",this._vertexBuffer]])),this._count=t.length/2}bind(){this._rctx.bindVAO(this._vao)}unbind(){this._rctx.bindVAO(null)}dispose(){this._vao.dispose()}draw(){this._rctx.bindVAO(this._vao),this._rctx.drawArrays(o.WR.TRIANGLE_STRIP,0,this._count)}}},57672:function(e,t,n){n.d(t,{A:function(){return A}}),n(58941);var i=n(80708),r=n(7965),o=n(39819),a=n(40633),s=n(28181),l=n(25090),u=n(77515),c=n(59122),f=n(13786),d=n(1932),h=n(58081),_=n(76613),p=n(85475),m=n(86305),g=n(85456);const v=(e,t,n,i)=>{let r=0;for(let i=1;i<n;i++){const n=e[2*(t+i-1)],o=e[2*(t+i-1)+1];r+=(e[2*(t+i)]-n)*(e[2*(t+i)+1]+o)}return i?r>0:r<0},x=({coords:e,lengths:t},n)=>{const i=[];for(let r=0,o=0;r<t.length;o+=t[r],r+=1){const a=o,s=[];for(;r<t.length-1&&v(e,o+t[r],t[r+1],n);r+=1,o+=t[r])s.push(o+t[r]-a);const l=e.slice(2*a,2*(o+t[r])),u=(0,c.e)(l,s,2);for(const e of u)i.push(e+a)}return i};class y{constructor(e,t,n,i=!1){this._cache={},this.vertices=e,this.indices=t,this.primitiveType=n,this.isMapSpace=i}static fromPath(e){const t=(0,h.eU)(new _.A,e.path,!1,!1),n=t.coords,i=new Uint32Array(x(t,!0)),r=new Uint32Array(n.length/2);for(let e=0;e<r.length;e++)r[e]=(0,p.M9)(Math.floor(n[2*e]),Math.floor(n[2*e+1]));return new y({geometry:r},i,g.WR.TRIANGLES)}static fromGeometry(e,t){const n=t.geometry?.type;switch(n){case"polygon":return y.fromPolygon(e,t.geometry);case"extent":return y.fromMapExtent(e,t.geometry);default:return a.A.getLogger("esri.views.2d.engine.webgl.Mesh2D").error(new o.A("mapview-bad-type",`Unable to create a mesh from type ${n}`,t)),y.fromScreenExtent({xmin:0,ymin:0,xmax:1,ymax:1})}}static fromPolygon(e,t){const n=(0,h.Ye)(new _.A,t,!1,!1),i=n.coords,r=new Uint32Array(x(n,!1)),o=new Uint32Array(i.length/2),a=(0,d.vt)(),s=(0,d.vt)();for(let t=0;t<o.length;t++)(0,f.hZ)(a,i[2*t],i[2*t+1]),e.toScreen(s,a),o[t]=(0,p.M9)(Math.floor(s[0]),Math.floor(s[1]));return new y({geometry:o},r,g.WR.TRIANGLES,!0)}static fromScreenExtent({xmin:e,xmax:t,ymin:n,ymax:i}){const r={geometry:new Uint32Array([(0,p.M9)(e,n),(0,p.M9)(t,n),(0,p.M9)(e,i),(0,p.M9)(e,i),(0,p.M9)(t,n),(0,p.M9)(t,i)])},o=new Uint32Array([0,1,2,3,4,5]);return new y(r,o,g.WR.TRIANGLES)}static fromMapExtent(e,t){const[n,i]=e.toScreen([0,0],[t.xmin,t.ymin]),[r,o]=e.toScreen([0,0],[t.xmax,t.ymax]),a={geometry:new Uint32Array([(0,p.M9)(n,i),(0,p.M9)(r,i),(0,p.M9)(n,o),(0,p.M9)(n,o),(0,p.M9)(r,i),(0,p.M9)(r,o)])},s=new Uint32Array([0,1,2,3,4,5]);return new y(a,s,g.WR.TRIANGLES)}destroy(){null!=this._cache.indexBuffer&&this._cache.indexBuffer.dispose(),this._cache.vertexBuffers?.forEach((e=>e?.dispose())),this._cache.indexBuffer=this._cache.vertexBuffers=null}get elementType(){return(()=>{switch(this.indices.BYTES_PER_ELEMENT){case 1:return g.pe.UNSIGNED_BYTE;case 2:return g.pe.UNSIGNED_SHORT;case 4:return g.pe.UNSIGNED_INT;default:throw new o.A("Cannot get DataType of array")}})()}getIndexBuffer(e,t=g._U.STATIC_DRAW){return this._cache.indexBuffer??=m.g.createIndex(e,t,this.indices),this._cache.indexBuffer}getVertexBuffers(e,t=g._U.STATIC_DRAW){return this._cache.vertexBuffers??=new Map(Object.keys(this.vertices).reduce(((n,i)=>(n.push([i,m.g.createVertex(e,t,this.vertices[i])]),n)),new Array)),this._cache.vertexBuffers}}var S=n(57008),T=n(81438);class b extends u.q{constructor(e,t){super(),this._clip=t,this._cache={},this.stage=e,this._handle=(0,s.watch)((()=>t.version),(()=>this._invalidate())),this.ready()}static fromClipArea(e,t){return new b(e,t)}_destroyGL(){null!=this._cache.mesh&&(this._cache.mesh.destroy(),this._cache.mesh=null),null!=this._cache.vao&&(this._cache.vao.dispose(),this._cache.vao=null)}destroy(){this._destroyGL(),this._handle.remove()}getVAO(e,t,n,i){const[r,o]=t.size;if("geometry"!==this._clip.type&&this._lastWidth===r&&this._lastHeight===o||(this._lastWidth=r,this._lastHeight=o,this._destroyGL()),null==this._cache.vao){const r=this._createMesh(t,this._clip),o=r.getIndexBuffer(e),a=r.getVertexBuffers(e);this._cache.mesh=r,this._cache.vao=new T.Z(e,n,i,a,o)}return this._cache.vao}_createTransforms(){return{displayViewScreenMat3:(0,l.vt)()}}_invalidate(){this._destroyGL(),this.requestRender()}_createMesh(e,t){switch(t.type){case"rect":return y.fromScreenExtent((0,S.p)(t,e.size[0],e.size[1]));case"path":return y.fromPath(t);case"geometry":return y.fromGeometry(e,t);default:return a.A.getLogger("esri.views.2d.engine.webgl.ClippingInfo").error(new o.A("mapview-bad-type","Unable to create ClippingInfo mesh from clip of type: ${clip.type}")),y.fromScreenExtent({xmin:0,ymin:0,xmax:1,ymax:1})}}}var E=n(28230);class A extends r.m{set clips(e){super.clips=e,this._updateClippingInfo(e)}renderChildren(e){e.painter.setPipelineState(null),null==this._renderPasses&&(this._renderPasses=this.prepareRenderPasses(e.painter));for(const t of this._renderPasses)try{t.render(e)}catch(e){}}prepareRenderPasses(e){return[e.registerRenderPass({name:"clip",brushes:[i.d.clip],target:()=>this._clippingInfos,drawPhase:E.S5.MAP|E.S5.LABEL|E.S5.LABEL_ALPHA|E.S5.DEBUG|E.S5.HIGHLIGHT})]}_updateClippingInfo(e){null!=this._clippingInfos&&(this._clippingInfos.forEach((e=>e.destroy())),this._clippingInfos=null),null!=e&&e.length&&(this._clippingInfos=e.items.map((e=>b.fromClipArea(this.stage,e)))),this.requestRender()}}},73936:function(e,t,n){n.d(t,{A:function(){return u}});var i=n(39686),r=n(77416),o=n(52937),a=n(85456);const s={nearest:{defines:[],samplingMode:a.Cj.NEAREST,mips:!1},bilinear:{defines:[],samplingMode:a.Cj.LINEAR,mips:!1},bicubic:{defines:["bicubic"],samplingMode:a.Cj.LINEAR,mips:!1},trilinear:{defines:[],samplingMode:a.Cj.LINEAR_MIPMAP_LINEAR,mips:!0}},l=(e,t,n)=>{if("dynamic"===n.samplingMode){const{state:n}=e,i=t.resolution/t.pixelRatio/n.resolution,r=Math.round(e.pixelRatio)!==e.pixelRatio,o=i>1.05||i<.95;return n.rotation||o||r||t.isSourceScaled||t.rotation?s.bilinear:s.nearest}return s[n.samplingMode]};class u extends o.A{constructor(){super(...arguments),this._desc={vsPath:"raster/bitmap",fsPath:"raster/bitmap",attributes:new Map([["a_pos",0]])}}dispose(){this._quad&&this._quad.dispose()}prepareState({context:e}){e.setBlendingEnabled(!0),e.setColorMask(!0,!0,!0,!0),e.setStencilWriteMask(0),e.setStencilTestEnabled(!0)}draw(e,t){const{context:n,renderingOptions:o,painter:s,requestRender:u,allowDelayedRender:c}=e;if(!t.source||!t.isReady)return;const f=l(e,t,o),d=s.materialManager.getProgram(this._desc,f.defines);if(c&&null!=u&&!d.compiled)return void u();e.timeline.begin(this.name),"additive"===t.blendFunction?n.setBlendFunctionSeparate(a.dn.ONE,a.dn.ONE,a.dn.ONE,a.dn.ONE):n.setBlendFunctionSeparate(a.dn.ONE,a.dn.ONE_MINUS_SRC_ALPHA,a.dn.ONE,a.dn.ONE_MINUS_SRC_ALPHA),n.setStencilFunction(a.MT.EQUAL,t.stencilRef,255),this._quad||(this._quad=new r.A(n,[0,0,1,0,0,1,1,1]));const{coordScale:h,computedOpacity:_,transforms:p}=t;t.setSamplingProfile(f),t.bind(e.context,i.YS),n.useProgram(d),d.setUniformMatrix3fv("u_dvsMat3",p.displayViewScreenMat3),d.setUniform1i("u_texture",i.YS),d.setUniform2fv("u_coordScale",h),d.setUniform1f("u_opacity",_),this._quad.draw(),e.timeline.end(this.name)}}},52937:function(e,t,n){n.d(t,{A:function(){return i}});class i{constructor(){this.name=this.constructor.name||"UnnamedBrush",this.brushEffect=null}prepareState(e,t){}draw(e,t,n){}drawMany(e,t,n){for(const i of t)i.visible&&this.draw(e,i,n)}}},829:function(e,t,n){n.d(t,{A:function(){return f}});var i=n(43745),r=n(94860),o=n(52937),a=n(94020),s=n(86305),l=n(85456),u=n(10904),c=n(81438);class f extends o.A{constructor(){super(...arguments),this._color=(0,i.fA)(1,0,0,1),this._initialized=!1}dispose(){this._solidProgram&&(this._solidProgram.dispose(),this._solidProgram=null),this._solidVertexArrayObject&&(this._solidVertexArrayObject.dispose(),this._solidVertexArrayObject=null)}prepareState({context:e}){e.setDepthWriteEnabled(!1),e.setDepthTestEnabled(!1),e.setStencilTestEnabled(!0),e.setBlendingEnabled(!1),e.setColorMask(!1,!1,!1,!1),e.setStencilOp(l.eA.KEEP,l.eA.KEEP,l.eA.REPLACE),e.setStencilWriteMask(255)}draw(e,t){const{context:n,requestRender:i,allowDelayedRender:r}=e;this._initialized||this._initialize(n),!r||null==i||this._solidProgram.compiled?(n.setStencilFunctionSeparate(l.Y7.FRONT_AND_BACK,l.MT.GREATER,t.stencilRef,255),n.bindVAO(this._solidVertexArrayObject),n.useProgram(this._solidProgram),this._solidProgram.setUniformMatrix3fv("u_dvsMat3",t.transforms.displayViewScreenMat3),this._solidProgram.setUniform2fv("u_coord_range",[t.rangeX,t.rangeY]),this._solidProgram.setUniform1f("u_depth",0),this._solidProgram.setUniform4fv("u_color",this._color),n.drawArrays(l.WR.TRIANGLE_STRIP,0,4),n.bindVAO()):i()}_initialize(e){if(this._initialized)return!0;const t=(0,u.r)(e,a.T);if(!t)return!1;const n=new Int8Array([0,0,1,0,0,1,1,1]),i=s.g.createVertex(e,l._U.STATIC_DRAW,n),o=new c.Z(e,a.T.attributes,r.Pd,new Map([["geometry",i]]));return this._solidProgram=t,this._solidVertexArrayObject=o,this._initialized=!0,!0}}},55382:function(e,t,n){n.d(t,{A:function(){return m}});var i=n(43745),r=n(94860),o=n(27657),a=n(52937),s=n(94020),l=n(47272),u=n(86305),c=n(85456),f=n(10904),d=n(12285),h=n(10956),_=n(81438);const p=16;class m extends a.A{constructor(){super(...arguments),this._color=(0,i.fA)(1,0,0,1)}dispose(){this._outlineProgram?.dispose(),this._outlineProgram=null,this._tileInfoProgram?.dispose(),this._tileInfoProgram=null,this._outlineVertexArrayObject?.dispose(),this._outlineVertexArrayObject=null,this._tileInfoVertexArrayObject?.dispose(),this._tileInfoVertexArrayObject=null,this._ctx=null}prepareState({context:e}){e.setBlendingEnabled(!0),e.setBlendFunctionSeparate(c.dn.ONE,c.dn.ONE_MINUS_SRC_ALPHA,c.dn.ONE,c.dn.ONE_MINUS_SRC_ALPHA),e.setColorMask(!0,!0,!0,!0),e.setStencilWriteMask(0),e.setStencilTestEnabled(!1)}draw(e,t){const{context:n,requestRender:i,allowDelayedRender:r}=e;if(!t.isReady&&t instanceof o.R&&t.hasData)return;if(this._loadWGLResources(n),r&&null!=i&&(!this._outlineProgram.compiled||!this._tileInfoProgram.compiled))return void i();n.bindVAO(this._outlineVertexArrayObject),n.useProgram(this._outlineProgram),this._outlineProgram.setUniformMatrix3fv("u_dvsMat3",t.transforms.displayViewScreenMat3),this._outlineProgram.setUniform2f("u_coord_range",t.rangeX,t.rangeY),this._outlineProgram.setUniform1f("u_depth",0),this._outlineProgram.setUniform4fv("u_color",this._color),n.drawArrays(c.WR.LINE_STRIP,0,4);const a=this._getTexture(n,t);a?(n.bindVAO(this._tileInfoVertexArrayObject),n.useProgram(this._tileInfoProgram),n.bindTexture(a,0),this._tileInfoProgram.setUniformMatrix3fv("u_dvsMat3",t.transforms.displayViewScreenMat3),this._tileInfoProgram.setUniform1f("u_depth",0),this._tileInfoProgram.setUniform2f("u_coord_ratio",t.rangeX/t.width,t.rangeY/t.height),this._tileInfoProgram.setUniform2f("u_delta",0,0),this._tileInfoProgram.setUniform2f("u_dimensions",a.descriptor.width,a.descriptor.height),n.drawArrays(c.WR.TRIANGLE_STRIP,0,4),n.bindVAO()):n.bindVAO()}_loadWGLResources(e){if(this._outlineProgram&&this._tileInfoProgram)return;const t=(0,f.r)(e,s.T),n=(0,f.r)(e,l.H),i=new Int8Array([0,0,1,0,1,1,0,1]),o=u.g.createVertex(e,c._U.STATIC_DRAW,i),a=new _.Z(e,s.T.attributes,r.Pd,new Map([["geometry",o]])),d=new Int8Array([0,0,1,0,0,1,1,1]),h=u.g.createVertex(e,c._U.STATIC_DRAW,d),p=new _.Z(e,l.H.attributes,r.Pd,new Map([["geometry",h]]));this._outlineProgram=t,this._tileInfoProgram=n,this._outlineVertexArrayObject=a,this._tileInfoVertexArrayObject=p}_getTexture(e,t){if(!this._ctx){const e=document.createElement("canvas");e.width=512,e.height=512,this._ctx=e.getContext("2d")}if(!t.tileDebugInfoTexture){const n=new h.R;n.wrapMode=c.pF.CLAMP_TO_EDGE,n.samplingMode=c.Cj.LINEAR,n.isImmutable=!0,n.width=512,n.height=512,t.tileDebugInfoTexture=new d.g(e,n)}const n=this._ctx;n.clearRect(0,0,n.canvas.width,n.canvas.height),n.textAlign="left",n.textBaseline="top",n.font="14px sans-serif",n.lineWidth=2,n.fillStyle="white",n.strokeStyle="black";const{debugSlot:i}=t;let r=8+99.2*i;const o=`${i}) ${t.key.id} (${t.constructor.name})`;n.strokeText(o,8,r),n.fillText(o,8,r),r+=p;const{debugInfo:a}=t;if(a){const{length:e,minOrderedLength:t,minUnorderedLength:i,triangleCount:o}=a.display;if(e>0){const t=`Length: ${e}`;n.strokeText(t,8,r),n.fillText(t,8,r),r+=p}if(t){const e=`Min ordered length: ${t}`;n.strokeText(e,8,r),n.fillText(e,8,r),r+=p}if(i){const e=`Min unordered length: ${i}`;n.strokeText(e,8,r),n.fillText(e,8,r),r+=p}if(o>0){o>1e5&&(n.fillStyle="red",n.strokeStyle="white");const e=`Triangle count: ${o}`;n.strokeText(e,8,r),n.fillText(e,8,r),r+=p}const{bytesUsed:s,bytesReserved:l}=a.memory;if(n.fillStyle="white",n.strokeStyle="black",s>0||l>0){const e=`Memory usage: ${s} of ${l} bytes`;n.strokeText(e,8,r),n.fillText(e,8,r),r+=p}}return t.tileDebugInfoTexture.setData(n.canvas),t.tileDebugInfoTexture}}},87573:function(e,t,n){n.d(t,{A:function(){return r}});var i=n(14583);class r{constructor(e,t,n,r){this.transformedX=0,this.transformedY=0,this.center=(0,i.fA)(e,t),this.centerT=(0,i.vt)(),this.halfWidth=n/2,this.halfHeight=r/2,this.width=n,this.height=r}get x(){return this.center[0]}get y(){return this.center[1]}get blX(){return this.center[0]+this.halfWidth}get blY(){return this.center[1]+this.halfHeight}get trX(){return this.center[0]-this.halfWidth}get trY(){return this.center[1]-this.halfHeight}get xmin(){return this.x-this.halfWidth}get xmax(){return this.x+this.halfWidth}get ymin(){return this.y-this.halfHeight}get ymax(){return this.y+this.halfHeight}set x(e){this.center[0]=e}set y(e){this.center[1]=e}clone(){return new r(this.x,this.y,this.width,this.height)}serialize(e){return e.writeF32(this.center[0]),e.writeF32(this.center[1]),e.push(this.width),e.push(this.height),e}findCollisionDelta(e,t=4){const n=Math.abs(e.centerT[0]-this.centerT[0]),i=Math.abs(e.centerT[1]-this.centerT[1]),r=(e.halfWidth+this.halfWidth+t)/n,o=(e.halfHeight+this.halfHeight+t)/i,a=Math.min(r,o);return Math.log2(a)}extend(e){const t=Math.min(this.xmin,e.xmin),n=Math.min(this.ymin,e.ymin),i=Math.max(this.xmax,e.xmax)-t,r=Math.max(this.ymax,e.ymax)-n,o=t+i/2,a=n+r/2;this.width=i,this.height=r,this.halfWidth=i/2,this.halfHeight=r/2,this.x=o,this.y=a}static deserialize(e){const t=e.readF32(),n=e.readF32(),i=e.readInt32(),o=e.readInt32();return new r(t,n,i,o)}}},57650:function(e,t,n){n.d(t,{f:function(){return o}});var i=n(87573),r=n(24964);class o{constructor(e,t,n,i,r,o,a,s,l=[]){this.entityTexel=e,this.anchorX=t,this.anchorY=n,this.directionX=i,this.directionY=r,this.maxScale=o,this.minScale=a,this.referenceBounds=s,this.bounds=l}serialize(e){e.push(this.entityTexel),e.writeF32(this.anchorX),e.writeF32(this.anchorY),e.writeF32(this.directionX),e.writeF32(this.directionY),e.writeF32(this.maxScale),e.writeF32(this.minScale),null===this.referenceBounds?(e.writeF32(0),e.writeF32(0),e.writeF32(0)):(e.writeF32(this.referenceBounds.size),e.writeF32(this.referenceBounds.offsetX),e.writeF32(this.referenceBounds.offsetY)),(0,r.j)(e,this.bounds)}static deserialize(e){const t=e.readInt32(),n=e.readF32(),a=e.readF32(),s=e.readF32(),l=e.readF32(),u=e.readF32(),c=e.readF32(),f=e.readF32(),d=e.readF32(),h=e.readF32(),_=(0,r._)(e,i.A)??[];return new o(t,n,a,s,l,u,c,{size:f,offsetX:d,offsetY:h},_)}}},83258:function(e,t,n){n.d(t,{B:function(){return i},P:function(){return r}});class i{constructor(e){if(this.next=null,!Array.isArray(e))return void(this.data=e);this.data=e[0];let t=this;for(let n=1;n<e.length;n++)t.next=new i([e[n]]),t=t.next}*values(){let e=this;for(;e;)yield e.data,e=e.next}forEach(e){let t=this;for(;t;)e(t.data),t=t.next}get last(){return this.next?this.next.last:this}}class r{constructor(e){this._head=null,null!=e&&(this._head=new i(e))}get head(){return this._head}maxAvailableSpace(){if(null==this._head)return 0;let e=0;return this._head.forEach((t=>{const n=t.end-t.start;e=Math.max(e,n)})),e}firstFit(e){if(null==this._head)return null;let t=null,n=this._head;for(;n;){const i=n.data.end-n.data.start;if(i===e)return t?t.next=n.next:this._head=n.next,n.data.start;if(i>e){const t=n.data.start;return n.data.start+=e,t}t=n,n=n.next}return null}free(e,t){const n=e+t;if(null==this._head){const t=new i({start:e,end:n});return void(this._head=t)}if(n<=this._head.data.start){if(n===this._head.data.start)return void(this._head.data.start-=t);const r=new i({start:e,end:n});return r.next=this._head,void(this._head=r)}let r=this._head,o=r.next;for(;o;){if(o.data.start>=n){if(r.data.end===e){if(r.data.end+=t,r.data.end===o.data.start){const e=o.data.end-o.data.start;return r.data.end+=e,void(r.next=o.next)}return}if(o.data.start===n)return void(o.data.start-=t);const a=new i({start:e,end:n});return a.next=r.next,void(r.next=a)}r=o,o=o.next}if(e===r.data.end)return void(r.data.end+=t);const a=new i({start:e,end:n});r.next=a}clear(){this._head=null}}},85475:function(e,t,n){n.d(t,{Kl:function(){return l},M9:function(){return a},fw:function(){return s}});const i=new Float32Array(1),r=new Uint32Array(i.buffer);function o(e){return i[0]=e,r[0]}function a(e,t){return 65535&e|t<<16}function s(e){const t=o(e),n=t>>>31;let i=t>>>23&255,r=8388607&t;return i-=127,i>15?n<<15|31744:i<-25?0:(i<-14&&(r+=8388608,r/=2**(-14-i),i=-15),i+=15,r/=8192,r=function(e){const t=Math.floor(e),n=e-t;return t<1023&&(n>.5||.5===n&&t%2==1)?t+1:t}(r),n<<15|i<<10|r)}function l(e){let t=e>>>15,n=e>>10&31,i=1023&e;return t=t?-1:1,n-=15,i/=1024,n>-15?i+=1:n=-14,t*2**n*i}},5544:function(e,t,n){n.d(t,{F:function(){return o},q:function(){return a}});var i=n(85475),r=n(85456);function o(e,t,n,o){const a=n.packPrecisionFactor??1;switch(n.type){case r.pe.BYTE:if(1===n.count)e.setInt8(o+n.offset,t*a);else for(let i=0;i<n.count;i++){const r=i*Int8Array.BYTES_PER_ELEMENT;e.setInt8(o+n.offset+r,t[i]*a)}break;case r.pe.UNSIGNED_BYTE:if(1===n.count)e.setUint8(o+n.offset,t*a);else for(let i=0;i<n.count;i++){const r=i*Uint8Array.BYTES_PER_ELEMENT;e.setUint8(o+n.offset+r,t[i]*a)}break;case r.pe.SHORT:if(1===n.count)e.setInt16(o+n.offset,t*a,!0);else for(let i=0;i<n.count;i++){const r=i*Int16Array.BYTES_PER_ELEMENT;e.setInt16(o+n.offset+r,t[i]*a,!0)}break;case r.pe.UNSIGNED_SHORT:if(1===n.count)e.setUint16(o+n.offset,t*a,!0);else for(let i=0;i<n.count;i++){const r=i*Uint16Array.BYTES_PER_ELEMENT;e.setUint16(o+n.offset+r,t[i]*a,!0)}break;case r.pe.INT:if(1===n.count)e.setInt32(o+n.offset,t*a,!0);else for(let i=0;i<n.count;i++){const r=i*Int32Array.BYTES_PER_ELEMENT;e.setInt32(o+n.offset+r,t[i]*a,!0)}break;case r.pe.UNSIGNED_INT:if(1===n.count)e.setUint32(o+n.offset,t*a,!0);else for(let i=0;i<n.count;i++){const r=i*Uint32Array.BYTES_PER_ELEMENT;e.setUint32(o+n.offset+r,t[i]*a,!0)}break;case r.pe.FLOAT:if(1===n.count)e.setFloat32(o+n.offset,t*a,!0);else for(let i=0;i<n.count;i++){const r=i*Float32Array.BYTES_PER_ELEMENT;e.setFloat32(o+n.offset+r,t[i]*a,!0)}break;case r.pe.HALF_FLOAT:if(1===n.count)e.setUint16(o+n.offset,(0,i.fw)(t*a),!0);else for(let r=0;r<n.count;r++){const s=r*Uint16Array.BYTES_PER_ELEMENT;e.setUint16(o+n.offset+s,(0,i.fw)(t[r]*a),!0)}}}function a(e,t,n){switch(t.type){case r.pe.BYTE:{if(1===t.count)return e.getInt8(n+t.offset);const i=[];for(let r=0;r<t.count;r++){const o=r*Int8Array.BYTES_PER_ELEMENT;i.push(e.getInt8(n+t.offset+o))}return i}case r.pe.UNSIGNED_BYTE:{if(1===t.count)return e.getUint8(n+t.offset);const i=[];for(let r=0;r<t.count;r++){const o=r*Uint8Array.BYTES_PER_ELEMENT;i.push(e.getUint8(n+t.offset+o))}return i}case r.pe.SHORT:{if(1===t.count)return e.getInt16(n+t.offset,!0);const i=[];for(let r=0;r<t.count;r++){const o=r*Int16Array.BYTES_PER_ELEMENT;i.push(e.getInt16(n+t.offset+o,!0))}return i}case r.pe.UNSIGNED_SHORT:{if(1===t.count)return e.getUint16(n+t.offset,!0);const i=[];for(let r=0;r<t.count;r++){const o=r*Uint16Array.BYTES_PER_ELEMENT;i.push(e.getUint16(n+t.offset+o,!0))}return i}case r.pe.INT:{if(1===t.count)return e.getInt32(n+t.offset,!0);const i=[];for(let r=0;r<t.count;r++){const o=r*Int32Array.BYTES_PER_ELEMENT;i.push(e.getInt32(n+t.offset+o,!0))}return i}case r.pe.UNSIGNED_INT:{if(1===t.count)return e.getUint32(n+t.offset,!0);const i=[];for(let r=0;r<t.count;r++){const o=r*Uint32Array.BYTES_PER_ELEMENT;i.push(e.getUint32(n+t.offset+o,!0))}return i}case r.pe.FLOAT:{if(1===t.count)return e.getFloat32(n+t.offset,!0);const i=[];for(let r=0;r<t.count;r++){const o=r*Float32Array.BYTES_PER_ELEMENT;i.push(e.getFloat32(n+t.offset+o,!0))}return i}case r.pe.HALF_FLOAT:{if(1===t.count)return(0,i.Kl)(e.getUint16(n+t.offset,!0));const r=[];for(let o=0;o<t.count;o++){const a=o*Uint16Array.BYTES_PER_ELEMENT;r.push((0,i.Kl)(e.getUint16(n+t.offset+a,!0)))}return r}}}},25731:function(e,t,n){n.d(t,{Ph:function(){return o},Z0:function(){return s},hU:function(){return r}});var i=n(50944);function r(e){const t=e.map((({name:e,count:t,type:n})=>`${e}.${t}.${n}`)).join(",");return(0,i.Wm)(t)}function o(e,t,n,i,r,a,s){if(e.primitiveName===t){let t=i?.readWithDefault(r,a,e[n]&&s);return"text"===e.type&&(t=t.toString()),void(e[n]=t)}if("type"in e&&null!=e.type){if(e.effects)for(const l of e.effects)o(l,t,n,i,r,a,s);switch(e.type){case"CIMPointSymbol":case"CIMLineSymbol":case"CIMPolygonSymbol":if(e.symbolLayers)for(const l of e.symbolLayers)o(l,t,n,i,r,a,s);break;case"CIMTextSymbol":e.symbol&&o(e.symbol,t,n,i,r,a,s);break;case"CIMHatchFill":e.lineSymbol&&o(e.lineSymbol,t,n,i,r,a,s);break;case"CIMPictureMarker":case"CIMCharacterMarker":case"CIMVectorMarker":if(e.markerPlacement&&o(e.markerPlacement,t,n,i,r,a,s),"CIMVectorMarker"===e.type&&e.markerGraphics)for(const l of e.markerGraphics)o(l,t,n,i,r,a,s),o(l.symbol,t,n,i,r,a,s)}}}const a=400;function s(e){const t=e.width;return null!=e.effects?a:Math.max(1.25*t,8)}},94020:function(e,t,n){n.d(t,{T:function(){return r}});var i=n(44723);const r={shaders:{vertexShader:(0,i.Q)("background/background.vert"),fragmentShader:(0,i.Q)("background/background.frag")},attributes:new Map([["a_pos",0]])}},47272:function(e,t,n){n.d(t,{H:function(){return r}});var i=n(44723);const r={shaders:{vertexShader:(0,i.Q)("tileInfo/tileInfo.vert"),fragmentShader:(0,i.Q)("tileInfo/tileInfo.frag")},attributes:new Map([["a_pos",0]])}},44723:function(e,t,n){n.d(t,{Q:function(){return o}});const i=new(n(65644).Z)((r={background:{"background.frag":"uniform lowp vec4 u_color;\nvoid main() {\ngl_FragColor = u_color;\n}","background.vert":"attribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform mediump vec2 u_coord_range;\nuniform mediump float u_depth;\nvoid main() {\nvec3 v_pos = u_dvsMat3 * vec3(u_coord_range * a_pos, 1.0);\ngl_Position = vec4(v_pos.xy, 0.0, 1.0);\n}"},bitBlit:{"bitBlit.frag":"uniform lowp sampler2D u_tex;\nuniform lowp float u_opacity;\nvarying mediump vec2 v_uv;\nvoid main() {\nlowp vec4 color = texture2D(u_tex, v_uv);\ngl_FragColor = color * u_opacity;\n}","bitBlit.vert":"attribute vec2 a_pos;\nattribute vec2 a_tex;\nvarying mediump vec2 v_uv;\nvoid main(void) {\ngl_Position = vec4(a_pos , 0.0, 1.0);\nv_uv = a_tex;\n}"},debug:{overlay:{"overlay.frag":"precision mediump float;\nvarying vec4 v_color;\nvoid main(void) {\ngl_FragColor = v_color;\n}","overlay.vert":"attribute vec3 a_PositionAndFlags;\nuniform mat3 u_dvsMat3;\nuniform vec4 u_colors[4];\nuniform float u_opacities[4];\nvarying vec4 v_color;\nvoid main(void) {\nvec2 position = a_PositionAndFlags.xy;\nfloat flags = a_PositionAndFlags.z;\nint colorIndex = int(mod(flags, 4.0));\nvec4 color;\nfor (int i = 0; i < 4; i++) {\ncolor = u_colors[i];\nif (i == colorIndex) {\nbreak;\n}\n}\nint opacityIndex = int(mod(floor(flags / 4.0), 4.0));\nfloat opacity;\nfor (int i = 0; i < 4; i++) {\nopacity = u_opacities[i];\nif (i == opacityIndex) {\nbreak;\n}\n}\nv_color = color * opacity;\ngl_Position = vec4((u_dvsMat3 * vec3(position, 1.0)).xy, 0.0, 1.0);\n}"}},dot:{dot:{"dot.frag":"precision mediump float;\nvarying vec4 v_color;\nvarying float v_dotRatio;\nvarying float v_invEdgeRatio;\nuniform highp float u_tileZoomFactor;\nvoid main()\n{\nfloat dist = length(gl_PointCoord - vec2(.5, .5)) * 2.;\nfloat alpha = smoothstep(0., 1., v_invEdgeRatio * (dist - v_dotRatio) + 1.);\ngl_FragColor = v_color * alpha;\n}","dot.vert":"precision highp float;\nattribute vec2 a_pos;\nuniform sampler2D u_texture;\nuniform highp mat3 u_dvsMat3;\nuniform highp float u_tileZoomFactor;\nuniform highp float u_dotSize;\nuniform highp float u_pixelRatio;\nvarying vec2 v_pos;\nvarying vec4 v_color;\nvarying float v_dotRatio;\nvarying float v_invEdgeRatio;\nconst float EPSILON = 0.000001;\nvoid main()\n{\nmat3 tileToTileTexture = mat3(  1., 0., 0.,\n0., -1., 0.,\n0., 1., 1.  );\nvec3 texCoords = tileToTileTexture * vec3(a_pos.xy / 512., 1.);\nv_color = texture2D(u_texture, texCoords.xy);\nfloat smoothEdgeWidth = max(u_dotSize / 2., 1.) ;\nfloat z = 0.;\nz += 2.0 * step(v_color.a, EPSILON);\ngl_PointSize = (smoothEdgeWidth + u_dotSize);\ngl_Position = vec4((u_dvsMat3 * vec3(a_pos + .5, 1.)).xy, z, 1.);\nv_dotRatio = u_dotSize / gl_PointSize;\nv_invEdgeRatio = -1. / ( smoothEdgeWidth / gl_PointSize );\ngl_PointSize  *= (u_pixelRatio * u_tileZoomFactor);\n}"}},filtering:{"bicubic.glsl":"vec4 computeWeights(float v) {\nfloat b = 1.0 / 6.0;\nfloat v2 = v * v;\nfloat v3 = v2 * v;\nfloat w0 = b * (-v3 + 3.0 * v2 - 3.0 * v + 1.0);\nfloat w1 = b * (3.0 * v3  - 6.0 * v2 + 4.0);\nfloat w2 = b * (-3.0 * v3 + 3.0 * v2 + 3.0 * v + 1.0);\nfloat w3 = b * v3;\nreturn vec4(w0, w1, w2, w3);\n}\nvec4 bicubicOffsetsAndWeights(float v) {\nvec4 w = computeWeights(v);\nfloat g0 = w.x + w.y;\nfloat g1 = w.z + w.w;\nfloat h0 = 1.0 - (w.y / g0) + v;\nfloat h1 = 1.0 + (w.w / g1) - v;\nreturn vec4(h0, h1, g0, g1);\n}\nvec4 sampleBicubicBSpline(sampler2D sampler, vec2 coords, vec2 texSize) {\nvec2 eX = vec2(1.0 / texSize.x, 0.0);\nvec2 eY = vec2(0.0, 1.0 / texSize.y);\nvec2 texel = coords * texSize - 0.5;\nvec3 hgX = bicubicOffsetsAndWeights(fract(texel).x).xyz;\nvec3 hgY = bicubicOffsetsAndWeights(fract(texel).y).xyz;\nvec2 coords10 = coords + hgX.x * eX;\nvec2 coords00 = coords - hgX.y * eX;\nvec2 coords11 = coords10 + hgY.x * eY;\nvec2 coords01 = coords00 + hgY.x * eY;\ncoords10 = coords10 - hgY.y * eY;\ncoords00 = coords00 - hgY.y * eY;\nvec4 color00 = texture2D(sampler, coords00);\nvec4 color10 = texture2D(sampler, coords10);\nvec4 color01 = texture2D(sampler, coords01);\nvec4 color11 = texture2D(sampler, coords11);\ncolor00 = mix(color00, color01, hgY.z);\ncolor10 = mix(color10, color11, hgY.z);\ncolor00 = mix(color00, color10, hgX.z);\nreturn color00;\n}","bilinear.glsl":"vec4 sampleBilinear(sampler2D sampler, vec2 coords, vec2 texSize) {\nvec2 texelStart = floor(coords * texSize);\nvec2 coord0 = texelStart / texSize;\nvec2 coord1 = (texelStart +  vec2(1.0, 0.0)) / texSize;\nvec2 coord2 = (texelStart +  vec2(0.0, 1.0)) / texSize;\nvec2 coord3 = (texelStart +  vec2(1.0, 1.0)) / texSize;\nvec4 color0 = texture2D(sampler, coord0);\nvec4 color1 = texture2D(sampler, coord1);\nvec4 color2 = texture2D(sampler, coord2);\nvec4 color3 = texture2D(sampler, coord3);\nvec2 blend = fract(coords * texSize);\nvec4 color01 = mix(color0, color1, blend.x);\nvec4 color23 = mix(color2, color3, blend.x);\nvec4 color = mix(color01, color23, blend.y);\n#ifdef NNEDGE\nfloat alpha = floor(color0.a * color1.a * color2.a * color3.a + 0.5);\ncolor = color * alpha + (1.0 - alpha) * texture2D(sampler, coords);\n#endif\nreturn color;\n}","epx.glsl":"vec4 sampleEPX(sampler2D sampler, float size, vec2 coords, vec2 texSize) {\nvec2 invSize = 1.0 / texSize;\nvec2 texel = coords * texSize;\nvec2 texel_i = floor(texel);\nvec2 texel_frac = fract(texel);\nvec4 colorP = texture2D(sampler, texel_i * invSize);\nvec4 colorP1 = vec4(colorP);\nvec4 colorP2 = vec4(colorP);\nvec4 colorP3 = vec4(colorP);\nvec4 colorP4 = vec4(colorP);\nvec4 colorA = texture2D(sampler, (texel_i - vec2(0.0, 1.0)) * invSize);\nvec4 colorB = texture2D(sampler, (texel_i + vec2(1.0, 0.0)) * invSize);\nvec4 colorC = texture2D(sampler, (texel_i - vec2(1.0, 0.0)) * invSize);\nvec4 colorD = texture2D(sampler, (texel_i + vec2(0.0, 1.0)) * invSize);\nif (colorC == colorA && colorC != colorD && colorA != colorB) {\ncolorP1 = colorA;\n}\nif (colorA == colorB && colorA != colorC && colorB != colorD) {\ncolorP2 = colorB;\n}\nif (colorD == colorC && colorD != colorB && colorC != colorA) {\ncolorP3 = colorC;\n}\nif (colorB == colorD && colorB != colorA && colorD != colorC) {\ncolorP4 = colorD;\n}\nvec4 colorP12 = mix(colorP1, colorP2, texel_frac.x);\nvec4 colorP34 = mix(colorP1, colorP2, texel_frac.x);\nreturn mix(colorP12, colorP34, texel_frac.y);\n}"},heatmap:{heatmapResolve:{"heatmapResolve.frag":"precision highp float;\n#ifdef HEATMAP_PRECISION_HALF_FLOAT\n#define COMPRESSION_FACTOR 4.0\n#else\n#define COMPRESSION_FACTOR 1.0\n#endif\nuniform sampler2D u_texture;\nuniform sampler2D u_gradient;\nuniform vec2 u_densityMinAndInvRange;\nuniform float u_densityNormalization;\nvarying vec2 v_uv;\nvoid main() {\nvec4 data = texture2D(u_texture, v_uv);\nfloat density = data.r * COMPRESSION_FACTOR;\ndensity *= u_densityNormalization;\ndensity = (density - u_densityMinAndInvRange.x) * u_densityMinAndInvRange.y;\nvec4 color = texture2D(u_gradient, vec2(density, 0.5));\ngl_FragColor = vec4(color.rgb * color.a, color.a);\n}","heatmapResolve.vert":"precision highp float;\nattribute vec2 a_pos;\nvarying vec2 v_uv;\nvoid main() {\nv_uv = a_pos;\ngl_Position = vec4(a_pos * 2.0 - 1.0, 1., 1.);\n}"}},highlight:{"blur.frag":"varying mediump vec2 v_texcoord;\nuniform mediump vec4 u_direction;\nuniform mediump mat4 u_channelSelector;\nuniform mediump float u_sigma;\nuniform sampler2D u_texture;\nmediump float gauss1(mediump vec2 dir) {\nreturn exp(-dot(dir, dir) / (2.0 * u_sigma * u_sigma));\n}\nmediump vec4 selectChannel(mediump vec4 sample) {\nreturn u_channelSelector * sample;\n}\nvoid accumGauss1(mediump float i, inout mediump float tot, inout mediump float weight) {\nmediump float w = gauss1(i * u_direction.xy);\ntot += selectChannel(texture2D(u_texture, v_texcoord + i * u_direction.zw))[3] * w;\nweight += w;\n}\nvoid main(void) {\nmediump float tot = 0.0;\nmediump float weight = 0.0;\naccumGauss1(-5.0, tot, weight);\naccumGauss1(-4.0, tot, weight);\naccumGauss1(-3.0, tot, weight);\naccumGauss1(-2.0, tot, weight);\naccumGauss1(-1.0, tot, weight);\naccumGauss1(0.0, tot, weight);\naccumGauss1(1.0, tot, weight);\naccumGauss1(2.0, tot, weight);\naccumGauss1(3.0, tot, weight);\naccumGauss1(4.0, tot, weight);\naccumGauss1(5.0, tot, weight);\ngl_FragColor = vec4(0.0, 0.0, 0.0, tot / weight);\n}","highlight.frag":"varying mediump vec2 v_texcoord;\nuniform sampler2D u_texture;\nuniform mediump float u_sigma;\nuniform sampler2D u_shade;\nuniform mediump vec2 u_minMaxDistance;\nmediump float estimateDistance() {\nmediump float y = texture2D(u_texture, v_texcoord)[3];\nconst mediump float y0 = 0.5;\nmediump float m0 = 1.0 / (sqrt(2.0 * 3.1415) * u_sigma);\nmediump float d = (y - y0) / m0;\nreturn d;\n}\nmediump vec4 shade(mediump float d) {\nmediump float mappedDistance = (d - u_minMaxDistance.x) / (u_minMaxDistance.y - u_minMaxDistance.x);\nmappedDistance = clamp(mappedDistance, 0.0, 1.0);\nreturn texture2D(u_shade, vec2(mappedDistance, 0.5));\n}\nvoid main(void) {\nmediump float d = estimateDistance();\ngl_FragColor = shade(d);\n}","textured.vert":"attribute mediump vec2 a_position;\nattribute mediump vec2 a_texcoord;\nvarying mediump vec2 v_texcoord;\nvoid main(void) {\ngl_Position = vec4(a_position, 0.0, 1.0);\nv_texcoord = a_texcoord;\n}"},materials:{"attributeData.glsl":"uniform highp sampler2D filterFlags;\nuniform highp sampler2D animation;\nuniform highp sampler2D gpgpu;\nuniform highp sampler2D visualVariableData;\nuniform highp sampler2D dataDriven0;\nuniform highp sampler2D dataDriven1;\nuniform highp sampler2D dataDriven2;\nuniform float size;\nhighp vec2 getAttributeDataCoords(in highp vec3 id) {\nhighp vec3  texel = unpackDisplayIdTexel(id);\nhighp float u32 = float(int(texel.r) + int(texel.g) * 256 + int(texel.b) * 256 * 256);\nhighp float col = mod(u32, size);\nhighp float row = (u32 - col) / size;\nhighp float u = col / size;\nhighp float v = row / size;\nreturn vec2(u, v);\n}\nhighp vec2 getAttributeDataTextureCoords(in highp vec3 id) {\nreturn (getAttributeDataCoords(id) * 2.0) - 1.0 + (.5 / vec2(size));\n}\nhighp vec4 getFilterData(in highp vec3 id) {\nvec2 coords = getAttributeDataCoords(id);\nreturn texture2D(filterFlags, coords);\n}\nhighp vec4 getAnimation(in highp vec3 id) {\nhighp vec2 coords = getAttributeDataCoords(id);\nreturn texture2D(animation, coords);\n}\nhighp vec4 getVisualVariableData(in highp vec3 id) {\nhighp vec2 coords = getAttributeDataCoords(id);\nreturn texture2D(visualVariableData, coords);\n}\nhighp vec4 getDataDriven0(in highp vec3 id) {\nhighp vec2 coords = getAttributeDataCoords(id);\nreturn texture2D(dataDriven0, coords);\n}\nhighp vec4 getDataDriven1(in highp vec3 id) {\nhighp vec2 coords = getAttributeDataCoords(id);\nreturn texture2D(dataDriven1, coords);\n}\nhighp vec4 getGPGPU(in highp vec3 id) {\nhighp vec2 coords = getAttributeDataCoords(id);\nreturn texture2D(gpgpu, coords);\n}\nhighp vec4 getDataDriven2(in highp vec3 id) {\nhighp vec2 coords = getAttributeDataCoords(id);\nreturn texture2D(dataDriven2, coords);\n}\nfloat u88VVToFloat(in vec2 v) {\nbool isMagic = v.x == 255.0 && v.y == 255.0;\nif (isMagic) {\nreturn NAN_MAGIC_NUMBER;\n}\nreturn (v.x + v.y * float(0x100)) - 32768.0;\n}","barycentric.glsl":"float inTriangle(vec3 bary) {\nvec3 absBary = abs(bary);\nreturn step((absBary.x + absBary.y + absBary.z), 1.05);\n}\nvec3 xyToBarycentric(in vec2 pos, in vec2 v0,  in vec2 v1, in vec2 v2) {\nmat3 xyToBarycentricMat3 = mat3(\nv1.x * v2.y - v2.x * v1.y, v2.x * v0.y - v0.x * v2.y, v0.x * v1.y - v1.x * v0.y,\nv1.y - v2.y, v2.y - v0.y, v0.y - v1.y,\nv2.x - v1.x, v0.x - v2.x, v1.x - v0.x\n);\nfloat A2 = v0.x * (v1.y - v2.y) + v1.x * (v2.y - v0.y) + v2.x * (v0.y - v1.y);\nreturn (1. / A2) * xyToBarycentricMat3 * vec3(1., pos);\n}","constants.glsl":"const float C_DEG_TO_RAD = 3.14159265359 / 180.0;\nconst float C_256_TO_RAD = 3.14159265359 / 128.0;\nconst float C_RAD_TO_DEG = 180.0 / 3.141592654;\nconst float POSITION_PRECISION = 1.0 / 8.0;\nconst float FILL_POSITION_PRECISION = 1.0 / 1.0;\nconst float SOFT_EDGE_RATIO = 1.0;\nconst float THIN_LINE_WIDTH_FACTOR = 1.1;\nconst float THIN_LINE_HALF_WIDTH = 1.0;\nconst float EXTRUDE_SCALE_PLACEMENT_PADDING = 1.0 / 4.0;\nconst float OFFSET_PRECISION = 1.0 / 8.0;\nconst float OUTLINE_SCALE = 1.0 / 5.0;\nconst float SDF_FONT_SIZE = 24.0;\nconst float MAX_SDF_DISTANCE = 8.0;\nconst float PLACEMENT_PADDING = 8.0;\nconst float EPSILON = 0.00001;\nconst float EPSILON_HITTEST = 0.05;\nconst int MAX_FILTER_COUNT = 2;\nconst int ATTR_VV_SIZE = 0;\nconst int ATTR_VV_COLOR = 1;\nconst int ATTR_VV_OPACITY = 2;\nconst int ATTR_VV_ROTATION = 3;\nconst highp float NAN_MAGIC_NUMBER = 1e-30;\nconst int BITSET_GENERIC_LOCK_COLOR = 1;\nconst int BITSET_GENERIC_CONSIDER_ALPHA_ONLY = 4;\nconst int BITSET_MARKER_ALIGNMENT_MAP = 0;\nconst int BITSET_MARKER_OUTLINE_ALLOW_COLOR_OVERRIDE = 2;\nconst int BITSET_MARKER_SCALE_SYMBOLS_PROPORTIONALLY = 3;\nconst int BITSET_TYPE_FILL_OUTLINE = 0;\nconst int BITSET_FILL_RANDOM_PATTERN_OFFSET = 2;\nconst int BITSET_FILL_HAS_UNRESOLVED_REPLACEMENT_COLOR = 3;\nconst int BITSET_FILL_HAS_PATTERN_HEIGHT_PRECISION_FACTOR = 5;\nconst int BITSET_FILL_HAS_PATTERN_WIDTH_PRECISION_FACTOR = 6;\nconst int BITSET_LINE_SCALE_DASH = 2;",fill:{"common.glsl":"#include <materials/symbologyTypeUtils.glsl>\n#ifdef PATTERN\nuniform mediump vec2 u_mosaicSize;\nvarying mediump float v_sampleAlphaOnly;\n#endif\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\nuniform lowp vec4 u_isActive[ 2 ];\nuniform highp float u_dotValue;\nuniform highp float u_tileDotsOverArea;\nuniform highp float u_dotTextureDotCount;\nuniform mediump float u_tileZoomFactor;\n#endif\nvarying highp vec3 v_id;\nvarying lowp vec4 v_color;\nvarying lowp float v_opacity;\nvarying mediump vec4 v_aux1;\n#ifdef PATTERN\nvarying mediump vec2 v_tileTextureCoord;\n#endif\n#ifdef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\nvarying lowp float v_isOutline;\n#endif\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\nvarying highp vec2 v_dotTextureCoords;\nvarying highp vec4 v_dotThresholds[ 2 ];\n#endif","fill.frag":"precision highp float;\n#include <materials/constants.glsl>\n#include <materials/utils.glsl>\n#include <materials/fill/common.glsl>\n#ifdef PATTERN\nuniform lowp sampler2D u_texture;\n#endif\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\nuniform mediump mat4 u_dotColors[ 2 ];\nuniform sampler2D u_dotTextures[ 2 ];\nuniform vec4 u_dotBackgroundColor;\n#endif\n#ifdef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\n#include <materials/shared/line/common.glsl>\n#include <materials/shared/line/line.frag>\nlowp vec4 drawLine() {\nfloat v_lineWidth = v_aux1.x;\nvec2  v_normal    = v_aux1.yz;\nLineData inputs = LineData(\nv_color,\nv_normal,\nv_lineWidth,\nv_opacity,\nv_id\n);\nreturn shadeLine(inputs);\n}\n#endif\nlowp vec4 drawFill() {\nlowp vec4 out_color = vec4(0.);\n#ifdef HITTEST\nout_color = v_color;\n#elif defined(PATTERN)\nmediump vec4 v_tlbr = v_aux1;\nmediump vec2 normalizedTextureCoord = mod(v_tileTextureCoord, 1.0);\nmediump vec2 samplePos = mix(v_tlbr.xy, v_tlbr.zw, normalizedTextureCoord);\nlowp vec4 color = texture2D(u_texture, samplePos);\nif (v_sampleAlphaOnly > 0.5) {\ncolor.rgb = vec3(color.a);\n}\nout_color = v_opacity * v_color * color;\n#elif SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY && !defined(HIGHLIGHT)\nvec4 textureThresholds0 = texture2D(u_dotTextures[0], v_dotTextureCoords);\nvec4 textureThresholds1 = texture2D(u_dotTextures[1], v_dotTextureCoords);\nvec4 difference0 = v_dotThresholds[0] - textureThresholds0;\nvec4 difference1 = v_dotThresholds[1] - textureThresholds1;\n#ifdef DD_DOT_BLENDING\nvec4 isPositive0 = step(0.0, difference0);\nvec4 isPositive1 = step(0.0, difference1);\nfloat weightSum = dot(isPositive0, difference0) + dot(isPositive1, difference1);\nfloat lessThanEqZero = step(weightSum, 0.0);\nfloat greaterThanZero = 1.0 - lessThanEqZero ;\nfloat divisor = (weightSum + lessThanEqZero);\nvec4 weights0 = difference0 * isPositive0 / divisor;\nvec4 weights1 = difference1 * isPositive1 / divisor;\nvec4 dotColor = u_dotColors[0] * weights0 + u_dotColors[1] * weights1;\nvec4 preEffectColor = greaterThanZero * dotColor + lessThanEqZero * u_dotBackgroundColor;\n#else\nfloat diffMax = max(max4(difference0), max4(difference1));\nfloat lessThanZero = step(diffMax, 0.0);\nfloat greaterOrEqZero = 1.0 - lessThanZero;\nvec4 isMax0 = step(diffMax, difference0);\nvec4 isMax1 = step(diffMax, difference1);\nvec4 dotColor = u_dotColors[0] * isMax0 + u_dotColors[1] * isMax1;\nvec4 preEffectColor = greaterOrEqZero * dotColor + lessThanZero * u_dotBackgroundColor;\n#endif\nout_color = preEffectColor;\n#else\nout_color = v_opacity * v_color;\n#endif\n#ifdef HIGHLIGHT\nout_color.a = 1.0;\n#endif\nreturn out_color;\n}\nvoid main() {\n#ifdef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\nif (v_isOutline > 0.5) {\ngl_FragColor = drawLine();\n} else {\ngl_FragColor = drawFill();\n}\n#else\ngl_FragColor = drawFill();\n#endif\n}","fill.vert":"#include <materials/symbologyTypeUtils.glsl>\n#define PACKED_LINE\nprecision highp float;\nattribute float a_bitset;\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\nattribute float a_inverseArea;\nvec4 a_color = vec4(0.0, 0.0, 0.0, 1.0);\nvec2 a_zoomRange = vec2(0.0, 10000.0);\n#else\nattribute vec4 a_color;\nattribute vec4 a_aux2;\nattribute vec4 a_aux3;\n#ifndef SYMBOLOGY_TYPE_IS_SIMPLE_LIKE\nattribute vec4 a_aux1;\nattribute vec2 a_zoomRange;\n#else\nvec2 a_zoomRange = vec2(0.0, 10000.0);\n#endif\n#endif\nuniform vec2 u_tileOffset;\nuniform vec2 u_maxIntNumOfCrossing;\n#include <util/encoding.glsl>\n#include <materials/vcommon.glsl>\n#include <materials/fill/common.glsl>\n#include <materials/fill/hittest.glsl>\nconst float INV_SCALE_COMPRESSION_FACTOR = 1.0 / 128.0;\nconst float MAX_REPRESENTABLE_INT = 16777216.0;\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\nvec4 dotThreshold(vec4 featureAttrOverFeatureArea, float dotValue, float tileDotsOverArea) {\nreturn featureAttrOverFeatureArea * (1.0 / dotValue)  * (1.0 / tileDotsOverArea);\n}\n#endif\n#ifdef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\n#include <materials/shared/line/common.glsl>\n#include <materials/shared/line/line.vert>\nvoid drawLine(out lowp vec4 out_color, out highp vec3 out_pos) {\nLineData outputs = buildLine(\nout_pos,\na_id,\na_pos,\na_color,\n(a_aux3.xy - 128.) / 16.,\n(a_aux3.zw - 128.) / 16.,\n0.,\na_aux2.z / 16.,\na_bitset,\nvec4(0.),\nvec2(0.),\na_aux2.w / 16.\n);\nv_id      = outputs.id;\nv_opacity = outputs.opacity;\nv_aux1    = vec4(outputs.lineHalfWidth, outputs.normal, 0.);\nout_color = outputs.color;\n}\n#endif\nvoid drawFill(out lowp vec4 out_color, out highp vec3 out_pos) {\nfloat a_bitSet = a_bitset;\nout_color = getColor(a_color, a_bitSet, BITSET_GENERIC_LOCK_COLOR);\nv_opacity = getOpacity();\nv_id      = norm(a_id);\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\nmat3 tileToTileNormalized = mat3(  2. / 512.,  0.,  0.,\n0., -2. / 512.,  0.,\n-1.,  1.,  1.  );\nout_pos   = tileToTileNormalized * vec3((a_pos * FILL_POSITION_PRECISION), 1.);\n#else\nout_pos   = u_dvsMat3 * vec3(a_pos * FILL_POSITION_PRECISION, 1.);\n#endif\n#ifdef PATTERN\nvec4  a_tlbr   = a_aux1;\nfloat a_width  = a_aux2.x;\nfloat a_height = a_aux2.y;\nvec2  a_offset = a_aux2.zw;\nvec2  a_scale  = a_aux3.xy;\nfloat a_angle  = a_aux3.z;\nif (getBit(a_bitset, BITSET_FILL_HAS_PATTERN_WIDTH_PRECISION_FACTOR) > 0.5) {\na_width *= INV_SCALE_COMPRESSION_FACTOR;\n}\nif (getBit(a_bitset, BITSET_FILL_HAS_PATTERN_HEIGHT_PRECISION_FACTOR) > 0.5) {\na_height *= INV_SCALE_COMPRESSION_FACTOR;\n}\nvec2 scale = INV_SCALE_COMPRESSION_FACTOR * a_scale;\nfloat width = u_zoomFactor * a_width * scale.x;\nfloat height = u_zoomFactor * a_height * scale.y;\nfloat angle = C_256_TO_RAD * a_angle;\nfloat sinA = sin(angle);\nfloat cosA = cos(angle);\nfloat dx = 0.0;\nfloat dy = 0.0;\nif (getBit(a_bitset, BITSET_FILL_RANDOM_PATTERN_OFFSET) > 0.5) {\nfloat id = rgba2float(vec4(a_id, 0.0));\ndx = rand(vec2(id, 0.0));\ndy = rand(vec2(0.0, id));\n}\nmat3 patternMatrix = mat3(cosA / width, sinA / height, 0,\n-sinA / width, cosA / height, 0,\ndx,            dy,           1);\nvec2 patternSize = vec2(a_width, a_height);\nvec2 numPatternsPerMaxInt = vec2(MAX_REPRESENTABLE_INT) / patternSize;\nvec2 maxIntCrossingOffsetCorrection = patternSize * fract(u_maxIntNumOfCrossing * numPatternsPerMaxInt);\nvec2 tileOffset = u_tileOffset + maxIntCrossingOffsetCorrection - 0.5 * patternSize;\ntileOffset = vec2(tileOffset.x * cosA - tileOffset.y * sinA, tileOffset.x * sinA + tileOffset.y * cosA);\ntileOffset = mod(tileOffset, patternSize);\nvec2 symbolOffset = u_zoomFactor * scale * vec2(a_offset - tileOffset) / vec2(width, height);\nv_tileTextureCoord = (patternMatrix * vec3(a_pos * FILL_POSITION_PRECISION, 1.0)).xy - symbolOffset;\nv_aux1 = a_tlbr / u_mosaicSize.xyxy;\nv_sampleAlphaOnly = getBit(a_bitset, BITSET_GENERIC_CONSIDER_ALPHA_ONLY);\nif (getBit(a_bitSet, BITSET_FILL_HAS_UNRESOLVED_REPLACEMENT_COLOR) > 0.5) {\n#ifdef VV_COLOR\nv_sampleAlphaOnly *= (1.0 - float(isNan(VV_ADATA[ATTR_VV_COLOR]))) * (1.0 - getBit(a_bitSet, BITSET_GENERIC_LOCK_COLOR));\n#else\nv_sampleAlphaOnly = 0.0;\n#endif\n}\n#elif SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\nvec4 ddAttributeData0 = getAttributeData2(a_id) * u_isActive[0] * a_inverseArea;\nvec4 ddAttributeData1 = getAttributeData3(a_id) * u_isActive[1] * a_inverseArea;\nfloat size = u_tileZoomFactor * 512.0 * 1.0 / u_pixelRatio;\nv_dotThresholds[0] = dotThreshold(ddAttributeData0, u_dotValue, u_tileDotsOverArea);\nv_dotThresholds[1] = dotThreshold(ddAttributeData1, u_dotValue, u_tileDotsOverArea);\nv_dotTextureCoords = (a_pos * FILL_POSITION_PRECISION + 0.5) / size;\n#endif\n}\n#ifdef HITTEST\nvoid draw(out lowp vec4 out_color, out highp vec3 out_pos) {\n#ifdef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\nif (getBit(a_bitset, BITSET_TYPE_FILL_OUTLINE) > 0.5) {\nout_pos = vec3(0., 0., 2.);\nreturn;\n}\n#endif\nhittestFill(out_color, out_pos);\ngl_PointSize = 1.0;\n}\n#elif defined(SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE)\nvoid draw(out lowp vec4 out_color, out highp vec3 out_pos) {\nv_isOutline = getBit(a_bitset, BITSET_TYPE_FILL_OUTLINE);\nif (v_isOutline > 0.5) {\ndrawLine(out_color, out_pos);\n} else {\ndrawFill(out_color, out_pos);\n}\n}\n#else\n#define draw drawFill\n#endif\nvoid main()\n{\nINIT;\nhighp vec3 pos  = vec3(0.);\nhighp vec4 color  = vec4(0.);\ndraw(color, pos);\nv_color = color;\ngl_Position = vec4(clip(v_color, pos, getFilterFlags(), a_zoomRange), 1.0);\n}","hittest.glsl":"#ifdef HITTEST\n#include <materials/hittest/common.glsl>\nattribute vec2 a_pos1;\nattribute vec2 a_pos2;\nvoid hittestFill(\nout lowp vec4 out_color,\nout highp vec3 out_pos\n) {\nvec3 pos        = u_viewMat3 * u_tileMat3 * vec3(a_pos  * FILL_POSITION_PRECISION, 1.);\nvec3 pos1       = u_viewMat3 * u_tileMat3 * vec3(a_pos1 * FILL_POSITION_PRECISION, 1.);\nvec3 pos2       = u_viewMat3 * u_tileMat3 * vec3(a_pos2 * FILL_POSITION_PRECISION, 1.);\nfloat hittestDist = u_hittestDist;\nfloat dist = distPointTriangle(u_hittestPos, pos.xy, pos1.xy, pos2.xy);\nout_pos = vec3(getAttributeDataTextureCoords(a_id), 0.0);\nif (dist < 0. || dist >= hittestDist) {\nout_pos.z += 2.0;\n}\nout_color = vec4(1. / 255., 0, 0, dist == 0. ? (1. / 255.) : 0.);\n}\n#endif"},hittest:{"common.glsl":"#ifdef HITTEST\nuniform float hittestDist;\nuniform highp vec2 hittestPos;\nfloat projectScalar(vec2 a, vec2 b) {\nreturn dot(a, normalize(b));\n}\nfloat distPointSegment(vec2 p0, vec2 p1, vec2 p2) {\nvec2 L = p2 - p1;\nvec2 A = p0 - p1;\nfloat projAL = projectScalar(A, L);\nfloat t = clamp(projAL / length(L), 0., 1.);\nreturn distance(p0, p1 + t * (p2 - p1));\n}\nvoid hittestMarker(out lowp vec4 out_color, out highp vec3 out_pos, in highp vec3 pos, float size) {\nfloat dist = distance(pos, vec3(hittestPos, 1.));\nout_pos = vec3(getAttributeDataTextureCoords(a_id), 0.0);\nif ((dist - size) > hittestDist) {\nout_pos.z += 2.0;\n}\nout_color = vec4(1. / 255., 0, 0, (dist - size) < 0. ? (1. / 255.) : 0.);\n}\nfloat intersectPointTriangleBary(vec2 p, vec2 a, vec2 b, vec2 c) {\nreturn inTriangle(xyToBarycentric(p, a, b, c));\n}\nfloat distPointTriangle(vec2 p, vec2 a, vec2 b, vec2 c) {\nvec2 ba = b - a;\nvec2 ca = c - a;\nfloat crossProduct = ba.x * ca.y - ca.x * ba.y;\nbool isParallel = crossProduct < EPSILON_HITTEST && crossProduct > -EPSILON_HITTEST;\nif (isParallel) {\nreturn -1.;\n}\nif (intersectPointTriangleBary(p.xy, a, b, c) == 1.) {\nreturn 0.;\n}\nfloat distAB = distPointSegment(p, a, b);\nfloat distBC = distPointSegment(p, b, c);\nfloat distCA = distPointSegment(p, c, a);\nreturn min(min(distAB, distBC), distCA);\n}\n#endif"},icon:{"common.glsl":"#include <util/encoding.glsl>\nuniform lowp vec2 u_mosaicSize;\nvarying lowp vec4 v_color;\nvarying highp vec3 v_id;\nvarying highp vec4 v_sizeTex;\nvarying mediump vec3 v_pos;\nvarying lowp float v_opacity;\nuniform lowp sampler2D u_texture;\n#ifdef SDF\nvarying lowp vec4 v_outlineColor;\nvarying mediump float v_outlineWidth;\nvarying mediump float v_distRatio;\nvarying mediump float v_overridingOutlineColor;\nvarying mediump float v_isThin;\n#endif\n#ifdef SDF\nvec4 getColor(vec2 v_size, vec2 v_tex) {\n#ifdef HITTEST\nlowp vec4 fillPixelColor = vec4(1.0);\n#else\nlowp vec4 fillPixelColor = v_color;\n#endif\nfloat d = 0.5 - rgba2float(texture2D(u_texture, v_tex));\nfloat size = max(v_size.x, v_size.y);\nfloat dist = d * size * SOFT_EDGE_RATIO * v_distRatio;\nfillPixelColor *= clamp(0.5 - dist, 0.0, 1.0);\nfloat outlineWidth = v_outlineWidth;\n#ifdef HIGHLIGHT\noutlineWidth = max(outlineWidth, 4.0 * v_isThin);\n#endif\nif (outlineWidth > 0.25) {\nlowp vec4 outlinePixelColor = v_overridingOutlineColor * v_color + (1.0 - v_overridingOutlineColor) * v_outlineColor;\nfloat clampedOutlineSize = min(outlineWidth, size);\noutlinePixelColor *= clamp(0.5 - abs(dist) + clampedOutlineSize * 0.5, 0.0, 1.0);\nreturn v_opacity * ((1.0 - outlinePixelColor.a) * fillPixelColor + outlinePixelColor);\n}\nreturn v_opacity * fillPixelColor;\n}\n#else\nvec4 getColor(vec2 _v_size, vec2 v_tex) {\nlowp vec4 texColor = texture2D(u_texture, v_tex);\nreturn v_opacity * texColor * v_color;\n}\n#endif",heatmapAccumulate:{"common.glsl":"varying lowp vec4 v_hittestResult;\nvarying mediump vec2 v_offsetFromCenter;\nvarying highp float v_fieldValue;","heatmapAccumulate.frag":"precision mediump float;\n#include <materials/icon/heatmapAccumulate/common.glsl>\n#ifdef HEATMAP_PRECISION_HALF_FLOAT\n#define COMPRESSION_FACTOR 0.25\n#else\n#define COMPRESSION_FACTOR 1.0\n#endif\nuniform lowp sampler2D u_texture;\nvoid main() {\n#ifdef HITTEST\ngl_FragColor = v_hittestResult;\n#else\nfloat radius = length(v_offsetFromCenter);\nfloat shapeWeight = step(radius, 1.0);\nfloat oneMinusRadiusSquared = 1.0 - radius * radius;\nfloat kernelWeight = oneMinusRadiusSquared * oneMinusRadiusSquared;\ngl_FragColor = vec4(shapeWeight * kernelWeight * v_fieldValue * COMPRESSION_FACTOR);\n#endif\n}","heatmapAccumulate.vert":"precision highp float;\nattribute vec2 a_vertexOffset;\nvec4 a_color = vec4(0.0);\nvec2 a_zoomRange = vec2(0.0, 10000.0);\nuniform float u_radius;\nuniform float u_isFieldActive;\n#include <materials/vcommon.glsl>\n#include <materials/hittest/common.glsl>\n#include <materials/icon/heatmapAccumulate/common.glsl>\nvoid main() {\nfloat filterFlags = getFilterFlags();\n#ifdef HITTEST\nhighp vec4 out_hittestResult = vec4(0.);\nhighp vec3 out_pos = vec3(0.);\nvec3 pos = u_viewMat3 * u_tileMat3 * vec3(a_pos * POSITION_PRECISION, 1.0);\nhittestMarker(out_hittestResult, out_pos, pos, u_radius);\nv_hittestResult = out_hittestResult;\ngl_PointSize = 1.;\ngl_Position = vec4(clip(a_color, out_pos, filterFlags, a_zoomRange), 1.0);\n#else\nv_offsetFromCenter = sign(a_vertexOffset);\nv_fieldValue = getAttributeData2(a_id).x * u_isFieldActive + 1.0 - u_isFieldActive;\nvec3 centerPos = u_dvsMat3 * vec3(a_pos * POSITION_PRECISION, 1.0);\nvec3 vertexPos = centerPos + u_displayViewMat3 * vec3(v_offsetFromCenter, 0.0) * u_radius;\ngl_Position = vec4(clip(a_color, vertexPos, filterFlags, a_zoomRange), 1.0);\n#endif\n}"},"hittest.glsl":"#ifdef HITTEST\n#include <materials/hittest/common.glsl>\nattribute vec2 a_vertexOffset1;\nattribute vec2 a_vertexOffset2;\nattribute vec2 a_texCoords1;\nattribute vec2 a_texCoords2;\nvec2 getTextureCoords(in vec3 bary, in vec2 texCoords0, in vec2 texCoords1, in vec2 texCoords2) {\nreturn texCoords0 * bary.x + texCoords1 * bary.y + texCoords2 * bary.z;\n}\nvoid hittestIcon(\ninout lowp vec4 out_color,\nout highp vec3 out_pos,\nin vec3 pos,\nin vec3 offset,\nin vec2 size,\nin float scaleFactor,\nin float isMapAligned\n) {\nout_pos = vec3(getAttributeDataTextureCoords(a_id), 0.0);\nvec3 posBase = u_viewMat3 * u_tileMat3  * pos;\nvec3 offset1 = scaleFactor * vec3(a_vertexOffset1 / 16.0, 0.);\nvec3 offset2 = scaleFactor * vec3(a_vertexOffset2 / 16.0, 0.);\nvec2 pos0    = (posBase + getMatrixNoDisplay(isMapAligned) * offset).xy;\nvec2 pos1    = (posBase + getMatrixNoDisplay(isMapAligned) * offset1).xy;\nvec2 pos2    = (posBase + getMatrixNoDisplay(isMapAligned) * offset2).xy;\nvec3 bary0 = xyToBarycentric(u_hittestPos + vec2(-u_hittestDist, -u_hittestDist), pos0, pos1, pos2);\nvec3 bary1 = xyToBarycentric(u_hittestPos + vec2(0., -u_hittestDist), pos0, pos1, pos2);\nvec3 bary2 = xyToBarycentric(u_hittestPos + vec2(u_hittestDist, -u_hittestDist), pos0, pos1, pos2);\nvec3 bary3 = xyToBarycentric(u_hittestPos + vec2(-u_hittestDist, 0.), pos0, pos1, pos2);\nvec3 bary4 = xyToBarycentric(u_hittestPos, pos0, pos1, pos2);\nvec3 bary5 = xyToBarycentric(u_hittestPos + vec2(u_hittestDist, 0.), pos0, pos1, pos2);\nvec3 bary6 = xyToBarycentric(u_hittestPos + vec2(-u_hittestDist, u_hittestDist), pos0, pos1, pos2);\nvec3 bary7 = xyToBarycentric(u_hittestPos + vec2(0., u_hittestDist), pos0, pos1, pos2);\nvec3 bary8 = xyToBarycentric(u_hittestPos + vec2(u_hittestDist, u_hittestDist), pos0, pos1, pos2);\nvec2 tex0 = a_texCoords  / u_mosaicSize;\nvec2 tex1 = a_texCoords1 / u_mosaicSize;\nvec2 tex2 = a_texCoords2 / u_mosaicSize;\nfloat alphaSum = 0.;\nalphaSum += inTriangle(bary0) * getColor(size, getTextureCoords(bary0, tex0, tex1, tex2)).a;\nalphaSum += inTriangle(bary1) * getColor(size, getTextureCoords(bary1, tex0, tex1, tex2)).a;\nalphaSum += inTriangle(bary2) * getColor(size, getTextureCoords(bary2, tex0, tex1, tex2)).a;\nalphaSum += inTriangle(bary3) * getColor(size, getTextureCoords(bary3, tex0, tex1, tex2)).a;\nalphaSum += inTriangle(bary4) * getColor(size, getTextureCoords(bary4, tex0, tex1, tex2)).a;\nalphaSum += inTriangle(bary5) * getColor(size, getTextureCoords(bary5, tex0, tex1, tex2)).a;\nalphaSum += inTriangle(bary6) * getColor(size, getTextureCoords(bary6, tex0, tex1, tex2)).a;\nalphaSum += inTriangle(bary7) * getColor(size, getTextureCoords(bary7, tex0, tex1, tex2)).a;\nout_pos.z += step(alphaSum, .05) * 2.0;\nout_color = vec4(1. / 255., 0., 0., alphaSum / 255.);\n}\n#endif","icon.frag":"precision mediump float;\n#include <materials/constants.glsl>\n#include <materials/utils.glsl>\n#include <materials/icon/common.glsl>\nvoid main()\n{\n#ifdef HITTEST\nvec4 color = v_color;\n#else\nvec4 color = getColor(v_sizeTex.xy, v_sizeTex.zw);\n#endif\n#ifdef HIGHLIGHT\ncolor.a = step(1.0 / 255.0, color.a);\n#endif\ngl_FragColor = color;\n}","icon.vert":"precision highp float;\nattribute vec4 a_color;\nattribute vec4 a_outlineColor;\nattribute vec4 a_sizeAndOutlineWidth;\nattribute vec2 a_vertexOffset;\nattribute vec2 a_texCoords;\nattribute vec2 a_bitSetAndDistRatio;\nattribute vec2 a_zoomRange;\n#include <materials/vcommon.glsl>\n#include <materials/icon/common.glsl>\n#include <materials/icon/hittest.glsl>\nfloat getMarkerScaleFactor(inout vec2 size, in float referenceSize) {\n#ifdef VV_SIZE\nfloat f = getSize(size.y) / size.y;\nfloat sizeFactor = size.y / referenceSize;\nreturn getSize(referenceSize) / referenceSize;\n#else\nreturn 1.;\n#endif\n}\nvoid main()\n{\nINIT;\nfloat a_bitSet = a_bitSetAndDistRatio.x;\nvec3  pos           = vec3(a_pos * POSITION_PRECISION, 1.0);\nvec2  size          = a_sizeAndOutlineWidth.xy * a_sizeAndOutlineWidth.xy / 128.0;\nvec3  offset        = vec3(a_vertexOffset / 16.0, 0.);\nfloat outlineSize   = a_sizeAndOutlineWidth.z * a_sizeAndOutlineWidth.z / 128.0;\nfloat isMapAligned  = getBit(a_bitSet, BITSET_MARKER_ALIGNMENT_MAP);\nfloat referenceSize = a_sizeAndOutlineWidth.w * a_sizeAndOutlineWidth.w / 128.0;\nfloat scaleSymbolProportionally = getBit(a_bitSet, BITSET_MARKER_SCALE_SYMBOLS_PROPORTIONALLY);\nfloat scaleFactor               = getMarkerScaleFactor(size, referenceSize);\nsize.xy     *= scaleFactor;\noffset.xy   *= scaleFactor;\noutlineSize *= scaleSymbolProportionally * (scaleFactor - 1.0) + 1.0;\nvec2 v_tex   = a_texCoords / u_mosaicSize;\nfloat filterFlags = getFilterFlags();\nv_color    = getColor(a_color, a_bitSet, BITSET_GENERIC_LOCK_COLOR);\nv_opacity  = getOpacity();\nv_id       = norm(a_id);\nv_pos      = u_dvsMat3 * pos + getMatrix(isMapAligned) * getRotation()  * offset;\nv_sizeTex  = vec4(size.xy, v_tex.xy);\n#ifdef SDF\nv_isThin   = getBit(a_bitSet, BITSET_MARKER_OUTLINE_ALLOW_COLOR_OVERRIDE);\n#ifdef VV_COLOR\nv_overridingOutlineColor = v_isThin;\n#else\nv_overridingOutlineColor = 0.0;\n#endif\nv_outlineWidth = min(outlineSize, max(max(size.x, size.y) - 0.99, 0.0));\nv_outlineColor = a_outlineColor;\nv_distRatio = a_bitSetAndDistRatio.y / 128.0;\n#endif\n#ifdef HITTEST\nhighp vec4 out_color = vec4(0.);\nhighp vec3 out_pos   = vec3(0.);\nhittestIcon(out_color, out_pos, pos, offset, size, scaleFactor, isMapAligned);\nv_color = out_color;\ngl_PointSize = 1.;\ngl_Position = vec4(clip(v_color, out_pos, filterFlags, a_zoomRange), 1.0);\n#else\ngl_Position = vec4(clip(v_color, v_pos, filterFlags, a_zoomRange), 1.0);\n#endif\n}"},label:{"common.glsl":"uniform mediump float u_zoomLevel;\nuniform mediump float u_mapRotation;\nuniform mediump float u_mapAligned;\nuniform mediump vec2 u_mosaicSize;\nvarying mediump float v_antialiasingWidth;\nvarying mediump float v_edgeDistanceOffset;\nvarying mediump vec2 v_tex;\nvarying mediump vec4 v_color;\nvarying lowp vec4 v_animation;","label.frag":"#include <materials/text/text.frag>","label.vert":"precision highp float;\n#include <materials/vcommon.glsl>\n#include <materials/text/common.glsl>\nattribute vec4 a_color;\nattribute vec4 a_haloColor;\nattribute vec4 a_texAndSize;\nattribute vec4 a_refSymbolAndPlacementOffset;\nattribute vec4 a_glyphData;\nattribute vec2 a_vertexOffset;\nattribute vec2 a_texCoords;\nuniform float u_isHaloPass;\nuniform float u_isBackgroundPass;\nuniform float u_mapRotation;\nuniform float u_mapAligned;\nfloat getZ(in float minZoom, in float maxZoom, in float angle) {\nfloat glyphAngle = angle * 360.0 / 254.0;\nfloat mapAngle = u_mapRotation * 360.0 / 254.0;\nfloat diffAngle = min(360.0 - abs(mapAngle - glyphAngle), abs(mapAngle - glyphAngle));\nfloat z = 0.0;\nz += u_mapAligned * (2.0 * (1.0 - step(minZoom, u_currentZoom)));\nz += u_mapAligned * 2.0 * step(90.0, diffAngle);\nz += 2.0 * (1.0 - step(u_currentZoom, maxZoom));\nreturn z;\n}\nvoid main()\n{\nINIT;\nfloat groupMinZoom    = getMinZoom();\nfloat glyphMinZoom    = a_glyphData.x;\nfloat glyphMaxZoom    = a_glyphData.y;\nfloat glyphAngle      = a_glyphData.z;\nfloat a_isBackground  = a_glyphData.w;\nfloat a_minZoom          = max(groupMinZoom, glyphMinZoom);\nfloat a_placementPadding = a_refSymbolAndPlacementOffset.x * EXTRUDE_SCALE_PLACEMENT_PADDING;\nvec2  a_placementDir     = unpack_u8_nf32(a_refSymbolAndPlacementOffset.zw);\nfloat a_refSymbolSize    = a_refSymbolAndPlacementOffset.y;\nfloat fontSize           = a_texAndSize.z;\nfloat haloSize           = a_texAndSize.w * OUTLINE_SCALE;\nvec2  vertexOffset = a_vertexOffset * OFFSET_PRECISION;\nvec3  pos          = vec3(a_pos * POSITION_PRECISION, 1.0);\nfloat z            = getZ(a_minZoom, glyphMaxZoom, glyphAngle);\nfloat fontScale    = fontSize / SDF_FONT_SIZE;\nfloat halfSize     = getSize(a_refSymbolSize) / 2.0;\nfloat animation    = pow(getAnimationState(), vec4(2.0)).r;\nfloat isText = 1.0 - a_isBackground;\nfloat isBackground = u_isBackgroundPass * a_isBackground;\nvec4  nonHaloColor = (isBackground + isText) * a_color;\nv_color     = animation * ((1.0 - u_isHaloPass) * nonHaloColor + (u_isHaloPass * a_haloColor));\nv_opacity   = 1.0;\nv_tex       = a_texCoords / u_mosaicSize;\nv_edgeDistanceOffset = u_isHaloPass * haloSize / fontScale / MAX_SDF_DISTANCE;\nv_antialiasingWidth  = 0.105 * SDF_FONT_SIZE / fontSize / u_pixelRatio;\nvec2 placementOffset = a_placementDir * (halfSize + a_placementPadding);\nvec3 glyphOffset     = u_displayMat3 * vec3(vertexOffset + placementOffset, 0.0);\nvec3 v_pos           = vec3((u_dvsMat3 * pos + glyphOffset).xy, z);\nfloat isHidden = u_isBackgroundPass * isText + (1.0 - u_isBackgroundPass) * a_isBackground;\nv_pos.z += 2.0 * isHidden;\ngl_Position = vec4(v_pos, 1.0);\n#ifdef DEBUG\nv_color = vec4(a_color.rgb, z == 0.0 ? 1.0 : 0.645);\n#endif\n}"},line:{"common.glsl":"varying lowp vec4 v_color;\nvarying highp vec3 v_id;\nvarying mediump vec2 v_normal;\nvarying mediump float v_lineHalfWidth;\nvarying lowp float v_opacity;\n#ifdef PATTERN\nvarying mediump vec4 v_tlbr;\nvarying mediump vec2 v_patternSize;\n#endif\n#if defined(PATTERN) || defined(SDF)\nvarying highp float v_accumulatedDistance;\n#endif\n#ifdef SDF\nvarying mediump float v_lineWidthRatio;\n#endif","hittest.glsl":"#include <materials/hittest/common.glsl>\n#ifdef HITTEST\nattribute vec2 a_pos1;\nattribute vec2 a_pos2;\nvoid hittestLine(out lowp vec4 out_color, out highp vec3 out_pos, float halfWidth) {\nvec3 pos        = u_viewMat3 * u_tileMat3 * vec3(a_pos  * POSITION_PRECISION, 1.);\nvec3 pos1       = u_viewMat3 * u_tileMat3 * vec3(a_pos1 * POSITION_PRECISION, 1.);\nvec3 pos2       = u_viewMat3 * u_tileMat3 * vec3(a_pos2 * POSITION_PRECISION, 1.);\nvec3 outTextureCoords = vec3(getAttributeDataTextureCoords(a_id), 0.0);\nfloat dist = min(distPointSegment(u_hittestPos, pos.xy, pos1.xy),\ndistPointSegment(u_hittestPos, pos.xy, pos2.xy)) - halfWidth;\nout_pos = vec3(getAttributeDataTextureCoords(a_id), 0.0);\nif (dist >= u_hittestDist) {\nout_pos.z += 2.0;\n}\nout_color = vec4(1. / 255., 0, 0, dist <= 0. ? (1. / 255.) : 0.);\n}\n#endif","line.frag":"precision lowp float;\n#include <util/encoding.glsl>\n#include <materials/constants.glsl>\n#include <materials/symbologyTypeUtils.glsl>\n#include <materials/line/common.glsl>\n#include <materials/shared/line/common.glsl>\n#include <materials/shared/line/line.frag>\n#ifdef HITTEST\nvoid main() {\ngl_FragColor = v_color;\n}\n#else\nvoid main() {\nLineData inputs = LineData(\nv_color,\nv_normal,\nv_lineHalfWidth,\nv_opacity,\n#ifndef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\n#ifdef PATTERN\nv_tlbr,\nv_patternSize,\n#endif\n#ifdef SDF\nv_lineWidthRatio,\n#endif\n#if defined(PATTERN) || defined(SDF)\nv_accumulatedDistance,\n#endif\n#endif\nv_id\n);\ngl_FragColor = shadeLine(inputs);\n}\n#endif","line.vert":"precision highp float;\nattribute vec4 a_color;\nattribute vec4 a_offsetAndNormal;\nattribute vec2 a_accumulatedDistanceAndHalfWidth;\nattribute vec4 a_tlbr;\nattribute vec4 a_segmentDirection;\nattribute vec2 a_aux;\nattribute vec2 a_zoomRange;\n#include <materials/vcommon.glsl>\n#include <materials/symbologyTypeUtils.glsl>\n#include <materials/line/common.glsl>\n#include <materials/line/hittest.glsl>\n#include <materials/shared/line/common.glsl>\n#include <materials/shared/line/line.vert>\n#ifdef HITTEST\nvoid draw() {\nfloat aa        = 0.5 * u_antialiasing;\nfloat a_halfWidth = a_accumulatedDistanceAndHalfWidth.y / 16.;\nfloat a_cimHalfWidth = a_aux.x / 16. ;\nvec2  a_offset = a_offsetAndNormal.xy / 16.;\nfloat baseWidth = getBaseLineHalfWidth(a_halfWidth, a_cimHalfWidth);\nfloat halfWidth = getLineHalfWidth(baseWidth, aa);\nhighp vec3 pos  = vec3(0.);\nv_color = vec4(0.);\nhittestLine(v_color, pos, halfWidth);\ngl_PointSize = 1.;\ngl_Position = vec4(clip(v_color, pos, getFilterFlags(), a_zoomRange), 1.0);\n}\n#else\nvoid draw()\n{\nhighp vec3 pos = vec3(0.);\nLineData outputs = buildLine(\npos,\na_id,\na_pos,\na_color,\na_offsetAndNormal.xy / 16.,\na_offsetAndNormal.zw / 16.,\na_accumulatedDistanceAndHalfWidth.x,\na_accumulatedDistanceAndHalfWidth.y / 16.,\na_segmentDirection.w,\na_tlbr,\na_segmentDirection.xy / 16.,\na_aux.x / 16.\n);\nv_id              = outputs.id;\nv_color           = outputs.color;\nv_normal          = outputs.normal;\nv_lineHalfWidth   = outputs.lineHalfWidth;\nv_opacity         = outputs.opacity;\n#ifndef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\n#ifdef PATTERN\nv_tlbr          = outputs.tlbr;\nv_patternSize   = outputs.patternSize;\n#endif\n#ifdef SDF\nv_lineWidthRatio = outputs.lineWidthRatio;\n#endif\n#if defined(PATTERN) || defined(SDF)\nv_accumulatedDistance = outputs.accumulatedDistance;\n#endif\n#endif\ngl_Position = vec4(clip(outputs.color, pos, getFilterFlags(), a_zoomRange), 1.0);\n}\n#endif\nvoid main() {\nINIT;\ndraw();\n}"},pie:{"pie.common.glsl":"uniform float outlineWidth;\nuniform mediump float sectorThreshold;\nvarying vec3  v_id;\nvarying vec3  v_pos;\nvarying vec2  v_offset;\nvarying vec4  v_color;\nvarying float v_size;\nvarying float v_numOfEntries;\nvarying float v_maxSectorAngle;\nvarying vec2  v_filteredSectorToColorId[numberOfFields];\nvarying vec2  v_texCoords;\nvarying float v_outlineWidth;\nvarying float v_opacity;\nstruct FilteredChartInfo {\nfloat endSectorAngle;\nint colorId;\n};","pie.frag":"precision highp float;\n#include <util/atan2.glsl>\n#include <materials/constants.glsl>\n#include <materials/utils.glsl>\n#include <materials/pie/pie.common.glsl>\nuniform lowp vec4 colors[numberOfFields];\nuniform lowp vec4 defaultColor;\nuniform lowp vec4 othersColor;\nuniform lowp vec4 outlineColor;\nuniform float donutRatio;\nlowp vec4 getSectorColor(in int index, in vec2 filteredSectorToColorId[numberOfFields]) {\nmediump int colorIndex = int(filteredSectorToColorId[index].y);\nreturn colors[colorIndex];\n}\nconst int OTHER_SECTOR_ID = 255;\n#ifdef HITTEST\nvec4 getColor() {\nfloat distanceSize = length(v_offset) * v_size;\nfloat donutSize = donutRatio * v_size;\nfloat alpha = step(donutSize, distanceSize) * (1.0 - step(v_size, distanceSize));\nreturn v_color;\n}\n#else\nvec4 getColor() {\nfloat angle = 90.0 - C_RAD_TO_DEG * atan2(v_offset.y, v_offset.x);\nif (angle < 0.0) {\nangle += 360.0;\n} else if (angle > 360.0) {\nangle = mod(angle, 360.0);\n}\nint numOfEntries = int(v_numOfEntries);\nfloat maxSectorAngle = v_maxSectorAngle;\nlowp vec4 fillColor = (maxSectorAngle > 0.0 || sectorThreshold > 0.0) ? othersColor : defaultColor;\nlowp vec4 prevColor = vec4(0.0);\nlowp vec4 nextColor = vec4(0.0);\nfloat startSectorAngle = 0.0;\nfloat endSectorAngle = 0.0;\nif (angle < maxSectorAngle) {\nfor (int index = 0; index < numberOfFields; ++index) {\nstartSectorAngle = endSectorAngle;\nendSectorAngle = v_filteredSectorToColorId[index].x;\nif (endSectorAngle > angle) {\nfillColor = getSectorColor(index, v_filteredSectorToColorId);\nprevColor = sectorThreshold != 0.0 && index == 0 && abs(360.0 - maxSectorAngle) < EPSILON ? othersColor :\ngetSectorColor(index > 0 ? index - 1 : numOfEntries - 1, v_filteredSectorToColorId);\nnextColor = sectorThreshold != 0.0 && abs(endSectorAngle - maxSectorAngle) < EPSILON ? othersColor :\ngetSectorColor(index < numOfEntries - 1 ? index + 1 : 0, v_filteredSectorToColorId);\nbreak;\n}\nif (index == numOfEntries - 1) {\nbreak;\n}\n}\n} else {\nprevColor = getSectorColor(numOfEntries - 1, v_filteredSectorToColorId);\nnextColor = getSectorColor(0, v_filteredSectorToColorId);\nstartSectorAngle = maxSectorAngle;\nendSectorAngle = 360.0;\n}\nlowp vec4 outlineColor = outlineColor;\nfloat offset = length(v_offset);\nfloat distanceSize = offset * v_size;\nif (startSectorAngle != 0.0 || endSectorAngle != 360.0) {\nfloat distanceToStartSector = (angle - startSectorAngle);\nfloat distanceToEndSector = (endSectorAngle - angle);\nfloat sectorThreshold = 0.6;\nfloat beginSectorAlpha = smoothstep(0.0, sectorThreshold, distanceToStartSector * offset);\nfloat endSectorAlpha = smoothstep(0.0, sectorThreshold, distanceToEndSector * offset);\nif (endSectorAlpha > 0.0) {\nfillColor = mix(nextColor, fillColor, endSectorAlpha);\n} else if (beginSectorAlpha > 0.0) {\nfillColor = mix(prevColor, fillColor, beginSectorAlpha);\n}\n}\nfloat donutSize = donutRatio * (v_size - v_outlineWidth);\nfloat endOfDonut = donutSize - v_outlineWidth;\nfloat aaThreshold = 0.75;\nfloat innerCircleAlpha = endOfDonut - aaThreshold > 0.0 ? smoothstep(endOfDonut - aaThreshold, endOfDonut + aaThreshold, distanceSize) : 1.0;\nfloat outerCircleAlpha = 1.0 - smoothstep(v_size - aaThreshold, v_size + aaThreshold , distanceSize);\nfloat circleAlpha = innerCircleAlpha * outerCircleAlpha;\nfloat startOfOutline = v_size - v_outlineWidth;\nif (startOfOutline > 0.0 && v_outlineWidth > 0.25) {\nfloat outlineFactor = smoothstep(startOfOutline - aaThreshold, startOfOutline + aaThreshold, distanceSize);\nfloat innerLineFactor = donutSize - aaThreshold > 0.0 ? 1.0 - smoothstep(donutSize - aaThreshold, donutSize + aaThreshold , distanceSize) : 0.0;\nfillColor = mix(fillColor, outlineColor, innerLineFactor + outlineFactor);\n}\nreturn v_opacity * circleAlpha * fillColor;\n}\n#endif\nvoid main()\n{\nvec4 color = getColor();\n#ifdef highlight\ncolor.a = step(1.0 / 255.0, color.a);\n#endif\ngl_FragColor = color;\n}","pie.vert":"#include <materials/constants.glsl>\n#include <materials/utils.glsl>\n#include <materials/barycentric.glsl>\n#include <materials/vcommon.glsl>\n#include <materials/vv.glsl>\n#include <materials/attributeData.glsl>\n#include <materials/pie/pie.common.glsl>\n#include <materials/hittest/common.glsl>\nattribute float a_bitSet;\nattribute vec2  a_offset;\nattribute vec2  a_texCoords;\nattribute vec2  a_size;\nattribute float a_referenceSize;\nattribute vec2  a_zoomRange;\nint filterValue(in float sectorAngle,\nin int currentIndex,\ninout FilteredChartInfo filteredInfo,\ninout vec2 filteredSectorToColorId[numberOfFields]) {\nif (sectorAngle > sectorThreshold * 360.0) {\nfilteredInfo.endSectorAngle += sectorAngle;\nfilteredSectorToColorId[filteredInfo.colorId] = vec2(filteredInfo.endSectorAngle, currentIndex);\n++filteredInfo.colorId;\n}\nreturn 0;\n}\nint filterValues(inout vec2 filteredSectorToColorId[numberOfFields],\ninout FilteredChartInfo filteredInfo,\nin float sectorAngles[numberOfFields]) {\nfor (int index = 0; index < numberOfFields; ++index) {\nfloat sectorValue = sectorAngles[index];\nfilterValue(sectorValue, index, filteredInfo, filteredSectorToColorId);\n}\nreturn filteredInfo.colorId;\n}\nvec2 getMarkerSize(inout vec2 offset, inout vec2 baseSize, inout float outlineSize, in float a_referenceSize, in float bitSet) {\nvec2 outSize = baseSize;\n#ifdef VV_SIZE\nfloat r = getSize(a_referenceSize, currentScale) / a_referenceSize;\noutSize.xy *= r;\noffset.xy *= r;\nfloat scaleSymbolProportionally = getBit(bitSet, BITSET_MARKER_SCALE_SYMBOLS_PROPORTIONALLY);\noutlineSize *= scaleSymbolProportionally * (r - 1.0) + 1.0;\n#endif\nreturn outSize;\n}\nvec3 getOffset(in vec2 in_offset, float a_bitSet) {\nfloat isMapAligned = getBit(a_bitSet, BITSET_MARKER_ALIGNMENT_MAP);\nvec3  offset       = vec3(in_offset, 0.0);\nreturn getMatrix(isMapAligned) * offset;\n}\nfloat filterNaNValues(in float value) {\nreturn value != NAN_MAGIC_NUMBER && value > 0.0 ? value : 0.0;\n}\nvoid main()\n{\nINIT;\nvec2  a_size   = a_size;\nvec2  a_offset = a_offset / 16.0;\nfloat outlineSize = outlineWidth;\nfloat a_bitSet = a_bitSet;\nfloat a_referenceSize = a_referenceSize;\nvec2 a_texCoords = a_texCoords / 4.0;\nvec2 markerSize = getMarkerSize(a_offset, a_size, outlineSize, a_referenceSize, a_bitSet);\nfloat filterFlags = getFilterFlags();\nvec3  pos         = vec3(a_pos / 10.0, 1.0);\nv_opacity      = getOpacity();\nv_id           = norm(a_id);\nv_pos          = displayViewScreenMat3 * pos + getOffset(a_offset, a_bitSet);\nv_offset       = sign(a_texCoords - 0.5);\nv_size         = max(markerSize.x, markerSize.y);\nv_outlineWidth = outlineSize;\nfloat attributeData[10];\nvec4 attributeData3 = getDataDriven0(a_id);\nattributeData[0] = filterNaNValues(attributeData3.x);\nattributeData[1] = filterNaNValues(attributeData3.y);\nattributeData[2] = filterNaNValues(attributeData3.z);\nattributeData[3] = filterNaNValues(attributeData3.w);\n#if (numberOfFields > 4)\nvec4 attributeData4 = getDataDriven1(a_id);\nattributeData[4] = filterNaNValues(attributeData4.x);\nattributeData[5] = filterNaNValues(attributeData4.y);\nattributeData[6] = filterNaNValues(attributeData4.z);\nattributeData[7] = filterNaNValues(attributeData4.w);\n#endif\n#if (numberOfFields > 8)\nvec4 attributeData5 = getDataDriven2(a_id);\nattributeData[8] = filterNaNValues(attributeData5.x);\nattributeData[9] = filterNaNValues(attributeData5.y);\n#endif\nfloat sum = 0.0;\nfor (int i = 0; i < numberOfFields; ++i) {\nsum += attributeData[i];\n}\nfloat sectorAngles[numberOfFields];\nfor (int i = 0; i < numberOfFields; ++i) {\nsectorAngles[i] = 360.0 * attributeData[i] / sum;\n}\nvec2 filteredSectorToColorId[numberOfFields];\nFilteredChartInfo filteredInfo = FilteredChartInfo(0.0, 0);\nint numOfEntries = filterValues(filteredSectorToColorId, filteredInfo, sectorAngles);\nv_numOfEntries = float(numOfEntries);\nv_maxSectorAngle = filteredInfo.endSectorAngle;\nv_filteredSectorToColorId = filteredSectorToColorId;\n#ifdef HITTEST\nhighp vec3 out_pos = vec3(0.0);\nv_color            = vec4(0.0);\nhittestMarker(v_color, out_pos, viewMat3 * tileMat3 *  pos, v_size);\ngl_PointSize = 1.0;\ngl_Position = vec4(clip(v_color, out_pos, filterFlags, a_zoomRange), 1.0);\n#else\ngl_Position = vec4(clip(v_color, v_pos, filterFlags, a_zoomRange), 1.0);\n#endif\n}"},shared:{line:{"common.glsl":"#if !defined(SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE) && defined(PATTERN)\nuniform mediump vec2 u_mosaicSize;\nvarying mediump float v_sampleAlphaOnly;\n#endif\nstruct LineData {\nlowp vec4 color;\nmediump vec2 normal;\nmediump float lineHalfWidth;\nlowp float opacity;\n#ifndef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\n#ifdef PATTERN\nmediump vec4 tlbr;\nmediump vec2 patternSize;\n#endif\n#ifdef SDF\nmediump float lineWidthRatio;\n#endif\n#if defined(PATTERN) || defined(SDF)\nhighp float accumulatedDistance;\n#endif\n#endif\nhighp vec3 id;\n};","line.frag":"uniform lowp float u_blur;\n#if !defined(SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE) && !defined(HIGHLIGHT)\n#if defined(PATTERN) || defined(SDF)\nuniform sampler2D u_texture;\nuniform highp float u_pixelRatio;\n#endif\n#endif\n#if defined(SDF) && !defined(HIGHLIGHT) && !defined(SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE)\nlowp vec4 getLineColor(LineData line) {\nmediump float adjustedPatternWidth = line.patternSize.x * 2.0 * line.lineWidthRatio;\nmediump float relativeTexX = fract(line.accumulatedDistance / adjustedPatternWidth);\nmediump float relativeTexY = 0.5 + 0.25 * line.normal.y;\nmediump vec2 texCoord = mix(line.tlbr.xy, line.tlbr.zw, vec2(relativeTexX, relativeTexY));\nmediump float d = rgba2float(texture2D(u_texture, texCoord)) - 0.5;\nfloat dist = d * line.lineHalfWidth;\nreturn line.opacity * clamp(0.5 - dist, 0.0, 1.0) * line.color;\n}\n#elif defined(PATTERN) && !defined(HIGHLIGHT) && !defined(SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE)\nlowp vec4 getLineColor(LineData line) {\nmediump float lineHalfWidth = line.lineHalfWidth;\nmediump float adjustedPatternHeight = line.patternSize.y * 2.0 * lineHalfWidth / line.patternSize.x;\nmediump float relativeTexY = fract(line.accumulatedDistance / adjustedPatternHeight);\nmediump float relativeTexX = 0.5 + 0.5 * line.normal.y;\nmediump vec2 texCoord = mix(line.tlbr.xy, line.tlbr.zw, vec2(relativeTexX, relativeTexY));\nlowp vec4 color = texture2D(u_texture, texCoord);\n#ifdef VV_COLOR\nif (v_sampleAlphaOnly > 0.5) {\ncolor.rgb = vec3(color.a);\n}\n#endif\nreturn line.opacity * line.color * color;\n}\n#else\nlowp vec4 getLineColor(LineData line) {\nreturn line.opacity * line.color;\n}\n#endif\nvec4 shadeLine(LineData line)\n{\nmediump float thinLineFactor = max(THIN_LINE_WIDTH_FACTOR * step(line.lineHalfWidth, THIN_LINE_HALF_WIDTH), 1.0);\nmediump float fragDist = length(line.normal) * line.lineHalfWidth;\nlowp float alpha = clamp(thinLineFactor * (line.lineHalfWidth - fragDist) / (u_blur + thinLineFactor - 1.0), 0.0, 1.0);\nlowp vec4 out_color = getLineColor(line) * alpha;\n#ifdef HIGHLIGHT\nout_color.a = step(1.0 / 255.0, out_color.a);\n#endif\n#ifdef ID\nif (out_color.a < 1.0 / 255.0) {\ndiscard;\n}\nout_color = vec4(line.id, 0.0);\n#endif\nreturn out_color;\n}","line.vert":"float getBaseLineHalfWidth(in float lineHalfWidth, in float referenceHalfWidth) {\n#ifdef VV_SIZE\nfloat refLineWidth = 2.0 * referenceHalfWidth;\nreturn 0.5 * (lineHalfWidth / max(referenceHalfWidth, EPSILON)) * getSize(refLineWidth);\n#else\nreturn lineHalfWidth;\n#endif\n}\nfloat getLineHalfWidth(in float baseWidth, in float aa) {\nfloat halfWidth = max(baseWidth + aa, 0.45) + 0.1 * aa;\n#ifdef HIGHLIGHT\nhalfWidth = max(halfWidth, 2.0);\n#endif\nreturn halfWidth;\n}\nvec2 getDist(in vec2 offset, in float halfWidth) {\nfloat thinLineFactor = max(THIN_LINE_WIDTH_FACTOR * step(halfWidth, THIN_LINE_HALF_WIDTH), 1.0);\nreturn thinLineFactor * halfWidth * offset;\n}\nLineData buildLine(\nout vec3 out_pos,\nin vec3 in_id,\nin vec2 in_pos,\nin vec4 in_color,\nin vec2 in_offset,\nin vec2 in_normal,\nin float in_accumulatedDist,\nin float in_lineHalfWidth,\nin float in_bitSet,\nin vec4 in_tlbr,\nin vec2 in_segmentDirection,\nin float in_referenceHalfWidth\n)\n{\nfloat aa        = 0.5 * u_antialiasing;\nfloat baseWidth = getBaseLineHalfWidth(in_lineHalfWidth, in_referenceHalfWidth);\nfloat halfWidth = getLineHalfWidth(baseWidth, aa);\nfloat z         = 2.0 * step(baseWidth, 0.0);\nvec2  dist      = getDist(in_offset, halfWidth);\nvec3  offset    = u_displayViewMat3 * vec3(dist, 0.0);\nvec3  pos       = u_dvsMat3 * vec3(in_pos * POSITION_PRECISION, 1.0) + offset;\n#ifdef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\nvec4  color     = in_color;\nfloat opacity   = 1.0;\n#else\nvec4  color     = getColor(in_color, in_bitSet, BITSET_GENERIC_LOCK_COLOR);\nfloat opacity   = getOpacity();\n#ifdef SDF\nconst float SDF_PATTERN_HALF_WIDTH = 15.5;\nfloat scaleDash = getBit(in_bitSet, BITSET_LINE_SCALE_DASH);\nfloat lineWidthRatio = (scaleDash * max(halfWidth - 0.55 * u_antialiasing, 0.25) + (1.0 - scaleDash)) / SDF_PATTERN_HALF_WIDTH;\n#endif\n#endif\n#if !defined(SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE) && defined(PATTERN)\nv_sampleAlphaOnly = getBit(in_bitSet, BITSET_GENERIC_CONSIDER_ALPHA_ONLY);\n#endif\nout_pos = vec3(pos.xy, z);\nreturn LineData(\ncolor,\nin_normal,\nhalfWidth,\nopacity,\n#ifndef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\n#ifdef PATTERN\nin_tlbr / u_mosaicSize.xyxy,\nvec2(in_tlbr.z - in_tlbr.x, in_tlbr.w - in_tlbr.y),\n#endif\n#ifdef SDF\nlineWidthRatio,\n#endif\n#if defined(PATTERN) || defined(SDF)\nin_accumulatedDist * u_zoomFactor + dot(in_segmentDirection, dist),\n#endif\n#endif\nnorm(in_id)\n);\n}"}},"symbologyTypeUtils.glsl":"#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_OUTLINE_FILL || SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_OUTLINE_FILL_SIMPLE\n#define SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\n#endif\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_SIMPLE || SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_OUTLINE_FILL_SIMPLE\n#define SYMBOLOGY_TYPE_IS_SIMPLE_LIKE\n#endif",text:{"common.glsl":"uniform highp vec2 u_mosaicSize;\nvarying highp vec3 v_id;\nvarying mediump vec3 v_pos;\nvarying lowp float v_opacity;\nvarying lowp vec4 v_color;\nvarying highp vec2 v_tex;\nvarying mediump float v_antialiasingWidth;\nvarying mediump float v_edgeDistanceOffset;\nvarying lowp float v_transparency;","hittest.glsl":"#include <materials/hittest/common.glsl>","text.frag":"precision mediump float;\n#include <materials/text/common.glsl>\nuniform lowp sampler2D u_texture;\n#ifdef HITTEST\nvec4 getColor() {\nreturn v_color;\n}\n#else\nvec4 getColor()\n{\nfloat SDF_CUTOFF = (2.0 / 8.0);\nfloat SDF_BASE_EDGE_DIST = 1.0 - SDF_CUTOFF;\nlowp float dist = texture2D(u_texture, v_tex).a;\nmediump float edge = SDF_BASE_EDGE_DIST - v_edgeDistanceOffset;\n#ifdef HIGHLIGHT\nedge /= 2.0;\n#endif\nlowp float aa = v_antialiasingWidth;\nlowp float alpha = smoothstep(edge - aa, edge + aa, dist);\nreturn alpha * v_color * v_opacity;\n}\n#endif\nvoid main()\n{\ngl_FragColor = getColor();\n}","text.vert":"precision highp float;\n#include <materials/utils.glsl>\n#include <materials/vcommon.glsl>\n#include <materials/text/common.glsl>\n#include <materials/text/hittest.glsl>\nattribute vec4 a_color;\nattribute vec4 a_haloColor;\nattribute vec4 a_texFontSize;\nattribute vec4 a_aux;\nattribute vec2 a_zoomRange;\nattribute vec2 a_vertexOffset;\nattribute vec2 a_texCoords;\nuniform float u_isHaloPass;\nuniform float u_isBackgroundPass;\nfloat getTextSize(inout vec2 offset, inout float baseSize, in float referenceSize) {\n#ifdef VV_SIZE\nfloat r = getSize(referenceSize) / referenceSize;\nbaseSize *= r;\noffset.xy *= r;\nreturn baseSize;\n#endif\nreturn baseSize;\n}\nvoid main()\n{\nINIT;\nfloat a_isBackground  = a_aux.y;\nfloat a_referenceSize = a_aux.z * a_aux.z / 256.0;\nfloat a_bitSet        = a_aux.w;\nfloat a_fontSize      = a_texFontSize.z;\nvec2  a_offset        = a_vertexOffset * OFFSET_PRECISION;\nvec3  in_pos        = vec3(a_pos * POSITION_PRECISION, 1.0);\nfloat fontSize      = getTextSize(a_offset, a_fontSize, a_referenceSize);\nfloat fontScale     = fontSize / SDF_FONT_SIZE;\nvec3  offset        = getRotation() * vec3(a_offset, 0.0);\nmat3  extrudeMatrix = getBit(a_bitSet, 0) == 1.0 ? u_displayViewMat3 : u_displayMat3;\nfloat isText = 1.0 - a_isBackground;\nfloat isBackground = u_isBackgroundPass * a_isBackground;\nvec4  nonHaloColor  = (isBackground * a_color) + (isText * getColor(a_color, a_bitSet, 1));\nv_color   = u_isHaloPass * a_haloColor + (1.0 - u_isHaloPass) * nonHaloColor;\nv_opacity = getOpacity();\nv_id      = norm(a_id);\nv_tex     = a_texCoords / u_mosaicSize;\nv_pos     = u_dvsMat3 * in_pos + extrudeMatrix * offset;\nfloat isHidden = u_isBackgroundPass * isText + (1.0 - u_isBackgroundPass) * a_isBackground;\nv_pos.z += 2.0 * isHidden;\nv_edgeDistanceOffset = u_isHaloPass * OUTLINE_SCALE * a_texFontSize.w / fontScale / MAX_SDF_DISTANCE;\nv_antialiasingWidth  = 0.105 * SDF_FONT_SIZE / fontSize / u_pixelRatio;\n#ifdef HITTEST\nhighp vec3 out_pos  = vec3(0.);\nv_color = vec4(0.);\nhittestMarker(v_color, out_pos, u_viewMat3 * u_tileMat3 *  vec3(a_pos * POSITION_PRECISION, 1.0)\n+ u_tileMat3 * offset, fontSize / 2.);\ngl_PointSize = 1.;\ngl_Position = vec4(clip(v_color, out_pos, getFilterFlags(), a_zoomRange), 1.0);\n#else\ngl_Position =  vec4(clip(v_color, v_pos, getFilterFlags(), a_zoomRange), 1.0);\n#endif\n}"},"utils.glsl":"float rshift(in float u32, in int amount) {\nreturn floor(u32 / pow(2.0, float(amount)));\n}\nfloat getBit(in float bitset, in int bitIndex) {\nfloat offset = pow(2.0, float(bitIndex));\nreturn mod(floor(bitset / offset), 2.0);\n}\nconst int maxHighlightReasons = 6;\nfloat getFilterBit(in float bitset, in int bitIndex) {\nreturn getBit(bitset, bitIndex + maxHighlightReasons);\n}\nfloat getHighlightBit(in float bitset, in int bitIndex) {\nreturn getBit(bitset, bitIndex);\n}\nhighp vec3 unpackDisplayIdTexel(in highp vec3 bitset) {\nfloat isAggregate = getBit(bitset.b, 7);\nreturn (1.0 - isAggregate) * bitset + isAggregate * (vec3(bitset.rgb) - vec3(0.0, 0.0, float(0x80)));\n}\nvec4 unpack(in float u32) {\nfloat r = mod(rshift(u32, 0), 255.0);\nfloat g = mod(rshift(u32, 8), 255.0);\nfloat b = mod(rshift(u32, 16), 255.0);\nfloat a = mod(rshift(u32, 24), 255.0);\nreturn vec4(r, g, b, a);\n}\nvec3 norm(in vec3 v) {\nreturn v /= 255.0;\n}\nvec4 norm(in vec4 v) {\nreturn v /= 255.0;\n}\nfloat max4(vec4 target) {\nreturn max(max(max(target.x, target.y), target.z), target.w);\n}\nvec2 unpack_u8_nf32(vec2 bytes) {\nreturn (bytes - 127.0) / 127.0;\n}\nhighp float rand(in vec2 co) {\nhighp float a = 12.9898;\nhighp float b = 78.233;\nhighp float c = 43758.5453;\nhighp float dt = dot(co, vec2(a,b));\nhighp float sn = mod(dt, 3.14);\nreturn fract(sin(sn) * c);\n}","vcommon.glsl":"#include <materials/constants.glsl>\n#include <materials/utils.glsl>\n#include <materials/attributeData.glsl>\n#include <materials/vv.glsl>\n#include <materials/barycentric.glsl>\nattribute vec2 a_pos;\nattribute highp vec3 a_id;\nuniform highp mat3 displayViewScreenMat3;\nuniform highp mat3 displayViewMat3;\nuniform highp mat3 displayMat3;\nuniform highp mat3 tileMat3;\nuniform highp mat3 viewMat3;\nuniform highp float pixelRatio;\nuniform mediump float zoomFactor;\nuniform mediump float antialiasing;\nuniform mediump float currentScale;\nuniform mediump float currentZoom;\nuniform mediump float metersPerSRUnit;\nvec4 VV_ADATA = vec4(0.0);\nvoid loadVisualVariableData(inout vec4 target) {\ntarget.rgba = getVisualVariableData(a_id);\n}\n#ifdef VV\n#define INIT loadVisualVariableData(VV_ADATA)\n#else\n#define INIT\n#endif\nvec4 getColor(in vec4 a_color, in float a_bitSet, int index) {\n#ifdef VV_COLOR\nfloat isColorLocked   = getBit(a_bitSet, index);\nreturn getVVColor(VV_ADATA[ATTR_VV_COLOR], a_color, isColorLocked);\n#else\nreturn a_color;\n#endif\n}\nfloat getOpacity() {\n#ifdef VV_OPACITY\nreturn getVVOpacity(VV_ADATA[ATTR_VV_OPACITY]);\n#else\nreturn 1.0;\n#endif\n}\nfloat getSize(in float in_size, in float currentScale) {\n#ifdef VV_SIZE\nreturn getVVSize(in_size, VV_ADATA[ATTR_VV_SIZE], currentScale);\n#else\nreturn in_size;\n#endif\n}\nmat3 getRotation() {\n#ifdef VV_ROTATION\nreturn getVVRotationMat3(mod(VV_ADATA[ATTR_VV_ROTATION], 360.0));\n#else\nreturn mat3(1.0);\n#endif\n}\nfloat getFilterFlags() {\n#ifdef IGNORES_SAMPLER_PRECISION\nreturn ceil(getFilterData(a_id).x * 255.0);\n#else\nreturn getFilterData(a_id).x * 255.0;\n#endif\n}\nvec4 getAnimationState() {\nreturn getAnimation(a_id);\n}\nfloat getMinZoom() {\nvec4 data0 = getFilterData(a_id) * 255.0;\nreturn data0.g;\n}\nmat3 getMatrixNoDisplay(float isMapAligned) {\nreturn isMapAligned * viewMat3 * tileMat3 + (1.0 - isMapAligned) * tileMat3;\n}\nmat3 getMatrix(float isMapAligned) {\nreturn isMapAligned * displayViewMat3 + (1.0 - isMapAligned) * displayMat3;\n}\nfloat checkHighlightBit(float filterFlags, int index) {\nreturn getHighlightBit(filterFlags, index);\n}\nfloat checkHighlight(float filterFlags) {\nfloat result = checkHighlightBit(filterFlags, 0);\nfor (int i = 1; i < maxHighlightReasons; i++) {\nresult = result + checkHighlightBit(filterFlags, i);\n}\nreturn step(0.1, result);\n}\nvec3 clip(inout vec4 color, inout vec3 pos, in float filterFlags, in vec2 minMaxZoom) {\npos.z += 2.0 * (1.0 - getFilterBit(filterFlags, 0));\n#ifdef inside\npos.z += 2.0 * (1.0 - getFilterBit(filterFlags, 1));\n#elif defined(outside)\npos.z += 2.0 * getFilterBit(filterFlags, 1);\n#elif defined(highlight)\n#if !defined(highlight_all)\npos.z += 2.0 * (1.0 - checkHighlight(filterFlags));\n#endif\n#endif\npos.z += 2.0 * (step(minMaxZoom.y, currentZoom) + (1.0 - step(minMaxZoom.x, currentZoom)));\nreturn pos;\n}","vv.glsl":"#if defined(VV_SIZE_MIN_MAX_VALUE) || defined(VV_SIZE_SCALE_STOPS) || defined(VV_SIZE_FIELD_STOPS) || defined(VV_SIZE_UNIT_VALUE)\n#define VV_SIZE\n#endif\n#if defined(VV_COLOR) || defined(VV_SIZE) || defined(VV_OPACITY) || defined(VV_ROTATION)\n#define VV\n#endif\n#ifdef VV_COLOR\nuniform highp float colorValues[8];\nuniform vec4 colors[8];\n#endif\n#ifdef VV_SIZE_MIN_MAX_VALUE\nuniform highp vec4 minMaxValueAndSize;\n#endif\n#ifdef VV_SIZE_SCALE_STOPS\nuniform highp float values[8];\nuniform float sizes[8];\n#endif\n#ifdef VV_SIZE_FIELD_STOPS\nuniform highp float values[8];\nuniform float sizes[8];\n#endif\n#ifdef VV_SIZE_UNIT_VALUE\nuniform highp float unitMeterRatio;\n#endif\n#ifdef VV_OPACITY\nuniform highp float opacityValues[8];\nuniform float opacities[8];\n#endif\n#ifdef VV_ROTATION\nuniform lowp float rotationType;\n#endif\nbool isNan(float val) {\nreturn (val == NAN_MAGIC_NUMBER);\n}\n#ifdef VV_SIZE_MIN_MAX_VALUE\nfloat getVVMinMaxSize(float sizeValue, float fallback) {\nif (isNan(sizeValue)) {\nreturn fallback;\n}\nfloat interpolationRatio = (sizeValue  - minMaxValueAndSize.x) / (minMaxValueAndSize.y - minMaxValueAndSize.x);\ninterpolationRatio = clamp(interpolationRatio, 0.0, 1.0);\nreturn minMaxValueAndSize.z + interpolationRatio * (minMaxValueAndSize.w - minMaxValueAndSize.z);\n}\n#endif\n#ifdef VV_SIZE_SCALE_STOPS\nfloat getVVScaleStopsSize(float currentScale) {\nfloat outSize;\nif (currentScale <= values[0]) {\noutSize = sizes[0];\n} else {\nif (currentScale >= values[7]) {\noutSize = sizes[7];\n} else {\nint index;\nindex = -1;\nfor (int i = 0; i < 8; i++) {\nif (values[i] > currentScale) {\nindex = i;\nbreak;\n}\n}\nint prevIndex = index - 1;\nfloat a = currentScale - values[prevIndex];\nfloat b = values[index] - values[prevIndex];\noutSize = mix(sizes[prevIndex], sizes[index], a / b);\n}\n}\nreturn outSize;\n}\n#endif\n#ifdef VV_SIZE_FIELD_STOPS\nconst int VV_SIZE_N = 8;\nfloat getVVStopsSize(float sizeValue, float fallback) {\nif (isNan(sizeValue)) {\nreturn fallback;\n}\nif (sizeValue <= values[0]) {\nreturn sizes[0];\n}\nif (sizeValue >= values[VV_SIZE_N - 1]) {\nreturn sizes[VV_SIZE_N - 1];\n}\nfor (int i = 1; i < VV_SIZE_N; ++i) {\nif (values[i] >= sizeValue) {\nfloat f = (sizeValue - values[i-1]) / (values[i] - values[i-1]);\nreturn mix(sizes[i-1], sizes[i], f);\n}\n}\nreturn sizes[VV_SIZE_N - 1];\n}\n#endif\n#ifdef VV_SIZE_UNIT_VALUE\nfloat getVVUnitValue(float sizeValue, float fallback) {\nif (isNan(sizeValue)) {\nreturn fallback;\n}\nreturn sizeValue * (metersPerSRUnit / unitMeterRatio);\n}\n#endif\n#ifdef VV_OPACITY\nconst int VV_OPACITY_N = 8;\nfloat getVVOpacity(float opacityValue) {\nif (isNan(opacityValue)) {\nreturn 1.0;\n}\nif (opacityValue <= opacityValues[0]) {\nreturn opacities[0];\n}\nfor (int i = 1; i < VV_OPACITY_N; ++i) {\nif (opacityValues[i] >= opacityValue) {\nfloat f = (opacityValue - opacityValues[i-1]) / (opacityValues[i] - opacityValues[i-1]);\nreturn mix(opacities[i-1], opacities[i], f);\n}\n}\nreturn opacities[VV_OPACITY_N - 1];\n}\n#endif\n#ifdef VV_ROTATION\nmat4 getVVRotation(float rotationValue) {\nif (isNan(rotationValue)) {\nreturn mat4(1, 0, 0, 0,\n0, 1, 0, 0,\n0, 0, 1, 0,\n0, 0, 0, 1);\n}\nfloat rotation = rotationValue;\nif (rotationType == 1.0) {\nrotation = 90.0 - rotation;\n}\nfloat angle = C_DEG_TO_RAD * rotation;\nfloat sinA = sin(angle);\nfloat cosA = cos(angle);\nreturn mat4(cosA, sinA, 0, 0,\n-sinA,  cosA, 0, 0,\n0,     0, 1, 0,\n0,     0, 0, 1);\n}\nmat3 getVVRotationMat3(float rotationValue) {\nif (isNan(rotationValue)) {\nreturn mat3(1, 0, 0,\n0, 1, 0,\n0, 0, 1);\n}\nfloat rotation = rotationValue;\nif (rotationType == 1.0) {\nrotation = 90.0 - rotation;\n}\nfloat angle = C_DEG_TO_RAD * -rotation;\nfloat sinA = sin(angle);\nfloat cosA = cos(angle);\nreturn mat3(cosA, -sinA, 0,\nsinA, cosA, 0,\n0,    0,    1);\n}\n#endif\n#ifdef VV_COLOR\nconst int VV_COLOR_N = 8;\nvec4 getVVColor(float colorValue, vec4 fallback, float isColorLocked) {\nif (isNan(colorValue) || isColorLocked == 1.0) {\nreturn fallback;\n}\nif (colorValue <= colorValues[0]) {\nreturn colors[0];\n}\nfor (int i = 1; i < VV_COLOR_N; ++i) {\nif (colorValues[i] >= colorValue) {\nfloat f = (colorValue - colorValues[i-1]) / (colorValues[i] - colorValues[i-1]);\nreturn mix(colors[i-1], colors[i], f);\n}\n}\nreturn colors[VV_COLOR_N - 1];\n}\n#endif\nfloat getVVSize(in float size, in float vvSize, in float currentScale)  {\n#ifdef VV_SIZE_MIN_MAX_VALUE\nreturn getVVMinMaxSize(vvSize, size);\n#elif defined(VV_SIZE_SCALE_STOPS)\nfloat outSize = getVVScaleStopsSize(currentScale);\nreturn isNan(outSize) ? size : outSize;\n#elif defined(VV_SIZE_FIELD_STOPS)\nfloat outSize = getVVStopsSize(vvSize, size);\nreturn isNan(outSize) ? size : outSize;\n#elif defined(VV_SIZE_UNIT_VALUE)\nreturn getVVUnitValue(vvSize, size);\n#else\nreturn size;\n#endif\n}"},"post-processing":{blit:{"blit.frag":"precision mediump float;\nuniform sampler2D u_texture;\nvarying vec2 v_uv;\nvoid main() {\ngl_FragColor = texture2D(u_texture, v_uv);\n}"},bloom:{composite:{"composite.frag":"precision mediump float;\nvarying vec2 v_uv;\nuniform sampler2D u_blurTexture1;\nuniform sampler2D u_blurTexture2;\nuniform sampler2D u_blurTexture3;\nuniform sampler2D u_blurTexture4;\nuniform sampler2D u_blurTexture5;\nuniform float u_bloomStrength;\nuniform float u_bloomRadius;\nuniform float u_bloomFactors[NUMMIPS];\nuniform vec3 u_bloomTintColors[NUMMIPS];\nfloat lerpBloomFactor(const in float factor) {\nfloat mirrorFactor = 1.2 - factor;\nreturn mix(factor, mirrorFactor, u_bloomRadius);\n}\nvoid main() {\nvec4 color = u_bloomStrength * (\nlerpBloomFactor(u_bloomFactors[0]) * vec4(u_bloomTintColors[0], 1.0) * texture2D(u_blurTexture1, v_uv) +\nlerpBloomFactor(u_bloomFactors[1]) * vec4(u_bloomTintColors[1], 1.0) * texture2D(u_blurTexture2, v_uv) +\nlerpBloomFactor(u_bloomFactors[2]) * vec4(u_bloomTintColors[2], 1.0) * texture2D(u_blurTexture3, v_uv) +\nlerpBloomFactor(u_bloomFactors[3]) * vec4(u_bloomTintColors[3], 1.0) * texture2D(u_blurTexture4, v_uv) +\nlerpBloomFactor(u_bloomFactors[4]) * vec4(u_bloomTintColors[4], 1.0) * texture2D(u_blurTexture5, v_uv)\n);\ngl_FragColor = clamp(color, 0.0, 1.0);\n}"},gaussianBlur:{"gaussianBlur.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nuniform vec2 u_texSize;\nuniform vec2 u_direction;\nvarying vec2 v_uv;\n#define KERNEL_RADIUS RADIUS\n#define SIGMA RADIUS\nfloat gaussianPdf(in float x, in float sigma) {\nreturn 0.39894 * exp(-0.5 * x * x / ( sigma * sigma)) / sigma;\n}\nvoid main() {\nvec2 invSize = 1.0 / u_texSize;\nfloat fSigma = float(SIGMA);\nfloat weightSum = gaussianPdf(0.0, fSigma);\nvec4 pixelColorSum = texture2D(u_colorTexture, v_uv) * weightSum;\nfor (int i = 1; i < KERNEL_RADIUS; i ++) {\nfloat x = float(i);\nfloat w = gaussianPdf(x, fSigma);\nvec2 uvOffset = u_direction * invSize * x;\nvec4 sample1 = texture2D(u_colorTexture, v_uv + uvOffset);\nvec4 sample2 = texture2D(u_colorTexture, v_uv - uvOffset);\npixelColorSum += (sample1 + sample2) * w;\nweightSum += 2.0 * w;\n}\ngl_FragColor = pixelColorSum /weightSum;\n}"},luminosityHighPass:{"luminosityHighPass.frag":"precision mediump float;\nuniform sampler2D u_texture;\nuniform vec3 u_defaultColor;\nuniform float u_defaultOpacity;\nuniform float u_luminosityThreshold;\nuniform float u_smoothWidth;\nvarying vec2 v_uv;\nvoid main() {\nvec4 texel = texture2D(u_texture, v_uv);\nvec3 luma = vec3(0.299, 0.587, 0.114);\nfloat v = dot(texel.xyz, luma);\nvec4 outputColor = vec4(u_defaultColor.rgb, u_defaultOpacity);\nfloat alpha = smoothstep(u_luminosityThreshold, u_luminosityThreshold + u_smoothWidth, v);\ngl_FragColor = mix(outputColor, texel, alpha);\n}"}},blur:{gaussianBlur:{"gaussianBlur.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nuniform vec2 u_texSize;\nuniform vec2 u_direction;\nuniform float u_sigma;\nvarying vec2 v_uv;\n#define KERNEL_RADIUS RADIUS\nfloat gaussianPdf(in float x, in float sigma) {\nreturn 0.39894 * exp(-0.5 * x * x / ( sigma * sigma)) / sigma;\n}\nvoid main() {\nvec2 invSize = 1.0 / u_texSize;\nfloat fSigma = u_sigma;\nfloat weightSum = gaussianPdf(0.0, fSigma);\nvec4 pixelColorSum = texture2D(u_colorTexture, v_uv) * weightSum;\nfor (int i = 1; i < KERNEL_RADIUS; i ++) {\nfloat x = float(i);\nfloat w = gaussianPdf(x, fSigma);\nvec2 uvOffset = u_direction * invSize * x;\nvec4 sample1 = texture2D(u_colorTexture, v_uv + uvOffset);\nvec4 sample2 = texture2D(u_colorTexture, v_uv - uvOffset);\npixelColorSum += (sample1 + sample2) * w;\nweightSum += 2.0 * w;\n}\ngl_FragColor = pixelColorSum /weightSum;\n}"},"radial-blur":{"radial-blur.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nvarying vec2 v_uv;\nconst float sampleDist = 1.0;\nconst float sampleStrength = 2.2;\nvoid main(void) {\nfloat samples[10];\nsamples[0] = -0.08;\nsamples[1] = -0.05;\nsamples[2] = -0.03;\nsamples[3] = -0.02;\nsamples[4] = -0.01;\nsamples[5] =  0.01;\nsamples[6] =  0.02;\nsamples[7] =  0.03;\nsamples[8] =  0.05;\nsamples[9] =  0.08;\nvec2 dir = 0.5 - v_uv;\nfloat dist = sqrt(dir.x * dir.x + dir.y * dir.y);\ndir = dir / dist;\nvec4 color = texture2D(u_colorTexture,v_uv);\nvec4 sum = color;\nfor (int i = 0; i < 10; i++) {\nsum += texture2D(u_colorTexture, v_uv + dir * samples[i] * sampleDist);\n}\nsum *= 1.0 / 11.0;\nfloat t = dist * sampleStrength;\nt = clamp(t, 0.0, 1.0);\ngl_FragColor = mix(color, sum, t);\n}"}},dra:{"dra.frag":"precision mediump float;\nuniform sampler2D u_minColor;\nuniform sampler2D u_maxColor;\nuniform sampler2D u_texture;\nvarying vec2 v_uv;\nvoid main() {\nvec4 minColor = texture2D(u_minColor, vec2(0.5));\nvec4 maxColor = texture2D(u_maxColor, vec2(0.5));\nvec4 color = texture2D(u_texture, v_uv);\nvec3 minColorUnpremultiply = minColor.rgb / minColor.a;\nvec3 maxColorUnpremultiply = maxColor.rgb / maxColor.a;\nvec3 colorUnpremultiply = color.rgb / color.a;\nvec3 range = maxColorUnpremultiply - minColorUnpremultiply;\ngl_FragColor = vec4(color.a * (colorUnpremultiply - minColorUnpremultiply) / range, color.a);\n}","min-max":{"min-max.frag":"#extension GL_EXT_draw_buffers : require\nprecision mediump float;\n#define CELL_SIZE 2\nuniform sampler2D u_minTexture;\nuniform sampler2D u_maxTexture;\nuniform vec2 u_srcResolution;\nuniform vec2 u_dstResolution;\nvarying vec2 v_uv;\nvoid main() {\nvec2 srcPixel = floor(gl_FragCoord.xy) * float(CELL_SIZE);\nvec2 onePixel = vec2(1.0) / u_srcResolution;\nvec2 uv = (srcPixel + 0.5) / u_srcResolution;\nvec4 minColor = vec4(1.0);\nvec4 maxColor = vec4(0.0);\nfor (int y = 0; y < CELL_SIZE; ++y) {\nfor (int x = 0; x < CELL_SIZE; ++x) {\nvec2 offset = uv + vec2(x, y) * onePixel;\nminColor = min(minColor, texture2D(u_minTexture, offset));\nmaxColor = max(maxColor, texture2D(u_maxTexture, offset));\n}\n}\ngl_FragData[0] = minColor;\ngl_FragData[1] = maxColor;\n}"}},"drop-shadow":{composite:{"composite.frag":"precision mediump float;\nuniform sampler2D u_layerFBOTexture;\nuniform sampler2D u_blurTexture;\nuniform vec4 u_shadowColor;\nuniform vec2 u_shadowOffset;\nuniform highp mat3 u_displayViewMat3;\nvarying vec2 v_uv;\nvoid main() {\nvec3 offset = u_displayViewMat3 * vec3(u_shadowOffset, 0.0);\nvec4 layerColor = texture2D(u_layerFBOTexture, v_uv);\nvec4 blurColor = texture2D(u_blurTexture, v_uv - offset.xy / 2.0);\ngl_FragColor = ((1.0 - layerColor.a) * blurColor.a * u_shadowColor + layerColor);\n}"}},"edge-detect":{"frei-chen":{"frei-chen.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nuniform vec2 u_texSize;\nvarying vec2 v_uv;\nvec2 texel = vec2(1.0 / u_texSize.x, 1.0 / u_texSize.y);\nmat3 G[9];\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\nvoid main() {\nG[0] = g0,\nG[1] = g1,\nG[2] = g2,\nG[3] = g3,\nG[4] = g4,\nG[5] = g5,\nG[6] = g6,\nG[7] = g7,\nG[8] = g8;\nmat3 I;\nfloat cnv[9];\nvec3 sample;\nfor (float i = 0.0; i < 3.0; i++) {\nfor (float j = 0.0; j < 3.0; j++) {\nsample = texture2D(u_colorTexture, v_uv + texel * vec2(i - 1.0,j - 1.0)).rgb;\nI[int(i)][int(j)] = length(sample);\n}\n}\nfor (int i = 0; i < 9; i++) {\nfloat dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\ncnv[i] = dp3 * dp3;\n}\nfloat M = (cnv[0] + cnv[1]) + (cnv[2] + cnv[3]);\nfloat S = (cnv[4] + cnv[5]) + (cnv[6] + cnv[7]) + (cnv[8] + M);\ngl_FragColor = vec4(vec3(sqrt(M / S)), texture2D(u_colorTexture, v_uv).a);\n}"},sobel:{"sobel.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nvarying vec2 v_uv;\nuniform vec2 u_texSize;\nvec2 texel = vec2(1.0 / u_texSize.x, 1.0 / u_texSize.y);\nmat3 G[2];\nconst mat3 g0 = mat3( 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, -1.0, -2.0, -1.0 );\nconst mat3 g1 = mat3( 1.0, 0.0, -1.0, 2.0, 0.0, -2.0, 1.0, 0.0, -1.0 );\nvoid main() {\nmat3 I;\nfloat cnv[2];\nvec3 sample;\nG[0] = g0;\nG[1] = g1;\nfor (float i = 0.0; i < 3.0; i++) {\nfor (float j = 0.0; j < 3.0; j++) {\nsample = texture2D( u_colorTexture, v_uv + texel * vec2(i-1.0,j-1.0) ).rgb;\nI[int(i)][int(j)] = length(sample);\n}\n}\nfor (int i = 0; i < 2; i++) {\nfloat dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\ncnv[i] = dp3 * dp3;\n}\ngl_FragColor = vec4(vec3(0.5 * sqrt(cnv[0] * cnv[0] + cnv[1] * cnv[1])), texture2D(u_colorTexture, v_uv).a);\n}"}},"edge-enhance":{"edge-enhance.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nvarying vec2 v_uv;\nuniform vec2 u_texSize;\nvec2 texel = vec2(1.0 / u_texSize.x, 1.0 / u_texSize.y);\nmat3 G[2];\nconst mat3 g0 = mat3( 1.0, 0.0, -1.0, 1.0, 0.0, -1.0, 1.0, 0.0, -1.0 );\nconst mat3 g1 = mat3( 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, -1.0, -1.0, -1.0 );\nvoid main() {\nmat3 I;\nfloat cnv[2];\nvec3 sample;\nG[0] = g0;\nG[1] = g1;\nfor (float i = 0.0; i < 3.0; i++) {\nfor (float j = 0.0; j < 3.0; j++) {\nsample = texture2D( u_colorTexture, v_uv + texel * vec2(i-1.0,j-1.0) ).rgb;\nI[int(i)][int(j)] = length(sample);\n}\n}\nfor (int i = 0; i < 2; i++) {\nfloat dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\ncnv[i] = dp3 * dp3;\n}\nvec4 color = texture2D(u_colorTexture, v_uv);\ngl_FragColor = vec4(0.5 * sqrt(cnv[0] * cnv[0] + cnv[1] * cnv[1]) * color);\n}"},filterEffect:{"filterEffect.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nuniform mat4 u_coefficients;\nvarying vec2 v_uv;\nvoid main() {\nvec4 color = texture2D(u_colorTexture, v_uv);\nvec4 rgbw = u_coefficients * vec4(color.a > 0.0 ? color.rgb / color.a : vec3(0.0), 1.0);\nfloat a = color.a;\ngl_FragColor = vec4(a * rgbw.rgb, a);\n}"},pp:{"pp.vert":"precision mediump float;\nattribute vec2 a_position;\nvarying vec2 v_uv;\nvoid main() {\ngl_Position = vec4(a_position, 0.0, 1.0);\nv_uv = (a_position + 1.0) / 2.0;\n}"}},raster:{bitmap:{"bitmap.frag":"precision mediump float;\nvarying highp vec2 v_texcoord;\nuniform sampler2D u_texture;\nuniform highp vec2 u_coordScale;\nuniform lowp float u_opacity;\n#include <filtering/bicubic.glsl>\nvoid main() {\n#ifdef BICUBIC\nvec4 color = sampleBicubicBSpline(u_texture, v_texcoord, u_coordScale);\n#else\nvec4 color = texture2D(u_texture, v_texcoord);\n#endif\ngl_FragColor = vec4(color.rgb * u_opacity, color.a * u_opacity);\n}","bitmap.vert":"precision mediump float;\nattribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\nv_texcoord = a_pos;\ngl_Position = vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\n}"},common:{"common.glsl":"uniform sampler2D u_image;\nuniform int u_bandCount;\nuniform bool u_flipY;\nuniform float u_opacity;\nuniform int u_resampling;\nuniform vec2 u_srcImageSize;\n#ifdef APPLY_PROJECTION\n#include <raster/common/projection.glsl>\n#endif\n#ifdef BICUBIC\n#include <filtering/bicubic.glsl>\n#endif\n#ifdef BILINEAR\n#include <filtering/bilinear.glsl>\n#endif\nvec2 getPixelLocation(vec2 coords) {\nvec2 targetLocation = u_flipY ? vec2(coords.s, 1.0 - coords.t) : coords;\n#ifdef APPLY_PROJECTION\ntargetLocation = projectPixelLocation(targetLocation);\n#endif\nreturn targetLocation;\n}\nbool isOutside(vec2 coords){\nif (coords.t>1.00001 ||coords.t<-0.00001 || coords.s>1.00001 ||coords.s<-0.00001) {\nreturn true;\n} else {\nreturn false;\n}\n}\nvec4 getPixel(vec2 pixelLocation) {\n#ifdef BICUBIC\nvec4 color = sampleBicubicBSpline(u_image, pixelLocation, u_srcImageSize);\n#elif defined(BILINEAR)\nvec4 color = sampleBilinear(u_image, pixelLocation, u_srcImageSize);\n#else\nvec4 color = texture2D(u_image, pixelLocation);\n#endif\nreturn color;\n}","common.vert":"precision mediump float;\nattribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nuniform highp float u_scale;\nuniform highp vec2 u_offset;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\nv_texcoord = a_pos * u_scale + u_offset;\ngl_Position = vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\n}","contrastBrightness.glsl":"uniform float u_contrastOffset;\nuniform float u_brightnessOffset;\nvec4 adjustContrastBrightness(vec4 currentPixel, bool isFloat) {\nvec4 pixelValue = isFloat ? currentPixel * 255.0 : currentPixel;\nfloat maxI = 255.0;\nfloat mid = 128.0;\nfloat c = u_contrastOffset;\nfloat b = u_brightnessOffset;\nvec4 v;\nif (c > 0.0 && c < 100.0) {\nv = (200.0 * pixelValue - 100.0 * maxI + 2.0 * maxI * b) / (2.0 * (100.0 - c)) + mid;\n} else if (c <= 0.0 && c > -100.0) {\nv = (200.0 * pixelValue - 100.0 * maxI + 2.0 * maxI * b) * (100.0 + c) / 20000.0 + mid;\n} else if (c == 100.0) {\nv = (200.0 * pixelValue - 100.0 * maxI + (maxI + 1.0) * (100.0 - c) + 2.0 * maxI * b);\nv = (sign(v) + 1.0) / 2.0;\n} else if (c == -100.0) {\nv = vec4(mid, mid, mid, currentPixel.a);\n}\nvec3 rgb = clamp(v.rgb / 255.0, 0.0, 1.0);\nreturn vec4(rgb, currentPixel.a);\n}","getSurfaceValues.glsl":"#include <raster/common/mirror.glsl>\nvoid getSurfaceValues(sampler2D imageTexture, vec2 texCoord, vec2 srcImageSize, inout float values[10]) {\nvec2 onePixel = 1.0 / srcImageSize;\nvec4 va = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(-1.0, -1.0)));\nvec4 vb = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(0.0, -1.0)));\nvec4 vc = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(1.0, -1.0)));\nvec4 vd = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(-1.0, 0.0)));\nvec4 ve = texture2D(imageTexture, mirror(texCoord));\nvec4 vf = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(1.0, 0.0)));\nvec4 vg = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(-1.0, 1.0)));\nvec4 vh = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(0.0, 1.0)));\nvec4 vi = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(1.0, 1.0)));\nfloat alpha = va.a * vb.a * vc.a * vd.a * ve.a * vf.a * vg.a * vh.a * vi.a;\nvalues[0] = va.r;\nvalues[1] = vb.r;\nvalues[2] = vc.r;\nvalues[3] = vd.r;\nvalues[4] = ve.r;\nvalues[5] = vf.r;\nvalues[6] = vg.r;\nvalues[7] = vh.r;\nvalues[8] = vi.r;\nvalues[9] = alpha;\n}","inverse.glsl":"float invertValue(float value) {\nfloat s = sign(value);\nreturn (s * s) / (value + abs(s) - 1.0);\n}","mirror.glsl":"vec2 mirror(vec2 pos) {\nvec2 pos1 = abs(pos);\nreturn step(pos1, vec2(1.0, 1.0)) * pos1 + step(1.0, pos1) * (2.0 - pos1);\n}","projection.glsl":"uniform sampler2D u_transformGrid;\nuniform vec2 u_transformSpacing;\nuniform vec2 u_transformGridSize;\nuniform vec2 u_targetImageSize;\nvec2 projectPixelLocation(vec2 coords) {\n#ifdef LOOKUP_PROJECTION\nvec4 pv = texture2D(u_transformGrid, coords);\nreturn vec2(pv.r, pv.g);\n#endif\nvec2 index_image = floor(coords * u_targetImageSize);\nvec2 oneTransformPixel = vec2(0.25 / u_transformGridSize.s, 1.0 / u_transformGridSize.t);\nvec2 index_transform = floor(index_image / u_transformSpacing) / u_transformGridSize;\nvec2 pos = fract((index_image + vec2(0.5, 0.5)) / u_transformSpacing);\nvec2 srcLocation;\nvec2 transform_location = index_transform + oneTransformPixel * 0.5;\nif (pos.s <= pos.t) {\nvec4 ll_abc = texture2D(u_transformGrid, vec2(transform_location.s, transform_location.t));\nvec4 ll_def = texture2D(u_transformGrid, vec2(transform_location.s + oneTransformPixel.s, transform_location.t));\nsrcLocation.s = dot(ll_abc.rgb, vec3(pos, 1.0));\nsrcLocation.t = dot(ll_def.rgb, vec3(pos, 1.0));\n} else {\nvec4 ur_abc = texture2D(u_transformGrid, vec2(transform_location.s + 2.0 * oneTransformPixel.s, transform_location.t));\nvec4 ur_def = texture2D(u_transformGrid, vec2(transform_location.s + 3.0 * oneTransformPixel.s, transform_location.t));\nsrcLocation.s = dot(ur_abc.rgb, vec3(pos, 1.0));\nsrcLocation.t = dot(ur_def.rgb, vec3(pos, 1.0));\n}\nreturn srcLocation;\n}"},flow:{"getFadeOpacity.glsl":"uniform float u_decayRate;\nuniform float u_fadeToZero;\nfloat getFadeOpacity(float x) {\nfloat cutOff = mix(0.0, exp(-u_decayRate), u_fadeToZero);\nreturn (exp(-u_decayRate * x) - cutOff) / (1.0 - cutOff);\n}","getFragmentColor.glsl":"vec4 getFragmentColor(vec4 color, float dist, float size, float featheringSize) {\nfloat featheringStart = clamp(0.5 - featheringSize / size, 0.0, 0.5);\nif (dist > featheringStart) {\ncolor *= 1.0 - (dist - featheringStart) / (0.5 - featheringStart);\n}\nreturn color;\n}",imagery:{"imagery.frag":"precision highp float;\nvarying vec2 v_texcoord;\nuniform sampler2D u_texture;\nuniform float u_Min;\nuniform float u_Max;\nuniform float u_featheringSize;\n#include <raster/flow/vv.glsl>\nfloat getIntensity(float v) {\nreturn u_Min + v * (u_Max - u_Min);\n}\nvoid main(void) {\nvec4 sampled = texture2D(u_texture, v_texcoord);\nfloat intensity = getIntensity(sampled.r);\ngl_FragColor = getColor(intensity);\ngl_FragColor.a *= getOpacity(sampled.r);\ngl_FragColor.a *= sampled.a;\ngl_FragColor.rgb *= gl_FragColor.a;\n}","imagery.vert":"attribute vec2 a_position;\nattribute vec2 a_texcoord;\nuniform mat3 u_dvsMat3;\nvarying vec2 v_texcoord;\nvoid main(void) {\nvec2 xy = (u_dvsMat3 * vec3(a_position, 1.0)).xy;\ngl_Position = vec4(xy, 0.0, 1.0);\nv_texcoord = a_texcoord;\n}"},particles:{"particles.frag":"precision highp float;\nvarying vec4 v_color;\nvarying vec2 v_texcoord;\nvarying float v_size;\nuniform float u_featheringSize;\n#include <raster/flow/getFragmentColor.glsl>\nvoid main(void) {\ngl_FragColor = getFragmentColor(v_color, length(v_texcoord - 0.5), v_size, u_featheringSize);\n}","particles.vert":"attribute vec4 a_xyts0;\nattribute vec4 a_xyts1;\nattribute vec4 a_typeIdDurationSeed;\nattribute vec4 a_extrudeInfo;\nuniform mat3 u_dvsMat3;\nuniform mat3 u_displayViewMat3;\nuniform float u_time;\nuniform float u_trailLength;\nuniform float u_flowSpeed;\nvarying vec4 v_color;\nvarying vec2 v_texcoord;\nvarying float v_size;\nuniform float u_featheringSize;\nuniform float u_introFade;\n#include <raster/flow/vv.glsl>\n#include <raster/flow/getFadeOpacity.glsl>\nvoid main(void) {\nvec2 position0 = a_xyts0.xy;\nfloat t0 = a_xyts0.z;\nfloat speed0 = a_xyts0.w;\nvec2 position1 = a_xyts1.xy;\nfloat t1 = a_xyts1.z;\nfloat speed1 = a_xyts1.w;\nfloat type = a_typeIdDurationSeed.x;\nfloat id = a_typeIdDurationSeed.y;\nfloat duration = a_typeIdDurationSeed.z;\nfloat seed = a_typeIdDurationSeed.w;\nvec2 e0 = a_extrudeInfo.xy;\nvec2 e1 = a_extrudeInfo.zw;\nfloat animationPeriod = duration + u_trailLength;\nfloat scaledTime = u_time * u_flowSpeed;\nfloat randomizedTime = scaledTime + seed * animationPeriod;\nfloat t = mod(randomizedTime, animationPeriod);\nfloat fUnclamped = (t - t0) / (t1 - t0);\nfloat f = clamp(fUnclamped, 0.0, 1.0);\nfloat clampedTime = mix(t0, t1, f);\nfloat speed = mix(speed0, speed1, f);\nvec2 extrude;\nvec2 position;\nfloat fadeOpacity;\nfloat introOpacity;\nif (type == 2.0) {\nif (fUnclamped < 0.0 || (fUnclamped > 1.0 && t1 != duration)) {\ngl_Position = vec4(0.0, 0.0, -2.0, 1.0);\nreturn;\n}\nvec2 ortho = mix(e0, e1, f);\nvec2 parallel;\nparallel = normalize(position1 - position0) * 0.5;\nif (id == 1.0) {\nextrude = ortho;\nv_texcoord = vec2(0.5, 0.0);\n} else if (id == 2.0) {\nextrude = -ortho;\nv_texcoord = vec2(0.5, 1.0);\n} else if (id == 3.0) {\nextrude = ortho + parallel;\nv_texcoord = vec2(1.0, 0.0);\n} else if (id == 4.0) {\nextrude = -ortho + parallel;\nv_texcoord = vec2(1.0, 1.0);\n}\nfadeOpacity = getFadeOpacity((t - clampedTime) / u_trailLength);\nintroOpacity = 1.0 - exp(-clampedTime);\nv_size = getSize(speed);\nv_color = getColor(speed);\nv_color.a *= getOpacity(speed);\nposition = mix(position0, position1, f);\n} else {\nif (fUnclamped < 0.0) {\ngl_Position = vec4(0.0, 0.0, -2.0, 1.0);\nreturn;\n}\nif (id == 1.0) {\nextrude = e0;\nv_texcoord = vec2(0.5, 0.0);\nfadeOpacity = getFadeOpacity((t - t0) / u_trailLength);\nintroOpacity = 1.0 - exp(-t0);\nv_size = getSize(speed0);\nv_color = getColor(speed0);\nv_color.a *= getOpacity(speed0);\nposition = position0;\n} else if (id == 2.0) {\nextrude = -e0;\nv_texcoord = vec2(0.5, 1.0);\nfadeOpacity = getFadeOpacity((t - t0) / u_trailLength);\nintroOpacity = 1.0 - exp(-t0);\nv_size = getSize(speed0);\nv_color = getColor(speed0);\nv_color.a *= getOpacity(speed0);\nposition = position0;\n} else if (id == 3.0) {\nextrude = mix(e0, e1, f);\nv_texcoord = vec2(0.5, 0.0);\nfadeOpacity = getFadeOpacity((t - clampedTime) / u_trailLength);\nintroOpacity = 1.0 - exp(-clampedTime);\nv_size = getSize(speed);\nv_color = getColor(speed);\nv_color.a *= getOpacity(speed);\nposition = mix(position0, position1, f);\n} else if (id == 4.0) {\nextrude = -mix(e0, e1, f);\nv_texcoord = vec2(0.5, 1.0);\nfadeOpacity = getFadeOpacity((t - clampedTime) / u_trailLength);\nintroOpacity = 1.0 - exp(-clampedTime);\nv_size = getSize(speed);\nv_color = getColor(speed);\nv_color.a *= getOpacity(speed);\nposition = mix(position0, position1, f);\n}\n}\nvec2 xy = (u_dvsMat3 * vec3(position, 1.0) + u_displayViewMat3 * vec3(extrude * v_size, 0.0)).xy;\ngl_Position = vec4(xy, 0.0, 1.0);\nv_color.a *= fadeOpacity;\nv_color.a *= mix(1.0, introOpacity, u_introFade);\nv_color.rgb *= v_color.a;\n}"},streamlines:{"streamlines.frag":"precision highp float;\nvarying float v_side;\nvarying float v_time;\nvarying float v_totalTime;\nvarying float v_timeSeed;\nvarying vec4 v_color;\nvarying float v_size;\nuniform float u_time;\nuniform float u_trailLength;\nuniform float u_flowSpeed;\nuniform float u_featheringSize;\nuniform float u_introFade;\n#include <raster/flow/getFragmentColor.glsl>\n#include <raster/flow/getFadeOpacity.glsl>\nvoid main(void) {\nfloat t = mod(v_timeSeed * (v_totalTime + u_trailLength) + u_time * u_flowSpeed, v_totalTime + u_trailLength) - v_time;\nvec4 color = v_color * step(0.0, t) * getFadeOpacity(t / u_trailLength);\ncolor *= mix(1.0, 1.0 - exp(-v_time), u_introFade);\ngl_FragColor = getFragmentColor(color, length((v_side + 1.0) / 2.0 - 0.5), v_size, u_featheringSize);\n}","streamlines.vert":"attribute vec3 a_positionAndSide;\nattribute vec3 a_timeInfo;\nattribute vec2 a_extrude;\nattribute float a_speed;\nuniform mat3 u_dvsMat3;\nuniform mat3 u_displayViewMat3;\nvarying float v_time;\nvarying float v_totalTime;\nvarying float v_timeSeed;\nvarying vec4 v_color;\nvarying float v_side;\nvarying float v_size;\nuniform float u_featheringSize;\n#include <raster/flow/vv.glsl>\nvoid main(void) {\nvec4 lineColor = getColor(a_speed);\nfloat lineOpacity = getOpacity(a_speed);\nfloat lineSize = getSize(a_speed);\nvec2 position = a_positionAndSide.xy;\nv_side = a_positionAndSide.z;\nvec2 xy = (u_dvsMat3 * vec3(position, 1.0) + u_displayViewMat3 * vec3(a_extrude * lineSize, 0.0)).xy;\ngl_Position = vec4(xy, 0.0, 1.0);\nv_time = a_timeInfo.x;\nv_totalTime = a_timeInfo.y;\nv_timeSeed = a_timeInfo.z;\nv_color = lineColor;\nv_color.a *= lineOpacity;\nv_color.rgb *= v_color.a;\nv_size = lineSize;\n}"},"vv.glsl":"#define MAX_STOPS 8\n#ifdef VV_COLOR\nuniform float u_color_stops[MAX_STOPS];\nuniform vec4 u_color_values[MAX_STOPS];\nuniform int u_color_count;\n#else\nuniform vec4 u_color;\n#endif\n#ifdef VV_OPACITY\nuniform float u_opacity_stops[MAX_STOPS];\nuniform float u_opacity_values[MAX_STOPS];\nuniform int u_opacity_count;\n#else\nuniform float u_opacity;\n#endif\n#ifdef VV_SIZE\nuniform float u_size_stops[MAX_STOPS];\nuniform float u_size_values[MAX_STOPS];\nuniform int u_size_count;\n#else\nuniform float u_size;\n#endif\nuniform float u_featheringOffset;\nvec4 getColor(float x) {\n#ifdef VV_COLOR\nvec4 color = u_color_values[0];\n{\nfor (int i = 1; i < MAX_STOPS; i++) {\nif (i >= u_color_count) {\nbreak;\n}\nfloat x1 = u_color_stops[i - 1];\nif (x < x1) {\nbreak;\n}\nfloat x2 = u_color_stops[i];\nvec4 y2 = u_color_values[i];\nif (x < x2) {\nvec4 y1 = u_color_values[i - 1];\ncolor = y1 + (y2 - y1) * (x - x1) / (x2 - x1);\n} else {\ncolor = y2;\n}\n}\n}\n#else\nvec4 color = u_color;\n#endif\nreturn color;\n}\nfloat getOpacity(float x) {\n#ifdef VV_OPACITY\nfloat opacity = u_opacity_values[0];\n{\nfor (int i = 1; i < MAX_STOPS; i++) {\nif (i >= u_opacity_count) {\nbreak;\n}\nfloat x1 = u_opacity_stops[i - 1];\nif (x < x1) {\nbreak;\n}\nfloat x2 = u_opacity_stops[i];\nfloat y2 = u_opacity_values[i];\nif (x < x2) {\nfloat y1 = u_opacity_values[i - 1];\nopacity = y1 + (y2 - y1) * (x - x1) / (x2 - x1);\n} else {\nopacity = y2;\n}\n}\n}\n#else\nfloat opacity = u_opacity;\n#endif\nreturn opacity;\n}\nfloat getSize(float x) {\n#ifdef VV_SIZE\nfloat size = u_size_values[0];\n{\nfor (int i = 1; i < MAX_STOPS; i++) {\nif (i >= u_size_count) {\nbreak;\n}\nfloat x1 = u_size_stops[i - 1];\nif (x < x1) {\nbreak;\n}\nfloat x2 = u_size_stops[i];\nfloat y2 = u_size_values[i];\nif (x < x2) {\nfloat y1 = u_size_values[i - 1];\nsize = y1 + (y2 - y1) * (x - x1) / (x2 - x1);\n} else {\nsize = y2;\n}\n}\n}\n#else\nfloat size = u_size;\n#endif\nreturn size + 2.0 * u_featheringSize * u_featheringOffset;\n}"},hillshade:{"hillshade.frag":"precision mediump float;\nvarying highp vec2 v_texcoord;\n#include <raster/common/common.glsl>\nuniform int u_hillshadeType;\nuniform float u_sinZcosAs[6];\nuniform float u_sinZsinAs[6];\nuniform float u_cosZs[6];\nuniform float u_weights[6];\nuniform vec2 u_factor;\nuniform float u_minValue;\nuniform float u_maxValue;\nuniform float u_scaling;\n#include <raster/lut/colorize.glsl>\n#include <raster/common/getSurfaceValues.glsl>\nvec3 rgb2hsv(vec3 c) {\nvec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\nvec4 p = c.g < c.b ? vec4(c.bg, K.wz) : vec4(c.gb, K.xy);\nvec4 q = c.r < p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);\nfloat d = q.x - min(q.w, q.y);\nfloat e = 1.0e-10;\nreturn vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), min(d / (q.x + e), 1.0), q.x);\n}\nvec3 hsv2rgb(vec3 c) {\nvec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\nreturn c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\nvec4 overlay(float val, float minValue, float maxValue, float hillshade) {\nval = clamp((val - minValue) / (maxValue - minValue), 0.0, 1.0);\nvec4 rgb = colorize(vec4(val, val, val, 1.0), 255.0);\nvec3 hsv = rgb2hsv(rgb.xyz);\nhsv.z = hillshade;\nreturn vec4(hsv2rgb(hsv) * u_scaling, 1.0) * rgb.a;\n}\nvoid main() {\nvec2 pixelLocation = getPixelLocation(v_texcoord);\nif (isOutside(pixelLocation)) {\ngl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\nreturn;\n}\nvec4 currentPixel = getPixel(pixelLocation);\nif (currentPixel.a == 0.0) {\ngl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\nreturn;\n}\nfloat pv[10];\ngetSurfaceValues(u_image, pixelLocation, u_srcImageSize, pv);\nfloat alpha = pv[9];\nfloat dzx = (pv[2] + 2.0 * pv[5] + pv[8] - pv[0] - 2.0 * pv[3] - pv[6]) * u_factor.s;\nfloat dzy = (pv[6] + 2.0 * pv[7] + pv[8] - pv[0] - 2.0 * pv[1] - pv[2]) * u_factor.t;\nfloat dzd = sqrt(1.0 + dzx * dzx + dzy * dzy);\nfloat hillshade = 0.0;\nif (u_hillshadeType == 0){\nfloat cosDelta = u_sinZsinAs[0] * dzy - u_sinZcosAs[0] * dzx;\nfloat z = (u_cosZs[0] + cosDelta) / dzd;\nif (z < 0.0)  z = 0.0;\nhillshade = z;\n} else {\nfor (int k = 0; k < 6; k++) {\nfloat cosDelta = u_sinZsinAs[k] * dzy - u_sinZcosAs[k] * dzx;\nfloat z = (u_cosZs[k] + cosDelta) / dzd;\nif (z < 0.0) z = 0.0;\nhillshade = hillshade + z * u_weights[k];\nif (k == 5) break;\n}\n}\n#ifdef APPLY_COLORMAP\nvec4 result = overlay(pv[4], u_minValue, u_maxValue, hillshade) * alpha * u_opacity;\n#else\nhillshade *= u_scaling;\nvec4 result = vec4(hillshade, hillshade, hillshade, 1.0) * alpha * u_opacity;\n#endif\n#ifdef ROUND_OUTPUT\nresult = vec4(floor(result.xyz + 0.5), result.a);\n#endif\ngl_FragColor = result;\n}"},lut:{"colorize.glsl":"uniform sampler2D u_colormap;\nuniform float u_colormapOffset;\nuniform float u_colormapMaxIndex;\nvec4 colorize(vec4 currentPixel, float scaleFactor) {\nfloat clrIndex = clamp(currentPixel.r * scaleFactor - u_colormapOffset, 0.0, u_colormapMaxIndex);\nvec2 clrPosition = vec2((clrIndex + 0.5) / (u_colormapMaxIndex + 1.0), 0.0);\nvec4 color = texture2D(u_colormap, clrPosition);\nvec4 result = vec4(color.rgb, color.a * currentPixel.a);\nreturn result;\n}\nvec4 colorizeNoClamp(vec4 currentPixel, float scaleFactor) {\nfloat value = currentPixel.r * scaleFactor - u_colormapOffset;\nvec4 result = colorize(currentPixel, scaleFactor);\nreturn result * step(0.0, value) * step(value, u_colormapMaxIndex);\n}","lut.frag":"precision mediump float;\nvarying highp vec2 v_texcoord;\n#include <raster/common/common.glsl>\n#include <raster/lut/colorize.glsl>\nvoid main() {\nvec2 pixelLocation = getPixelLocation(v_texcoord);\nif (isOutside(pixelLocation)) {\ngl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\nreturn;\n}\nvec4 currentPixel = getPixel(pixelLocation);\nvec4 result = colorizeNoClamp(currentPixel, 1.0);\ngl_FragColor = vec4(result.xyz, 1.0) * result.a * u_opacity;\n}"},magdir:{"magdir.frag":"precision mediump float;\nvarying vec4 v_color;\nuniform lowp float u_opacity;\nvoid main() {\ngl_FragColor = v_color * u_opacity;\n}","magdir.vert":"precision mediump float;\nattribute vec2 a_pos;\nattribute vec2 a_offset;\nattribute vec2 a_vv;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nuniform vec2 u_symbolSize;\nuniform vec2 u_symbolPercentRange;\nuniform vec2 u_dataRange;\nuniform float u_rotation;\nuniform vec4 u_colors[12];\nvarying vec4 v_color;\nvoid main()\n{\nfloat angle = a_offset.y + u_rotation;\n#ifndef ROTATION_GEOGRAPHIC\nangle = 3.14159265359 * 2.0 - angle - 3.14159265359 / 2.0;\n#endif\nvec2 offset = vec2(cos(angle), sin(angle)) * a_offset.x;\n#ifdef DATA_RANGE\nfloat valuePercentage = clamp((a_vv.y - u_dataRange.x) / (u_dataRange.y - u_dataRange.x), 0.0, 1.0);\nfloat sizeRatio = u_symbolPercentRange.x + valuePercentage * (u_symbolPercentRange.y - u_symbolPercentRange.x);\nfloat sizePercentage = clamp(sizeRatio, u_symbolPercentRange.x, u_symbolPercentRange.y);\n#else\nfloat sizePercentage = (u_symbolPercentRange.x + u_symbolPercentRange.y) / 2.0;\n#endif\nvec2 pos = a_pos + offset * sizePercentage * u_symbolSize;\nv_color = u_colors[int(a_vv.x)];\ngl_Position = vec4(u_dvsMat3 * vec3(pos * u_coordScale, 1.0), 1.0);\n}"},reproject:{"reproject.frag":"precision mediump float;\nvarying vec2 v_texcoord;\n#include <raster/common/common.glsl>\nvoid main() {\nvec2 pixelLocation = getPixelLocation(v_texcoord);\nif (isOutside(pixelLocation)) {\ngl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\nreturn;\n}\nvec4 currentPixel = getPixel(pixelLocation);\ngl_FragColor = vec4(currentPixel.rgb, 1.0) * currentPixel.a * u_opacity;\n}","reproject.vert":"precision mediump float;\nattribute vec2 a_position;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\nv_texcoord = a_position;\ngl_Position = vec4(2.0 * (a_position - 0.5), 0.0, 1.0);\n}"},rfx:{aspect:{"aspect.frag":"precision mediump float;\nuniform sampler2D u_image;\nvarying vec2 v_texcoord;\nuniform vec2 u_cellSize;\nuniform vec2 u_srcImageSize;\n#include <raster/common/getSurfaceValues.glsl>\nconst float pi = 3.14159265359;\nvoid main() {\nfloat pv[10];\ngetSurfaceValues(u_image, v_texcoord, u_srcImageSize, pv);\nfloat alpha = pv[9];\nfloat dzx = (pv[2] + 2.0 * pv[5] + pv[8] - pv[0] - 2.0 * pv[3] - pv[6]) / (8.0 * u_cellSize[0]);\nfloat dzy = -(pv[6] + 2.0 * pv[7] + pv[8] - pv[0] - 2.0 * pv[1] - pv[2]) / (8.0 * u_cellSize[1]);\nalpha *= sign(abs(dzx) + abs(dzy));\nfloat aspect_rad = (dzx == 0.0) ? (step(0.0, dzy) * 0.5 * pi + step(dzy, 0.0) * 1.5 * pi) : mod((2.5 * pi + atan(dzy, -dzx)), 2.0 * pi);\nfloat aspect = aspect_rad * 180.0 / pi;\ngl_FragColor = vec4(aspect, aspect, aspect, 1.0) * alpha;\n}"},bandarithmetic:{"bandarithmetic.frag":"precision mediump float;\nuniform sampler2D u_image;\nvarying vec2 v_texcoord;\nuniform mediump mat3 u_bandIndexMat3;\nuniform float u_adjustments[3];\n#include <raster/common/inverse.glsl>\nvoid main() {\nvec4 pv = texture2D(u_image, v_texcoord);\nvec3 pv2 = u_bandIndexMat3 * pv.rgb;\nfloat nir = pv2.r;\nfloat red = pv2.g;\nfloat index;\n#ifdef NDXI\nindex = (nir - red) * invertValue(nir + red);\n#elif defined(SR)\nindex = nir * invertValue(red);\n#elif defined(CI)\nindex = nir * invertValue(red) - 1.0;\n#elif defined(SAVI)\nindex = (nir - red) * invertValue(nir + red + u_adjustments[0]) * (1.0 + u_adjustments[0]);\n#elif defined(TSAVI)\nfloat s = u_adjustments[0];\nfloat a = u_adjustments[1];\nfloat x = u_adjustments[2];\nfloat y = -a * s + x * (1.0 + s * s);\nindex = (s * (nir - s * red - a)) * invertValue(a * nir + red + y);\n#elif defined(MSAVI)\nfloat nir2 = 2.0 * nir + 1.0;\nindex = 0.5 * (nir2 - sqrt(nir2 * nir2 - 8.0 * (nir - red)));\n#elif defined(GEMI)\nfloat eta = (2.0 * (nir * nir - red * red) + 1.5 * nir + 0.5 * red) * invertValue(nir + red + 0.5);\nindex = eta * (1.0 - 0.25 * eta) - (red - 0.125) * invertValue(1.0 - red);\n#elif defined(PVI)\nfloat a = u_adjustments[0];\nfloat b = u_adjustments[1];\nfloat y = sqrt(1.0 + a * a);\nindex = (nir - a * red - b) * invertValue(y);\n#elif defined(VARI)\nindex = (pv2.g - pv2.r) * invertValue(pv2.g + pv2.r - pv2.b);\n#elif defined(MTVI)\nfloat green = pv2.b;\nfloat v = sqrt(pow((2.0 * nir + 1.0), 2.0) - (6.0 * nir - 5.0 * sqrt(red)) - 0.5);\nindex = 1.5 * (1.2 * (nir - green) - 2.5 * (red - green)) * invertValue(v);\n#elif defined(RTVICORE)\nfloat green = pv2.b;\nindex = 100.0 * (nir - red) - 10.0 * (nir - green);\n#elif defined(EVI)\nfloat blue = pv2.b;\nfloat denom = nir + 6.0 * red - 7.5 * blue + 1.0;\nindex =  (2.5 * (nir - red)) * invertValue(denom);\n#elif defined(WNDWI)\nfloat g = pv2.r;\nfloat n = pv2.g;\nfloat s = pv2.b;\nfloat a = u_adjustments[0];\nfloat denom = g + a * n + (1.0 - a) * s;\nindex = (g - a * n - (1.0 - a) * s) * invertValue(denom);\n#elif defined(BAI)\nindex = invertValue(pow((0.1 - red), 2.0) + pow((0.06 - nir), 2.0));\n#else\ngl_FragColor = pv;\nreturn;\n#endif\n#ifdef ROUND_OUTPUT\nindex = floor(index + 0.5);\n#endif\ngl_FragColor = vec4(index, index, index, pv.a);\n}"},colormap2rgb:{"colormap2rgb.frag":"precision mediump float;\nuniform sampler2D u_image;\nvarying vec2 v_texcoord;\n#include <raster/lut/colorize.glsl>\nvoid main() {\nvec4 pv = texture2D(u_image, v_texcoord);\nvec4 result = colorizeNoClamp(vec4(pv.r, pv.r, pv.r, 1.0), 1.0);\ngl_FragColor = vec4(result.xyz * 255.0, 1.0) * result.a * pv.a;\n}"},compositeband:{"compositeband.frag":"precision mediump float;\nuniform sampler2D u_image;\nuniform sampler2D u_image1;\nuniform sampler2D u_image2;\n#ifdef ONE_CONSTANT\nuniform float u_image1Const;\n#ifdef TWO_CONSTANT\nuniform float u_image2Const;\n#endif\nuniform mat3 u_imageSwap;\n#endif\nvarying vec2 v_texcoord;\nvoid main() {\nvec4 pv0 = texture2D(u_image, v_texcoord);\nfloat a = pv0.r;\nfloat alpha = pv0.a;\n#ifdef TWO_CONSTANT\nfloat b = u_image1Const;\nfloat c = u_image2Const;\nvec3 abc = u_imageSwap * vec3(a, b, c);\na = abc.s;\nb = abc.t;\nc = abc.p;\n#elif defined(ONE_CONSTANT)\nvec4 pv1 = texture2D(u_image1, v_texcoord);\nfloat b = pv1.r;\nfloat c = u_image1Const;\nvec3 abc = u_imageSwap * vec3(a, b, c);\na = abc.s;\nb = abc.t;\nc = abc.p;\nalpha *= pv1.a;\n#else\nvec4 pv1 = texture2D(u_image1, v_texcoord);\nvec4 pv2 = texture2D(u_image2, v_texcoord);\nfloat b = pv1.r;\nfloat c = pv2.r;\nalpha = alpha * pv1.a * pv2.a;\n#endif\ngl_FragColor = vec4(a, b, c, alpha);\n}"},computechange:{"computechange.frag":"precision mediump float;\nuniform sampler2D u_image;\nuniform sampler2D u_image1;\n#ifdef ONE_CONSTANT\nuniform float u_image1Const;\nuniform mat3 u_imageSwap;\n#endif\nvarying vec2 v_texcoord;\nuniform vec2 u_domainRange;\n#include <raster/common/inverse.glsl>\nvoid main() {\nvec4 pv0 = texture2D(u_image, v_texcoord);\nfloat a = pv0.r;\n#ifdef ONE_CONSTANT\nfloat b = u_image1Const;\nvec3 abc = u_imageSwap * vec3(a, b, 0);\na = abc.s;\nb = abc.t;\n#else\nvec4 pv1 = texture2D(u_image1, v_texcoord);\nfloat b = pv1.r;\n#endif\nfloat result = a;\nfloat alpha = pv0.a;\n#ifdef DIFFERENCE\nresult = a - b;\n#elif defined(RELATIVE)\nresult = (a - b) * invertValue(max(abs(a), abs(b)));\n#endif\nbool isInvalid = result < u_domainRange.s || result > u_domainRange.t;\nresult = isInvalid ? 0.0 : result;\nalpha *= float(!isInvalid);\n#ifdef ROUND_OUTPUT\nresult = floor(result + 0.5);\n#endif\ngl_FragColor = vec4(result, result, result, alpha);\n}"},contrast:{"contrast.frag":"precision mediump float;\nuniform sampler2D u_image;\nvarying vec2 v_texcoord;\n#include <raster/common/contrastBrightness.glsl>\nvoid main() {\nvec4 pv = texture2D(u_image, v_texcoord);\nvec4 result = adjustContrastBrightness(pv, false);\ngl_FragColor = vec4(floor(result.rgb * 255.0 + 0.5), result.a);\n}"},convolution:{"convolution.frag":"precision mediump float;\nuniform sampler2D u_image;\nvarying vec2 v_texcoord;\nuniform vec2 u_srcImageSize;\n#define KERNEL_SIZE_ROWS ROWS\n#define KERNEL_SIZE_COLS COLS\nuniform vec2 u_clampRange;\nuniform float u_kernel[25];\n#include <raster/common/mirror.glsl>\nvoid main() {\nvec3 rgb = vec3(0.0, 0.0, 0.0);\nvec2 resolution = 1.0 / u_srcImageSize;\nfloat rowOffset = -float(floor(float(KERNEL_SIZE_ROWS) / 2.0));\nfloat colOffset = -float(floor(float(KERNEL_SIZE_COLS) / 2.0));\nfloat alpha = 1.0;\nfor (int row = 0; row < KERNEL_SIZE_ROWS; row++) {\nfloat pos_row = rowOffset + float(row);\nfor (int col = 0; col < KERNEL_SIZE_COLS; col++) {\nvec2 pos = v_texcoord + vec2(colOffset + float(col), pos_row) * resolution;\nvec4 pv = texture2D(u_image, mirror(pos));\nrgb += pv.rgb * u_kernel[row * KERNEL_SIZE_COLS + col];\nalpha *= pv.a;\n}\n}\nrgb = clamp(rgb, u_clampRange.s, u_clampRange.t);\ngl_FragColor = vec4(rgb * alpha, alpha);\n}"},curvature:{"curvature.frag":"precision mediump float;\nuniform sampler2D u_image;\nvarying vec2 v_texcoord;\nuniform float u_zlFactor;\nuniform vec2 u_srcImageSize;\n#include <raster/common/getSurfaceValues.glsl>\nvoid main() {\nfloat pv[10];\ngetSurfaceValues(u_image, v_texcoord, u_srcImageSize, pv);\nfloat alpha = pv[9];\nfloat d = ((pv[3] + pv[5]) * 0.5 - pv[4]);\nfloat e = ((pv[1] + pv[7]) * 0.5 - pv[4]);\nfloat curvature = 0.0;\n#ifdef STANDARD\ncurvature = -u_zlFactor * (d + e);\ngl_FragColor = vec4(curvature, curvature, curvature, alpha);\n#else\nfloat f = (-pv[0] + pv[2] + pv[6] - pv[8]) / 4.0;\nfloat g = (-pv[3] + pv[5]) / 2.0;\nfloat h = (pv[1] - pv[7]) / 2.0;\nfloat g2 = g * g;\nfloat h2 = h * h;\n#ifdef PROFILE\ncurvature = (u_zlFactor * (d * g2 + e * h2 + f * g * h)) / (g2 + h2);\n#else\ncurvature = (-u_zlFactor * (d * h2 + e * g2 - f * g * h)) / (g2 + h2);\n#endif\n#endif\ngl_FragColor = vec4(curvature, curvature, curvature, alpha);\n}"},extractband:{"extractband.frag":"precision mediump float;\nuniform sampler2D u_image;\nvarying vec2 v_texcoord;\nuniform mediump mat3 u_bandIndexMat3;\nvoid main() {\nvec4 pv = texture2D(u_image, v_texcoord);\nvec3 pv2 = u_bandIndexMat3 * pv.rgb;\ngl_FragColor = vec4(pv2, pv.a);\n}"},focalstatistics:{"focalstatistics.frag":"precision mediump float;\nuniform sampler2D u_image;\nvarying vec2 v_texcoord;\nuniform vec2 u_srcImageSize;\n#define KERNEL_SIZE_ROWS ROWS\n#define KERNEL_SIZE_COLS COLS\nuniform vec2 u_clampRange;\n#include <raster/common/mirror.glsl>\n#include <raster/common/inverse.glsl>\nvoid main() {\nvec2 resolution = 1.0 / u_srcImageSize;\nfloat rowOffset = -float(floor(float(KERNEL_SIZE_ROWS) / 2.0));\nfloat colOffset = -float(floor(float(KERNEL_SIZE_COLS) / 2.0));\nfloat count = 0.0;\n#ifdef STDDEV\nvec3 sum = vec3(0.0, 0.0, 0.0);\nvec3 sum2 = vec3(0.0, 0.0, 0.0);\n#endif\nvec4 currentPixel = texture2D(u_image, v_texcoord);\nvec3 rgb = currentPixel.rgb;\nfor (int row = 0; row < KERNEL_SIZE_ROWS; row++) {\nfloat pos_row = rowOffset + float(row);\nfor (int col = 0; col < KERNEL_SIZE_COLS; col++) {\nvec2 pos = v_texcoord + vec2(colOffset + float(col), pos_row) * resolution;\nvec4 pv = texture2D(u_image, mirror(pos));\ncount += pv.a;\n#ifdef MIN\nrgb = min(rgb, pv.rgb);\n#elif defined(MAX)\nrgb = max(rgb, pv.rgb);\n#elif defined(MEAN)\nrgb += pv.rgb;\n#elif defined(STDDEV)\nsum += pv.rgb;\nsum2 += (pv.rgb * pv.rgb);\n#endif\n}\n}\n#ifdef MEAN\nrgb *= invertValue(count);\n#elif defined(STDDEV)\nrgb = sqrt((sum2 - sum * sum * invertValue(count)) * invertValue(count));\n#endif\nfloat alpha = step(0.9999, count);\nrgb = clamp(rgb, u_clampRange.s, u_clampRange.t);\n#ifdef FILL\nrgb = (1.0 - currentPixel.a) * rgb + currentPixel.a * currentPixel.rgb;\n#endif\ngl_FragColor = vec4(rgb * alpha, alpha);\n}"},grayscale:{"grayscale.frag":"precision mediump float;\nuniform sampler2D u_image;\nvarying vec2 v_texcoord;\nuniform vec3 u_weights;\nvoid main() {\nvec4 pv = texture2D(u_image, v_texcoord);\nfloat value = dot(u_weights, pv.rgb);\ngl_FragColor = vec4(value, value, value, pv.a);\n}"},local:{"local.frag":"precision highp float;\nuniform sampler2D u_image;\nuniform sampler2D u_image1;\n#ifdef ONE_CONSTANT\nuniform float u_image1Const;\n#ifdef TWO_CONSTANT\nuniform float u_image2Const;\n#endif\nuniform mat3 u_imageSwap;\n#endif\nvarying vec2 v_texcoord;\nuniform vec2 u_domainRange;\n#include <raster/common/inverse.glsl>\nvoid main() {\nvec4 pv0 = texture2D(u_image, v_texcoord);\nfloat a = pv0.r;\n#ifdef TWO_IMAGES\n#ifdef ONE_CONSTANT\nfloat b = u_image1Const;\nvec3 abc = u_imageSwap * vec3(a, b, 0);\na = abc.s;\nb = abc.t;\n#else\nvec4 pv1 = texture2D(u_image1, v_texcoord);\nfloat b = pv1.r;\n#endif\n#elif defined(CONDITIONAL)\n#ifdef TWO_CONSTANT\nfloat b = u_image1Const;\nfloat c = u_image2Const;\nvec3 abc = u_imageSwap * vec3(a, b, c);\na = abc.s;\nb = abc.t;\nc = abc.p;\n#elif defined(ONE_CONSTANT)\nvec4 pv1 = texture2D(u_image1, v_texcoord);\nfloat b = pv1.r;\nfloat c = u_image1Const;\nvec3 abc = u_imageSwap * vec3(a, b, c);\na = abc.s;\nb = abc.t;\nc = abc.p;\n#else\nvec4 pv1 = texture2D(u_image1, v_texcoord);\nvec4 pv2 = texture2D(u_image2, v_texcoord);\nfloat b = pv1.r;\nfloat c = pv2.r;\n#endif\n#endif\nfloat result = a;\nfloat alpha = pv0.a;\n#ifdef PLUS\nresult = a + b;\n#elif defined(MINUS)\nresult = a - b;\n#elif defined(TIMES)\nresult = a * b;\n#elif defined(DIVIDE)\nresult = a * invertValue(b);\nalpha *= float(abs(sign(b)));\n#elif defined(FLOATDIVIDE)\nresult = a * invertValue(b);\nalpha *= float(abs(sign(b)));\n#elif defined(FLOORDIVIDE)\nresult = floor(a * invertValue(b));\nalpha *= float(abs(sign(b)));\n#elif defined(SQUARE)\nresult = a * a;\n#elif defined(SQRT)\nresult = sqrt(a);\n#elif defined(POWER)\nresult = pow(a, b);\n#elif defined(LN)\nresult = a <= 0.0 ? 0.0: log(a);\nalpha *= float(a > 0.0);\n#elif defined(LOG_1_0)\nresult = a <= 0.0 ? 0.0: log2(a) * invertValue(log2(10.0));\nalpha *= float(a > 0.0);\n#elif defined(LOG_2)\nresult = a <= 0.0 ? 0.0: log2(a);\nalpha *= float(a > 0.0);\n#elif defined(EXP)\nresult = exp(a);\n#elif defined(EXP_1_0)\nresult = pow(10.0, a);\n#elif defined(EXP_2)\nresult = pow(2.0, a);\n#elif defined(ROUNDDOWN)\nresult = floor(a);\n#elif defined(ROUNDUP)\nresult = ceil(a);\n#elif defined(INT)\nresult = float(sign(a)) * floor(abs(a));\n#elif defined(MOD)\nresult = mod(a, b);\n#elif defined(NEGATE)\nresult = -a;\n#elif defined(ABS)\nresult = abs(a);\n#elif defined(ACOS)\nresult = abs(a) > 1.0 ? 0.0: acos(a);\nalpha *= step(abs(a), 1.00001);\n#elif defined(ACOSH)\nresult = acosh(a);\n#elif defined(ASIN)\nresult = abs(a) > 1.0 ? 0.0: asin(a);\nalpha *= step(abs(a), 1.00001);\n#elif defined(ASINH)\nresult = asinh(a);\n#elif defined(ATAN)\nresult = atan(a);\n#elif defined(ATANH)\nresult = abs(a) > 1.0 ? 0.0: atanh(a);\nalpha *= step(abs(a), 1.0);\n#elif defined(ATAN_2)\nresult = atan(a, b);\n#elif defined(COS)\nresult = cos(a);\n#elif defined(COSH)\nresult = cosh(a);\n#elif defined(SIN)\nresult = sin(a);\n#elif defined(SINH)\nresult = sinh(a);\n#elif defined(TAN)\nresult = tan(a);\n#elif defined(TANH)\nresult = tanh(a);\n#elif defined(BITWISEAND)\nresult = float(int(a) & int(b));\n#elif defined(BITWISEOR)\nresult = float(int(a) | int(b));\n#elif defined(BITWISELEFTSHIFT)\nresult = float(int(a) << int(b));\n#elif defined(BITWISERIGHTSHIFT)\nresult = float(int(a) >> int(b));\n#elif defined(BITWISENOT)\nresult = float(~(int(a)));\n#elif defined(BITWISEXOR)\nresult = float(int(a) ^ int(b));\n#elif defined(BOOLEANAND)\nresult = float((a != 0.0) && (b != 0.0));\n#elif defined(BOOLEANNOT)\nresult = float(a == 0.0);\n#elif defined(BOOLEANOR)\nresult = float((a != 0.0) || (b != 0.0));\n#elif defined(BOOLEANXOR)\nresult = float((a != 0.0) ^^ (b != 0.0));\n#elif defined(GREATERTHAN)\nresult = float(a > b);\n#elif defined(GREATERTHANEQUAL)\nresult = float(a >= b);\n#elif defined(LESSTHAN)\nresult = float(a < b);\n#elif defined(LESSTHANEQUAL)\nresult = float(a <= b);\n#elif defined(EQUALTO)\nresult = float(a == b);\n#elif defined(NOTEQUAL)\nresult = float(a != b);\n#elif defined(ISNULL)\nresult = float(alpha == 0.0);\nalpha = 1.0;\n#elif defined(SETNULL)\nfloat maskValue = float(a == 0.0);\nresult = maskValue * b;\nalpha *= maskValue;\n#elif defined(CONDITIONAL)\nfloat weight = float(abs(sign(a)));\nresult = weight * b + (1.0 - weight) * c;\n#endif\nfloat rangeFactor = step(u_domainRange.s, result) * step(result, u_domainRange.t);\nresult *= rangeFactor;\nalpha *= rangeFactor;\n#ifdef ROUND_OUTPUT\nresult = floor(result + 0.5);\n#endif\ngl_FragColor = vec4(result, result, result, alpha);\n}"},mask:{"mask.frag":"precision mediump float;\nuniform sampler2D u_image;\nvarying vec2 v_texcoord;\n#define LEN_INCLUDED_RANGES 6\n#define LEN_NODATA_VALUES 6\nuniform highp float u_includedRanges[6];\nuniform highp float u_noDataValues[6];\nfloat maskFactor(float bandValue, float fromValue, float to) {\nfloat factor = 1.0;\nfor (int i = 0; i < LEN_NODATA_VALUES; i++) {\nfactor *= float(u_noDataValues[i] != bandValue);\n}\nfactor *= step(fromValue, bandValue) * step(bandValue, to);\nreturn factor;\n}\nvoid main() {\nvec4 pv = texture2D(u_image, v_texcoord);\nfloat redFactor = maskFactor(pv.r, u_includedRanges[0], u_includedRanges[1]);\n#ifdef MULTI_BAND\nfloat greenFactor = maskFactor(pv.g, u_includedRanges[2], u_includedRanges[3]);\nfloat blueFactor = maskFactor(pv.b, u_includedRanges[4], u_includedRanges[5]);\nfloat maskFactor = redFactor * greenFactor * blueFactor;\ngl_FragColor = pv * maskFactor;\n#else\ngl_FragColor = pv * redFactor;\n#endif\n}"},ndvi:{"ndvi.frag":"precision mediump float;\nuniform sampler2D u_image;\nvarying vec2 v_texcoord;\nuniform mediump mat3 u_bandIndexMat3;\n#include <raster/common/inverse.glsl>\nvoid main() {\nvec4 pv = texture2D(u_image, v_texcoord);\nvec3 pv2 = u_bandIndexMat3 * pv.rgb;\nfloat nir = pv2.r;\nfloat red = pv2.g;\nfloat index = (nir - red) * invertValue(nir + red);\n#ifdef SCALED\nindex = floor((index + 1.0) * 100.0 + 0.5);\n#endif\ngl_FragColor = vec4(index, index, index, pv.a);\n}"},remap:{"remap.frag":"precision mediump float;\nuniform sampler2D u_image;\nvarying vec2 v_texcoord;\n#define LEN_REMAP_RANGES 18\n#define LEN_NODATA_RANGES 12\nuniform highp float u_rangeMaps[18];\nuniform highp float u_noDataRanges[12];\nuniform highp float u_unmatchMask;\nuniform vec2 u_clampRange;\nvoid main() {\nvec4 pv = texture2D(u_image, v_texcoord);\nfloat factor = 1.0;\nfloat bandValue = pv.r;\nfor (int i = 0; i < LEN_NODATA_RANGES; i+=2) {\nfloat inside = 1.0 - step(u_noDataRanges[i], bandValue) * step(bandValue, u_noDataRanges[i+1]);\nfactor *= inside;\n}\nfloat mapValue = 0.0;\nfloat includeMask = 0.0;\nfor (int i = 0; i < LEN_REMAP_RANGES; i+=3) {\nfloat stepMask = step(u_rangeMaps[i], bandValue) * step(bandValue, u_rangeMaps[i+1]);\nincludeMask = (1.0 - stepMask) * includeMask + stepMask;\nmapValue = (1.0 - stepMask) * mapValue + stepMask * u_rangeMaps[i+2];\n}\nbandValue = factor * (mapValue + (1.0 - includeMask) * u_unmatchMask * pv.r);\nfloat bandMask = factor * max(u_unmatchMask, includeMask);\nbandValue = clamp(bandValue, u_clampRange.s, u_clampRange.t);\ngl_FragColor = vec4(bandValue, bandValue, bandValue, bandMask * pv.a);\n}"},slope:{"slope.frag":"precision mediump float;\nuniform sampler2D u_image;\nvarying vec2 v_texcoord;\nuniform vec2 u_cellSize;\nuniform float u_zFactor;\nuniform vec2 u_srcImageSize;\nuniform float u_pixelSizePower;\nuniform float u_pixelSizeFactor;\n#include <raster/common/getSurfaceValues.glsl>\nvoid main() {\nfloat pv[10];\ngetSurfaceValues(u_image, v_texcoord, u_srcImageSize, pv);\nfloat alpha = pv[9];\nfloat xf = (u_zFactor + pow(u_cellSize[0], u_pixelSizePower) * u_pixelSizeFactor) / (8.0 * u_cellSize[0]);\nfloat yf = (u_zFactor + pow(u_cellSize[1], u_pixelSizePower) * u_pixelSizeFactor) / (8.0 * u_cellSize[1]);\nfloat dzx = (pv[2] + 2.0 * pv[5] + pv[8] - pv[0] - 2.0 * pv[3] - pv[6]) * xf;\nfloat dzy = -(pv[6] + 2.0 * pv[7] + pv[8] - pv[0] - 2.0 * pv[1] - pv[2]) * yf;\nfloat rise2run = sqrt(dzx * dzx + dzy * dzy);\n#ifdef PERCENT_RISE\nfloat result = rise2run * 100.0;\n#else\nfloat result = atan(rise2run) * 57.2957795;\n#endif\n#ifdef ROUND_OUTPUT\nresult = floor(result + 0.5);\n#endif\ngl_FragColor = vec4(result, result, result, alpha);\n}"},stretch:{"stretch.frag":"precision mediump float;\nuniform sampler2D u_image;\nvarying highp vec2 v_texcoord;\nuniform float u_minCutOff[3];\nuniform float u_maxCutOff[3];\nuniform float u_minOutput;\nuniform float u_maxOutput;\nuniform float u_factor[3];\nuniform float u_gamma[3];\nuniform float u_gammaCorrection[3];\nfloat stretchOneValue(float val, float minCutOff, float maxCutOff, float minOutput, float maxOutput, float factor, float gamma, float gammaCorrection) {\nval = clamp(val, minCutOff, maxCutOff);\nfloat stretchedVal;\n#ifdef USE_GAMMA\nfloat tempf = 1.0;\nfloat outRange = maxOutput - minOutput;\nfloat relativeVal = (val - minCutOff) / (maxCutOff - minCutOff);\ntempf -= step(1.0, gamma) * sign(gamma - 1.0) * pow(1.0 / outRange, relativeVal * gammaCorrection);\nstretchedVal = tempf * outRange * pow(relativeVal, 1.0 / gamma) + minOutput;\nstretchedVal = clamp(stretchedVal, minOutput, maxOutput);\n#else\nstretchedVal = minOutput + (val - minCutOff) * factor;\n#endif\n#ifdef ROUND_OUTPUT\nstretchedVal = floor(stretchedVal + 0.5);\n#endif\nreturn stretchedVal;\n}\nvoid main() {\nvec4 currentPixel = texture2D(u_image, v_texcoord);\nfloat redVal = stretchOneValue(currentPixel.r, u_minCutOff[0], u_maxCutOff[0], u_minOutput, u_maxOutput, u_factor[0], u_gamma[0], u_gammaCorrection[0]);\n#ifdef MULTI_BAND\nfloat greenVal = stretchOneValue(currentPixel.g, u_minCutOff[1], u_maxCutOff[1], u_minOutput, u_maxOutput, u_factor[1], u_gamma[1], u_gammaCorrection[1]);\nfloat blueVal = stretchOneValue(currentPixel.b, u_minCutOff[2], u_maxCutOff[2], u_minOutput, u_maxOutput, u_factor[2], u_gamma[2], u_gammaCorrection[2]);\ngl_FragColor = vec4(redVal, greenVal, blueVal, currentPixel.a);\n#else\ngl_FragColor = vec4(redVal, redVal, redVal, currentPixel.a);\n#endif\n}"},vs:{"vs.vert":"precision mediump float;\nattribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\nv_texcoord = a_pos;\ngl_Position = vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\n}"}},scalar:{"scalar.frag":"precision mediump float;\nuniform lowp float u_opacity;\nvarying vec2 v_pos;\nconst vec4 outlineColor = vec4(0.2, 0.2, 0.2, 1.0);\nconst float outlineSize = 0.02;\nconst float innerRadius = 0.25;\nconst float outerRadius = 0.42;\nconst float innerSquareLength = 0.15;\nvoid main() {\nmediump float dist = length(v_pos);\nmediump float fillalpha1 = smoothstep(outerRadius, outerRadius + outlineSize, dist);\nfillalpha1 *= (1.0-smoothstep(outerRadius + outlineSize, outerRadius + 0.1 + outlineSize, dist));\n#ifdef INNER_CIRCLE\nmediump float fillalpha2 = smoothstep(innerRadius, innerRadius + outlineSize, dist);\nfillalpha2 *= (1.0-smoothstep(innerRadius + outlineSize, innerRadius + 0.1 + outlineSize, dist));\n#else\nmediump float fillalpha2 = (abs(v_pos.x) < innerSquareLength ? 1.0 : 0.0) * (abs(v_pos.y) < innerSquareLength ? 1.0 : 0.0);\n#endif\ngl_FragColor = (fillalpha2 + fillalpha1) * outlineColor * u_opacity;\n}","scalar.vert":"precision mediump float;\nattribute vec2 a_pos;\nattribute vec2 a_offset;\nattribute vec2 a_vv;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nuniform vec2 u_symbolSize;\nuniform vec2 u_symbolPercentRange;\nuniform vec2 u_dataRange;\nvarying vec2 v_pos;\nvoid main()\n{\n#ifdef DATA_RANGE\nfloat valuePercentage = clamp((a_vv.y - u_dataRange.x) / (u_dataRange.y - u_dataRange.x), 0.0, 1.0);\nfloat sizeRatio = u_symbolPercentRange.x + valuePercentage * (u_symbolPercentRange.y - u_symbolPercentRange.x);\nfloat sizePercentage = clamp(sizeRatio, u_symbolPercentRange.x, u_symbolPercentRange.y);\n#else\nfloat sizePercentage = (u_symbolPercentRange.x + u_symbolPercentRange.y) / 2.0;\n#endif\nvec2 size = u_symbolSize * sizePercentage;\nvec2 pos = a_pos + a_offset * size;\nv_pos = a_offset;\ngl_Position = vec4(u_dvsMat3 * vec3(pos * u_coordScale, 1.0), 1.0);\n}"},stretch:{"stretch.frag":"precision mediump float;\nvarying highp vec2 v_texcoord;\n#include <raster/common/common.glsl>\nuniform float u_minCutOff[3];\nuniform float u_maxCutOff[3];\nuniform float u_minOutput;\nuniform float u_maxOutput;\nuniform float u_factor[3];\nuniform bool u_useGamma;\nuniform float u_gamma[3];\nuniform float u_gammaCorrection[3];\n#include <raster/lut/colorize.glsl>\nfloat stretchOneValue(float val, float minCutOff, float maxCutOff, float minOutput, float maxOutput, float factor, bool useGamma, float gamma, float gammaCorrection) {\nif (val >= maxCutOff) {\nreturn maxOutput;\n} else if (val <= minCutOff) {\nreturn minOutput;\n}\nfloat stretchedVal;\nif (useGamma) {\nfloat tempf = 1.0;\nfloat outRange = maxOutput - minOutput;\nfloat relativeVal = (val - minCutOff) / (maxCutOff - minCutOff);\nif (gamma > 1.0) {\ntempf -= pow(1.0 / outRange, relativeVal * gammaCorrection);\n}\nstretchedVal = (tempf * outRange * pow(relativeVal, 1.0 / gamma) + minOutput) / 255.0;\n} else {\nstretchedVal = minOutput + (val - minCutOff) * factor;\n}\n#ifdef ROUND_OUTPUT\nstretchedVal = floor(stretchedVal + 0.5);\n#endif\nreturn stretchedVal;\n}\nvoid main() {\nvec2 pixelLocation = getPixelLocation(v_texcoord);\nif (isOutside(pixelLocation)) {\ngl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\nreturn;\n}\nvec4 currentPixel = getPixel(pixelLocation);\n#ifdef NOOP\ngl_FragColor = vec4(currentPixel.rgb, 1.0) * currentPixel.a * u_opacity;\nreturn;\n#endif\nif (u_bandCount == 1) {\nfloat grayVal = stretchOneValue(currentPixel.r, u_minCutOff[0], u_maxCutOff[0], u_minOutput, u_maxOutput, u_factor[0], u_useGamma, u_gamma[0], u_gammaCorrection[0]);\n#ifdef APPLY_COLORMAP\nvec4 result = colorize(vec4(grayVal, grayVal, grayVal, 1.0), u_useGamma ? 255.0 : 1.0);\ngl_FragColor = vec4(result.xyz, 1.0) * result.a * currentPixel.a * u_opacity;\n#else\ngl_FragColor = vec4(grayVal, grayVal, grayVal, 1.0) * currentPixel.a * u_opacity;\n#endif\n} else {\nfloat redVal = stretchOneValue(currentPixel.r, u_minCutOff[0], u_maxCutOff[0], u_minOutput, u_maxOutput, u_factor[0], u_useGamma, u_gamma[0], u_gammaCorrection[0]);\nfloat greenVal = stretchOneValue(currentPixel.g, u_minCutOff[1], u_maxCutOff[1], u_minOutput, u_maxOutput, u_factor[1], u_useGamma, u_gamma[1], u_gammaCorrection[1]);\nfloat blueVal = stretchOneValue(currentPixel.b, u_minCutOff[2], u_maxCutOff[2], u_minOutput, u_maxOutput, u_factor[2], u_useGamma, u_gamma[2], u_gammaCorrection[2]);\ngl_FragColor = vec4(redVal, greenVal, blueVal, 1.0) * currentPixel.a * u_opacity;\n}\n}"}},stencil:{"stencil.frag":"void main() {\ngl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\n}","stencil.vert":"attribute vec2 a_pos;\nuniform mat3 u_worldExtent;\nvoid main() {\ngl_Position = vec4(u_worldExtent * vec3(a_pos, 1.0), 1.0);\n}"},test:{"TestShader.common.glsl":"#ifndef RETURN_RED\nvarying    vec4      v_color;\n#endif\nvarying    vec2      v_offset;","TestShader.frag":"precision highp float;\n#include <test/TestShader.common.glsl>\nvoid main() {\nif (v_offset.x > -.5 && v_offset.y > -.5 && v_offset.x < .5 && v_offset.y < .5) {\ndiscard;\n}\n#ifdef RETURN_RED\ngl_FragColor = vec4(1., 0., 0., 1.);\n#else\ngl_FragColor = v_color;\n#endif\n}","TestShader.vert":"const float POS_PRECISION_FACTOR = 10.;\nconst float OFFSET_PRECISION_FACTOR = 10.;\nconst float SIZE_PRECISION_FACTOR = 10.;\nattribute  vec2      a_pos_packed;\nattribute  vec2      a_offset_packed;\nattribute  float     a_size_packed;\n#ifdef DATA_DRIVEN_COLOR\nconst float u_dataDrivenColor_validValues[4] = float[4](0., 0., 1., 0.);\nuniform    vec4      u_dataDrivenColor_colorFallback;\nuniform    vec4      u_dataDrivenColor_color;\n#endif\nuniform    float     u_view_zoomLevel;\n#include <test/TestShader.common.glsl>\n#ifdef DATA_DRIVEN_COLOR\nvec4 getColor(float value) {\nint index = -1;\nfor (int i = 0; i < 4; i++) {\nif (u_dataDrivenColor_validValues[i] == value) {\nindex = i;\nbreak;\n}\n}\nif (index == -1) {\nreturn u_dataDrivenColor_colorFallback;\n}\nreturn u_dataDrivenColor_color;\n}\n#endif\nvoid main() {\nvec2  a_pos = a_pos_packed / POS_PRECISION_FACTOR;\nvec2  a_offset = a_offset_packed / OFFSET_PRECISION_FACTOR;\nfloat a_size = a_size_packed / SIZE_PRECISION_FACTOR;\nvec4 color = vec4(1., 0., 0., 1.);\n#ifdef DATA_DRIVEN_COLOR\ncolor = getColor(1.);\n#endif\nvec2 offsetScaled = a_offset * a_size;\nvec4 pos = vec4(a_pos.xy + offsetScaled, 0., 1.);\ngl_Position = pos;\n#ifndef RETURN_RED\nv_color = color;\n#endif\nv_offset = a_offset;\n}"},tileInfo:{"tileInfo.frag":"uniform mediump sampler2D u_texture;\nvarying mediump vec2 v_tex;\nvoid main(void) {\nlowp vec4 color = texture2D(u_texture, v_tex);\ncolor.rgb *= color.a;\ngl_FragColor = color;\n}","tileInfo.vert":"attribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform mediump float u_depth;\nuniform mediump vec2 u_coord_ratio;\nuniform mediump vec2 u_delta;\nuniform mediump vec2 u_dimensions;\nvarying mediump vec2 v_tex;\nvoid main() {\nmediump vec2 offset = u_coord_ratio * vec2(u_delta + a_pos * u_dimensions);\nvec3 v_pos = u_dvsMat3 * vec3(offset, 1.0);\ngl_Position = vec4(v_pos.xy, 0.0, 1.0);\nv_tex = a_pos;\n}"},util:{"atan2.glsl":"float atan2(in float y, in float x) {\nfloat t0, t1, t2, t3, t4;\nt3 = abs(x);\nt1 = abs(y);\nt0 = max(t3, t1);\nt1 = min(t3, t1);\nt3 = 1.0 / t0;\nt3 = t1 * t3;\nt4 = t3 * t3;\nt0 =         - 0.013480470;\nt0 = t0 * t4 + 0.057477314;\nt0 = t0 * t4 - 0.121239071;\nt0 = t0 * t4 + 0.195635925;\nt0 = t0 * t4 - 0.332994597;\nt0 = t0 * t4 + 0.999995630;\nt3 = t0 * t3;\nt3 = (abs(y) > abs(x)) ? 1.570796327 - t3 : t3;\nt3 = x < 0.0 ?  3.141592654 - t3 : t3;\nt3 = y < 0.0 ? -t3 : t3;\nreturn t3;\n}","encoding.glsl":"const vec4 rgba2float_factors = vec4(\n255.0 / (256.0),\n255.0 / (256.0 * 256.0),\n255.0 / (256.0 * 256.0 * 256.0),\n255.0 / (256.0 * 256.0 * 256.0 * 256.0)\n);\nfloat rgba2float(vec4 rgba) {\nreturn dot(rgba, rgba2float_factors);\n}"}},function(e){let t=r;return e.split("/").forEach((e=>{t&&(t=t[e])})),t}));var r;function o(e){return i.resolveIncludes(e)}},24964:function(e,t,n){function i(e,t){if(null!==t){e.push(t.length);for(const n of t)n.serialize(e);return e}e.push(0)}function r(e,t,n){const i=e.readInt32(),r=new Array(i);for(let i=0;i<r.length;i++)r[i]=t.deserialize(e,n);return r}n.d(t,{_:function(){return r},j:function(){return i}})},55084:function(e,t,n){n.r(t),n.d(t,{default:function(){return _}});var i=n(53804),r=n(40633),o=n(60539),a=n(23502),s=(n(58941),n(13798),n(65953)),l=n(70016),u=n(60021),c=n(97311),f=n(58251),d=n(58374);let h=class extends((0,d.A)((0,u.e)(f.A))){update(e){this._strategy.update(e).catch((e=>{(0,o.zf)(e)||r.A.getLogger(this).error(e)})),this.notifyChange("updating")}attach(){this._bitmapContainer=new l.l,this.container.addChild(this._bitmapContainer),this._strategy=new c.A({container:this._bitmapContainer,fetchSource:this.fetchBitmapData.bind(this),requestUpdate:this.requestUpdate.bind(this)})}detach(){this._strategy.destroy(),this._strategy=null,this.container.removeChild(this._bitmapContainer),this._bitmapContainer.removeAllChildren()}viewChange(){}moveEnd(){this.requestUpdate()}fetchBitmapData(e,t,n){return this.layer.fetchImageBitmap(e,t,n)}async doRefresh(){this.requestUpdate()}isUpdating(){return this._strategy.updating||this.updateRequested}};(0,i._)([(0,a.MZ)()],h.prototype,"_strategy",void 0),(0,i._)([(0,a.MZ)()],h.prototype,"updating",void 0),h=(0,i._)([(0,s.$)("esri.views.2d.layers.BaseDynamicLayerView2D")],h);const _=h},60021:function(e,t,n){n.d(t,{e:function(){return I}});var i,r=n(53804),o=n(78879),a=n(61500),s=n(39819),l=n(40633),u=n(28181),c=n(23502),f=(n(58941),n(13798),n(65953)),d=n(7965),h=n(30488),_=n(28712),p=n(70963),m=n(95952),g=n(94548);let v=i=class extends g.A{constructor(e){super(e),this.type="rect",this.left=null,this.right=null,this.top=null,this.bottom=null}clone(){return new i({left:this.left,right:this.right,top:this.top,bottom:this.bottom})}commitVersionProperties(){this.commitProperty("left"),this.commitProperty("right"),this.commitProperty("top"),this.commitProperty("bottom")}};(0,r._)([(0,c.MZ)({type:[Number,String],json:{write:!0}})],v.prototype,"left",void 0),(0,r._)([(0,c.MZ)({type:[Number,String],json:{write:!0}})],v.prototype,"right",void 0),(0,r._)([(0,c.MZ)({type:[Number,String],json:{write:!0}})],v.prototype,"top",void 0),(0,r._)([(0,c.MZ)({type:[Number,String],json:{write:!0}})],v.prototype,"bottom",void 0),v=i=(0,r._)([(0,f.$)("esri.views.layers.support.ClipRect")],v);const x=v;var y=n(29627);let S=class extends g.A{constructor(e){super(e),this.type="path",this.path=[]}commitVersionProperties(){this.commitProperty("path")}};(0,r._)([(0,c.MZ)({type:[[[Number]]],json:{write:!0}})],S.prototype,"path",void 0),S=(0,r._)([(0,f.$)("esri.views.layers.support.Path")],S);const T=S;var b=n(39715);const E=o.A.ofType({key:"type",base:null,typeMap:{rect:x,path:T,geometry:y.A}}),A=new(o.A.ofType(_.W)),I=e=>{let t=class extends e{constructor(){super(...arguments),this.attached=!1,this.clips=new E,this.highlights=null,this.lastUpdateId=-1,this.moving=!1,this.updateRequested=!1,this._visibleAtCurrentScale=!0}initialize(){const e=this.view?.spatialReferenceLocked??!0,t=this.view?.spatialReference;t&&e&&!this.spatialReferenceSupported?this.addResolvingPromise(Promise.reject(new s.A("layerview:spatial-reference-incompatible","The spatial reference of this layer does not meet the requirements of the view",{layer:this.layer}))):(this.container||(this.container=new d.m),this.container.fadeTransitionEnabled=!0,this.container.visible=!1,this.container.endTransitions(),this.addHandles([(0,u.watch)((()=>this.suspended),(e=>{this.container&&(this.container.visible=!e)}),u.pc),(0,u.watch)((()=>this.updateSuspended),(e=>{this.view&&!e&&this.updateRequested&&this.view.requestUpdate()}),u.pc),(0,u.watch)((()=>this.layer?.opacity??1),(e=>{this.container&&(this.container.opacity=e)}),u.pc),(0,u.watch)((()=>this.layer&&"blendMode"in this.layer?this.layer.blendMode:"normal"),(e=>{this.container&&(this.container.blendMode=e)}),u.pc),(0,u.watch)((()=>this.layer&&"effect"in this.layer?this.layer.effect:null),(e=>{this.container&&(this.container.effect=e)}),u.pc),(0,u.watch)((()=>this._mergedHighlights.items.map((e=>({name:e.name,options:{fillColor:e.options.color,haloColor:e.options.haloColor,fillOpacity:e.options.fillOpacity,haloOpacity:e.options.haloOpacity,haloWidth:e.options.haloWidth,haloBlur:e.options.haloBlur}})))),(()=>{this.container.highlightGradient=(0,h.u4)(this.container.highlightGradient,this._mergedHighlights.items)}),u.pc),(0,u.watch)((()=>this._mergedHighlights.items.map((e=>e.name))),(()=>{this._updateHighlights()})),(0,u.on)((()=>this.clips),"change",(()=>{this.container&&(this.container.clips=this.clips)}),u.pc),(0,u.watch)((()=>({scale:this.view?.scale,scaleRange:this.layer&&"effectiveScaleRange"in this.layer?this.layer.effectiveScaleRange:null})),(({scale:e,scaleRange:t})=>{const n=(0,b.E5)(t,e);n!==this._visibleAtCurrentScale&&(this._visibleAtCurrentScale=n)}),u.pc)],"constructor"),this.view?.whenLayerView?this.view.whenLayerView(this.layer).then((e=>{e===this&&this.processAttach()}),(()=>{})):this.when().then((()=>{this.processAttach()}),(()=>{})))}_updateHighlights(){}destroy(){this.processDetach(),this.updateRequested=!1}get highlightOptions(){return(0,p.ax)(this)}set highlightOptions(e){(0,p.ou)(this,e)}get _mergedHighlights(){if(!this.view)return A;if(!this.highlights)return this.view.highlights;const e=this.view.highlights.clone();for(const t of this.highlights){const n=e.find((e=>e.name===t.name));n&&(n.options=t.options)}return e}get scheduler(){return this.view.scheduler}get spatialReferenceSupported(){const e=this.view?.spatialReference;return null==e||this.supportsSpatialReference(e)}get updating(){return this.spatialReferenceSupported&&(!this.attached||!this.suspended&&(this.updateRequested||this.isUpdating())||!!this._updatingHandles?.updating||this.container.transitioning)}get visibleAtCurrentScale(){return this._visibleAtCurrentScale}processAttach(){this.isResolved()&&!this.attached&&!this.destroyed&&this.spatialReferenceSupported&&(this.attach(),this.attached=!0,this.requestUpdate())}processDetach(){this.attached&&(this.attached=!1,this.removeHandles("attach"),this.detach(),this.updateRequested=!1)}requestUpdate(){this.destroyed||this.updateRequested||(this.updateRequested=!0,this.updateSuspended||this.view.requestUpdate())}processUpdate(e){!this.isFulfilled()||this.isResolved()?(this._set("updateParameters",e),this.updateRequested&&!this.updateSuspended&&(this.updateRequested=!1,this.update(e))):this.updateRequested=!1}hitTest(e,t){return Promise.resolve(null)}supportsSpatialReference(e){return!0}canResume(){if(!this.spatialReferenceSupported)return!1;switch(this.layer?.type){case"link-chart":case"knowledge-graph-sublayer":break;default:if(null!=(e=this.view)&&"object"==typeof e&&"2d"===e.type&&"linkchart"===e.view2dType&&!this.view.inGeographicLayout)return!1}var e;return!!super.canResume()&&this.visibleAtCurrentScale}getSuspendInfo(){const e=super.getSuspendInfo(),t=!this.spatialReferenceSupported;return t&&(e.spatialReferenceNotSupported=t),e}addAttachHandles(e){this.addHandles(e,"attach")}_getHighlightBits(e){e=new Set(e);let t=1,n=0;if(!this.view)return 0;const i=this._mergedHighlights;for(const{name:r}of i)e.delete(r)&&(n=t),t<<=1;for(const t of e)l.A.getLogger(this).error("#highlights",`${t} was not found. Features in this group will not be highlighted.`);return n}};return(0,r._)([(0,c.MZ)()],t.prototype,"attached",void 0),(0,r._)([(0,c.MZ)({type:E,set(e){const t=(0,a.V)(e,this._get("clips"),E);this._set("clips",t)}})],t.prototype,"clips",void 0),(0,r._)([(0,c.MZ)()],t.prototype,"container",void 0),(0,r._)([(0,c.MZ)({type:m.A})],t.prototype,"highlightOptions",null),(0,r._)([(0,c.MZ)({type:o.A.ofType(_.W)})],t.prototype,"highlights",void 0),(0,r._)([(0,c.MZ)()],t.prototype,"_mergedHighlights",null),(0,r._)([(0,c.MZ)()],t.prototype,"moving",void 0),(0,r._)([(0,c.MZ)({readOnly:!0})],t.prototype,"spatialReferenceSupported",null),(0,r._)([(0,c.MZ)({readOnly:!0})],t.prototype,"updateParameters",void 0),(0,r._)([(0,c.MZ)()],t.prototype,"updateRequested",void 0),(0,r._)([(0,c.MZ)()],t.prototype,"updating",null),(0,r._)([(0,c.MZ)()],t.prototype,"view",void 0),(0,r._)([(0,c.MZ)()],t.prototype,"_visibleAtCurrentScale",void 0),(0,r._)([(0,c.MZ)({readOnly:!0})],t.prototype,"visibleAtCurrentScale",null),t=(0,r._)([(0,f.$)("esri.views.2d.layers.LayerView2D")],t),t}},97311:function(e,t,n){n.d(t,{A:function(){return S}});var i=n(53804),r=n(83525),o=(n(58941),n(60539)),a=n(23502),s=(n(40633),n(13798),n(65953)),l=n(87416),u=n(57652),c=n(76226);const f=Math.PI/180;function d(e){return e*f}function h(e,t){const n=d(t.rotation),i=Math.abs(Math.cos(n)),r=Math.abs(Math.sin(n)),[o,a]=t.size;return e[0]=Math.round(a*r+o*i),e[1]=Math.round(a*i+o*r),e}var _=n(82603),p=n(54608),m=n(36008);const g=(0,l.vt)(),v=[0,0],x=new m.A(0,0,0,0);let y=class extends r.A{constructor(e){super(e),this._imagePromise=null,this.bitmaps=[],this.hidpi=false,this.imageMaxWidth=2048,this.imageMaxHeight=2048,this.imageRotationSupported=false,this.imageNormalizationSupported=false,this.update=(0,o.sg)((async(e,t)=>{if((0,o.Te)(t),!e.stationary||this.destroyed)return;const n=e.state,i=(0,u.Vp)(n.spatialReference),r=this.hidpi?e.pixelRatio:1,a=n.worldScreenWidth>0,s=a&&this.imageNormalizationSupported&&n.worldScreenWidth<n.size[0],l=Math.round((this.imageMaxWidth??0)/r),c=Math.round((this.imageMaxHeight??0)/r);s?(v[0]=n.worldScreenWidth,v[1]=n.size[1]):this.imageRotationSupported?(v[0]=n.size[0],v[1]=n.size[1]):h(v,n);const f=Math.floor(v[0])>l||Math.floor(v[1])>c,d=i&&(n.extent.xmin<i.valid[0]||n.extent.xmax>i.valid[1]),_=!this.imageNormalizationSupported&&d,p=!f&&!_,m=this.imageRotationSupported?n.rotation:0,g=this.container.children.slice();if(p){const e=s?n.paddedViewState.center:n.center;this._imagePromise=this._singleExport(n,v,e,n.resolution,m,r,t)}else{let e=Math.min(l,c);a&&(e=Math.min(n.worldScreenWidth,e),e=Math.round(n.worldScreenWidth/Math.ceil(n.worldScreenWidth/e))),this._imagePromise=this._tiledExport(n,e,r,t)}try{const e=await this._imagePromise??[];(0,o.Te)(t);const n=[];if(this._imagePromise=null,this.destroyed)return;this.bitmaps=e;for(const t of g)e.includes(t)||n.push(t.fadeOut().then((()=>{t.remove(),t.destroy()})));for(const t of e)n.push(t.fadeIn());await Promise.all(n)}catch(e){this._imagePromise=null,(0,o.QP)(e)}}),5e3),this.updateExports=(0,o.sg)((async e=>{const t=[];for(const n of this.container.children){if(!n.visible||!n.stage)return;t.push(e(n).then((()=>{n.invalidateTexture(),n.requestRender()})))}this._imagePromise=(0,o.Lx)(t).then((()=>this._imagePromise=null)),await this._imagePromise}))}destroy(){this.bitmaps.forEach((e=>e.destroy())),this.bitmaps=[]}get updating(){return!this.destroyed&&null!==this._imagePromise}async _export(e,t,n,i,r,a){const s=await this.fetchSource(e,Math.floor(t*r),Math.floor(n*r),{rotation:i,pixelRatio:r,signal:a});(0,o.Te)(a);const l=new _.mb(null,!0);return l.x=e.xmin,l.y=e.ymax,l.resolution=e.width/t,l.rotation=i,l.pixelRatio=r,l.opacity=0,this.container.addChild(l),await l.setSourceAsync(s,a),(0,o.Te)(a),l}async _singleExport(e,t,n,i,r,o,a){!function(e,t,n,i){const[r,o]=t,[a,s]=i,l=.5*n;e[0]=r-l*a,e[1]=o-l*s,e[2]=r+l*a,e[3]=o+l*s}(g,n,i,t);const s=(0,l.w1)(g,e.spatialReference);return[await this._export(s,t[0],t[1],r,o,a)]}_tiledExport(e,t,n,i){const r=c.default.create({size:t,spatialReference:e.spatialReference,scales:[e.scale]}),o=new p.A(r),a=o.getTileCoverage(e);if(!a)return null;const s=[];return a.forEach(((r,a,u,c)=>{x.set(r,a,u,0),o.getTileBounds(g,x);const f=(0,l.w1)(g,e.spatialReference);s.push(this._export(f,t,t,0,n,i).then((e=>(0!==c&&(x.set(r,a,u,c),o.getTileBounds(g,x),e.x=g[0],e.y=g[3]),e))))})),Promise.all(s)}};(0,i._)([(0,a.MZ)()],y.prototype,"_imagePromise",void 0),(0,i._)([(0,a.MZ)()],y.prototype,"bitmaps",void 0),(0,i._)([(0,a.MZ)()],y.prototype,"container",void 0),(0,i._)([(0,a.MZ)()],y.prototype,"fetchSource",void 0),(0,i._)([(0,a.MZ)()],y.prototype,"hidpi",void 0),(0,i._)([(0,a.MZ)()],y.prototype,"imageMaxWidth",void 0),(0,i._)([(0,a.MZ)()],y.prototype,"imageMaxHeight",void 0),(0,i._)([(0,a.MZ)()],y.prototype,"imageRotationSupported",void 0),(0,i._)([(0,a.MZ)()],y.prototype,"imageNormalizationSupported",void 0),(0,i._)([(0,a.MZ)()],y.prototype,"requestUpdate",void 0),(0,i._)([(0,a.MZ)()],y.prototype,"updating",null),y=(0,i._)([(0,s.$)("esri.views.2d.layers.support.ExportStrategy")],y);const S=y},58251:function(e,t,n){n.d(t,{A:function(){return p}});var i=n(53804),r=n(83525),o=n(48996),a=n(88781),s=n(40633),l=n(95929),u=n(62560),c=n(23502),f=(n(58941),n(13798),n(65953)),d=n(20248),h=n(39715);let _=class extends((0,a.sA)((0,u.g)(o.A.EventedMixin(r.A)))){constructor(e){super(e),this._updatingHandles=new d.U,this.layer=null,this.parent=null}initialize(){this.when().catch((e=>{if("layerview:create-error"!==e.name){const t=this.layer&&this.layer.id||"no id",n=this.layer?.title||"no title";s.A.getLogger(this).error("#resolve()",`Failed to resolve layer view (layer title: '${n}', id: '${t}')`,e)}}))}destroy(){this._updatingHandles=(0,l.pR)(this._updatingHandles)}get fullOpacity(){return(this.layer?.opacity??1)*(this.parent?.fullOpacity??1)}get suspended(){return this.destroyed||!this.canResume()}get suspendInfo(){return this.getSuspendInfo()}get legendEnabled(){return!this.suspended&&!0===this.layer?.legendEnabled}get updating(){return!(!this._updatingHandles?.updating&&!this.isUpdating())}get updatingProgress(){return this.updating?0:1}get updateSuspended(){return this.suspended}get visible(){return!0===this.layer?.visible}set visible(e){this._overrideIfSome("visible",e)}get visibleAtCurrentScale(){return!0}get visibleAtCurrentTimeExtent(){const e=this.view.timeExtent,t=this.layer?.visibilityTimeExtent;return!e||!t||!e.intersection(t).isEmpty}canResume(){const e=this.layer&&"effectiveScaleRange"in this.layer?this.layer.effectiveScaleRange:null;return this.visible&&this.layer?.loaded&&!this.parent?.suspended&&this.view?.ready&&(0,h.g7)(e)&&this.visibleAtCurrentScale&&this.visibleAtCurrentTimeExtent||!1}getSuspendInfo(){const e=this.parent?.suspended?this.parent.suspendInfo:{};this.view?.ready||(e.viewNotReady=!0),this.layer&&this.layer.loaded||(e.layerNotLoaded=!0);const t=this.layer&&"effectiveScaleRange"in this.layer?this.layer.effectiveScaleRange:null;return(0,h.g7)(t)&&this.visibleAtCurrentScale||(e.outsideScaleRange=!0),this.visibleAtCurrentTimeExtent||(e.outsideVisibilityTimeExtent=!0),this.visible||(e.layerInvisible=!0),e}isUpdating(){return!1}};(0,i._)([(0,c.MZ)()],_.prototype,"view",void 0),(0,i._)([(0,c.MZ)()],_.prototype,"fullOpacity",null),(0,i._)([(0,c.MZ)()],_.prototype,"layer",void 0),(0,i._)([(0,c.MZ)()],_.prototype,"parent",void 0),(0,i._)([(0,c.MZ)({readOnly:!0})],_.prototype,"suspended",null),(0,i._)([(0,c.MZ)({readOnly:!0})],_.prototype,"suspendInfo",null),(0,i._)([(0,c.MZ)({readOnly:!0})],_.prototype,"legendEnabled",null),(0,i._)([(0,c.MZ)({type:Boolean,readOnly:!0})],_.prototype,"updating",null),(0,i._)([(0,c.MZ)({readOnly:!0})],_.prototype,"updatingProgress",null),(0,i._)([(0,c.MZ)()],_.prototype,"updateSuspended",null),(0,i._)([(0,c.MZ)()],_.prototype,"visible",null),(0,i._)([(0,c.MZ)({readOnly:!0})],_.prototype,"visibleAtCurrentScale",null),(0,i._)([(0,c.MZ)({readOnly:!0})],_.prototype,"visibleAtCurrentTimeExtent",null),_=(0,i._)([(0,f.$)("esri.views.layers.LayerView")],_);const p=_},58374:function(e,t,n){n.d(t,{A:function(){return l}});var i=n(53804),r=n(40633),o=n(60539),a=n(28181),s=(n(58941),n(13798),n(39819),n(65953));const l=e=>{let t=class extends e{initialize(){this.addHandles((0,a.on)((()=>this.layer),"refresh",(e=>{this.doRefresh(e.dataChanged).catch((e=>{(0,o.zf)(e)||r.A.getLogger(this).error(e)}))})),"RefreshableLayerView")}};return t=(0,i._)([(0,s.$)("esri.views.layers.RefreshableLayerView")],t),t}},94548:function(e,t,n){n.d(t,{A:function(){return l}});var i=n(53804),r=n(30905),o=n(23502),a=(n(58941),n(40633),n(13798),n(65953));let s=class extends r.oY{get version(){return this.commitVersionProperties(),(this._get("version")||0)+1}};(0,i._)([(0,o.MZ)({readOnly:!0})],s.prototype,"version",null),s=(0,i._)([(0,a.$)("esri.views.layers.support.ClipArea")],s);const l=s},29627:function(e,t,n){n.d(t,{A:function(){return _}});var i,r=n(53804),o=(n(50917),n(23502)),a=(n(58941),n(40633),n(13798),n(65953)),s=n(46556),l=n(74697),u=n(94548),c=n(91484),f=n(44740);const d={base:s.A,key:"type",typeMap:{extent:c.default,polygon:f.A}};let h=i=class extends u.A{constructor(e){super(e),this.type="geometry",this.geometry=null}clone(){return new i({geometry:this.geometry?.clone()??null})}commitVersionProperties(){this.commitProperty("geometry")}};(0,r._)([(0,o.MZ)({types:d,json:{read:l.rS,write:!0}})],h.prototype,"geometry",void 0),h=i=(0,r._)([(0,a.$)("esri.views.layers.support.Geometry")],h);const _=h},39715:function(e,t,n){function i(e){return e&&"function"==typeof e.highlight}function r(e,t,n){return null==e||e>=n&&(0===t||e<=t)}function o(e,t){if(t&&e){const{minScale:n,maxScale:i}=e;if(function(e,t){return null!=e&&e>0||null!=t&&t>0}(n,i))return r(t,n,i)}return!0}function a(e){return!e?.minScale||!e.maxScale||e.minScale>=e.maxScale}n.d(t,{E5:function(){return o},JU:function(){return r},Of:function(){return i},g7:function(){return a}}),n(39819)},86305:function(e,t,n){n.d(t,{g:function(){return u}});var i=n(50659),r=(n(58941),n(40633)),o=n(24540),a=n(41835),s=n(85456);const l=()=>r.A.getLogger("esri.views.webgl.BufferObject");class u{static createIndex(e,t,n){return new u(e,s.NZ.ELEMENT_ARRAY_BUFFER,t,n)}static createVertex(e,t,n){return new u(e,s.NZ.ARRAY_BUFFER,t,n)}static createUniform(e,t,n){return new u(e,s.NZ.UNIFORM_BUFFER,t,n)}static createPixelPack(e,t=s._U.STREAM_READ,n){const i=new u(e,s.NZ.PIXEL_PACK_BUFFER,t);return n&&i.setSize(n),i}static createPixelUnpack(e,t=s._U.STREAM_DRAW,n){return new u(e,s.NZ.PIXEL_UNPACK_BUFFER,t,n)}static createTransformFeedback(e,t=s._U.STATIC_DRAW,n){const i=new u(e,s.NZ.TRANSFORM_FEEDBACK_BUFFER,t);return i.setSize(n),i}constructor(e,t,n,i){this._context=e,this.bufferType=t,this.usage=n,this._glName=null,this._size=-1,this._indexType=void 0,e.instanceCounter.increment(s.vt.BufferObject,this),this._glName=this._context.gl.createBuffer(),(0,a.Y2)(this._context.gl),i&&this.setData(i)}get glName(){return this._glName}get size(){return this._size}get indexType(){return this._indexType}get usedMemory(){if(this.bufferType===s.NZ.ELEMENT_ARRAY_BUFFER){if(this._indexType===s.pe.UNSIGNED_INT)return 4*this._size;if(this._indexType===s.pe.UNSIGNED_SHORT)return 2*this._size}return this._size}get _isVAOAware(){return this.bufferType===s.NZ.ELEMENT_ARRAY_BUFFER||this.bufferType===s.NZ.ARRAY_BUFFER}dispose(){this._context?.gl?(this._glName&&(this._context.gl.deleteBuffer(this._glName),this._glName=null),this._context.instanceCounter.decrement(s.vt.BufferObject,this),this._context=null):this._glName&&l().warn("Leaked WebGL buffer object")}setSize(e,t=null){if(this.bufferType===s.NZ.ELEMENT_ARRAY_BUFFER&&null!=t)switch(this._indexType=t,t){case s.pe.UNSIGNED_SHORT:e*=2;break;case s.pe.UNSIGNED_INT:e*=4}this._setBufferData(e)}setData(e){if(!e)return;let t=e.byteLength;this.bufferType===s.NZ.ELEMENT_ARRAY_BUFFER&&((0,o.mg)(e)?this._indexType=s.pe.UNSIGNED_BYTE:(0,o.jq)(e)?(t/=2,this._indexType=s.pe.UNSIGNED_SHORT):(0,o.XJ)(e)&&(t/=4,this._indexType=s.pe.UNSIGNED_INT)),this._setBufferData(t,e)}_setBufferData(e,t=null){this._size=e;const n=this._context.getBoundVAO();this._isVAOAware&&this._context.bindVAO(null),this._context.bindBuffer(this);const i=this._context.gl;null!=t?i.bufferData(this.bufferType,t,this.usage):i.bufferData(this.bufferType,e,this.usage),(0,a.Y2)(i),this._isVAOAware&&this._context.bindVAO(n)}setSubData(e,t,n,i){if(!e)return;const r=this._context.getBoundVAO();this._isVAOAware&&this._context.bindVAO(null),this._context.bindBuffer(this);const{gl:o}=this._context;o.bufferSubData(this.bufferType,t*e.BYTES_PER_ELEMENT,e,n,i-n),(0,a.Y2)(o),this._isVAOAware&&this._context.bindVAO(r)}getSubData(e,t=0,n,r){if(n<0||r<0)return;const o=function(e){return(0,i.Xj)(e)}(e)?e.BYTES_PER_ELEMENT:1;if(o*((n??0)+(r??0))>e.byteLength)return;t+o*(r??0)>this.usedMemory&&l().warn("Potential problem getting subdata: requested data exceeds buffer size!");const a=this._context.gl;this.bufferType===s.NZ.TRANSFORM_FEEDBACK_BUFFER?(this._context.bindBuffer(this,s.NZ.TRANSFORM_FEEDBACK_BUFFER),a.getBufferSubData(s.NZ.TRANSFORM_FEEDBACK_BUFFER,t,e,n,r),this._context.unbindBuffer(s.NZ.TRANSFORM_FEEDBACK_BUFFER)):(this._context.bindBuffer(this,s.NZ.COPY_READ_BUFFER),a.getBufferSubData(s.NZ.COPY_READ_BUFFER,t,e,n,r),this._context.unbindBuffer(s.NZ.COPY_READ_BUFFER))}async getSubDataAsync(e,t=0,n,i){await this._context.clientWaitAsync(),this.getSubData(e,t,n,i)}}},96402:function(e,t,n){n.d(t,{H:function(){return f}}),n(58941);var i=n(40633),r=n(95929),o=n(86305),a=n(41835),s=n(85456),l=n(69452),u=n(49414),c=n(12285);class f{constructor(e,t,n=null){this._context=e,this._glName=null,this._colorAttachments=new Map,this._depthStencilBuffer=null,this._depthStencilTexture=null,this._initialized=!1,e.instanceCounter.increment(s.vt.FramebufferObject,this);const i=d(t)?t:new c.g(this._context,t);if(this._colorAttachments.set(s.Nm.COLOR_ATTACHMENT0,i),this._validateTextureDescriptor(i.descriptor),this._validateColorAttachmentPoint(s.Nm.COLOR_ATTACHMENT0),null!=n)if(function(e){return d(e)||null!=e&&"pixelFormat"in e}(n))this._depthStencilTexture=d(n)?n:new c.g(this._context,n),this._validateTextureDescriptor(this._depthStencilTexture.descriptor);else{const e=function(e){return null!=e&&"type"in e&&e.type===l.p.RenderBuffer}(n)?n:new u.l(this._context,n);this._depthStencilBuffer=e,this._validateRenderBufferDescriptor(e.descriptor)}}dispose(){if(0===this._colorAttachments.size&&!this._glName)return;const e=this._context.getBoundFramebufferObject();this._colorAttachments.forEach(((e,t)=>this.detachColorTexture(t)?.dispose())),this.detachDepthStencilBuffer()?.dispose(),this.detachDepthStencilTexture()?.dispose(),this._glName&&(this._context.gl.deleteFramebuffer(this._glName),this._glName=null),this._context.bindFramebuffer(e),this._context.instanceCounter.decrement(s.vt.FramebufferObject,this)}get glName(){return this._glName}get colorTexture(){return this._colorAttachments.get(s.Nm.COLOR_ATTACHMENT0)}get depthStencil(){return this._depthStencilTexture||this._depthStencilBuffer}get depthStencilTexture(){return this._depthStencilTexture}get width(){const e=this._colorAttachments.get(s.Nm.COLOR_ATTACHMENT0);return e?.descriptor?.width??0}get height(){const e=this._colorAttachments.get(s.Nm.COLOR_ATTACHMENT0);return e?.descriptor?.height??0}get usedMemory(){return[...this._colorAttachments].reduce(((e,[t,n])=>e+n.usedMemory),this.depthStencil?.usedMemory??0)}getColorTexture(e){const t=this._colorAttachments.get(e);return t&&d(t)?t:null}get colorAttachments(){return[...this._colorAttachments.keys()]}attachColorTexture(e,t=s.Nm.COLOR_ATTACHMENT0){if(!e)return;this._validateColorAttachmentPoint(t);const n=e.descriptor;this._validateTextureDescriptor(n),this.detachColorTexture(t)?.dispose(),this._initialized&&(this._context.bindFramebuffer(this),this._framebufferTexture2D(e.glName,t)),this._colorAttachments.set(t,e)}detachColorTexture(e=s.Nm.COLOR_ATTACHMENT0){const t=this._colorAttachments.get(e);if(t){if(this._initialized){const t=this._context.getBoundFramebufferObject();this._context.bindFramebuffer(this),this._framebufferTexture2D(null,e),this._context.bindFramebuffer(t)}return this._colorAttachments.delete(e),t}}setColorTextureTarget(e,t=s.Nm.COLOR_ATTACHMENT0){const n=this._colorAttachments.get(t);n&&this._framebufferTexture2D(n.glName,t,e)}attachDepthStencil(e){if(e)switch(e.type){case l.p.Texture:return this._attachDepthStencilTexture(e);case l.p.RenderBuffer:return this._attachDepthStencilBuffer(e)}}_attachDepthStencilTexture(e){if(null==e)return;const t=e.descriptor;t.pixelFormat!==s.Ab.DEPTH_STENCIL&&t.pixelFormat!==s.Ab.DEPTH24_STENCIL8&&console.error("Depth/Stencil texture must have a pixel type of DEPTH_STENCIL!"),t.dataType!==s.ld.UNSIGNED_INT_24_8&&console.error("Depth/Stencil texture must have data type of UNSIGNED_INT_24_8!"),this._validateTextureDescriptor(t),this._disposeDepthStencilAttachments(),this._initialized&&(this._context.bindFramebuffer(this),this._framebufferTexture2D(e.glName,s.nI)),this._depthStencilTexture?.dispose(),this._depthStencilTexture=e}detachDepthStencilTexture(){const e=this._depthStencilTexture;if(e&&this._initialized){const e=this._context.getBoundFramebufferObject();this._context.bindFramebuffer(this),this._framebufferTexture2D(null,s.nI),this._context.bindFramebuffer(e)}return this._depthStencilTexture=null,e}_attachDepthStencilBuffer(e){if(null==e)return;const t=e.descriptor;if(this._validateRenderBufferDescriptor(t),this._disposeDepthStencilAttachments(),this._initialized){this._context.bindFramebuffer(this);const n=this._context.gl,i=this._getGLAttachmentPoint(t);n.framebufferRenderbuffer(s.R.FRAMEBUFFER,i,n.RENDERBUFFER,e.glName)}this._depthStencilBuffer=e}detachDepthStencilBuffer(){const e=this._depthStencilBuffer;if(e&&this._initialized){const t=this._context.getBoundFramebufferObject();this._context.bindFramebuffer(this);const n=this._context.gl,i=this._getGLAttachmentPoint(e.descriptor);n.framebufferRenderbuffer(s.R.FRAMEBUFFER,i,n.RENDERBUFFER,null),this._context.bindFramebuffer(t)}return this._depthStencilBuffer=null,e}copyToTexture(e,t,n,i,r,o,a){(e<0||t<0||r<0||o<0)&&console.error("Offsets cannot be negative!"),(n<=0||i<=0)&&console.error("Copy width and height must be greater than zero!");const l=a.descriptor;a.descriptor.target!==s.Ap.TEXTURE_2D&&console.error("Texture target must be TEXTURE_2D!"),(null==l?.width||null==l?.height||e+n>this.width||t+i>this.height||r+n>l.width||o+i>l.height)&&console.error("Bad dimensions, the current input values will attempt to read or copy out of bounds!");const u=this._context,f=u.bindTexture(a,c.g.TEXTURE_UNIT_FOR_UPDATES);u.setActiveTexture(c.g.TEXTURE_UNIT_FOR_UPDATES),u.bindFramebuffer(this),u.gl.copyTexSubImage2D(s.Ap.TEXTURE_2D,0,r,o,e,t,n,i),u.bindTexture(f,c.g.TEXTURE_UNIT_FOR_UPDATES)}readPixels(e,t,n,i,r,o,a){(n<=0||i<=0)&&console.error("Copy width and height must be greater than zero!"),a||console.error("Target memory is not initialized!"),this._context.bindFramebuffer(this),this._context.gl.readPixels(e,t,n,i,r,o,a)}async readPixelsAsync(e,t,n,i,r,a,l){const{gl:u}=this._context,c=o.g.createPixelPack(this._context,s._U.STREAM_READ,l.byteLength);this._context.bindBuffer(c);const f=this._context.getBoundFramebufferObject();this._context.bindFramebuffer(this),u.readPixels(e,t,n,i,r,a,0),this._context.unbindBuffer(s.NZ.PIXEL_PACK_BUFFER),this._context.bindFramebuffer(f),await c.getSubDataAsync(l),c.dispose()}resize(e,t){if(this.width===e&&this.height===t)return;const n={width:e,height:t};h(n,this._context.parameters.maxTextureSize),this._colorAttachments.forEach((e=>e.resize(n.width,n.height))),this._depthStencilTexture?.resize(n.width,n.height),this._initialized&&(h(n,this._context.parameters.maxRenderbufferSize),this._depthStencilBuffer?.resize(n.width,n.height),this._context.getBoundFramebufferObject()===this&&this._context.bindFramebuffer(null),this._initialized=!1)}initializeAndBind(e=s.R.FRAMEBUFFER){const t=this._context.gl;if(this._initialized)return void t.bindFramebuffer(e,this.glName);this._glName&&t.deleteFramebuffer(this._glName);const n=t.createFramebuffer();if(t.bindFramebuffer(e,n),this._colorAttachments.forEach(((t,n)=>this._framebufferTexture2D(t.glName,n,_(t),e))),this._depthStencilBuffer){const n=this._getGLAttachmentPoint(this._depthStencilBuffer.descriptor);t.framebufferRenderbuffer(e,n,t.RENDERBUFFER,this._depthStencilBuffer.glName)}else this._depthStencilTexture&&this._framebufferTexture2D(this._depthStencilTexture.glName,t.DEPTH_STENCIL_ATTACHMENT,_(this._depthStencilTexture),e);(0,a.en)()&&t.checkFramebufferStatus(e)!==t.FRAMEBUFFER_COMPLETE&&console.error("Framebuffer is incomplete!"),this._glName=n,this._initialized=!0}_framebufferTexture2D(e,t=s.Nm.COLOR_ATTACHMENT0,n=s.Ap.TEXTURE_2D,i=s.R.FRAMEBUFFER,r=0){this._context.gl.framebufferTexture2D(i,t,n,e,r)}_disposeDepthStencilAttachments(){const e=this._context.gl;if(this._depthStencilBuffer){if(this._initialized){this._context.bindFramebuffer(this);const t=this._getGLAttachmentPoint(this._depthStencilBuffer.descriptor);e.framebufferRenderbuffer(s.R.FRAMEBUFFER,t,e.RENDERBUFFER,null)}this._depthStencilBuffer=(0,r.WD)(this._depthStencilBuffer)}this._depthStencilTexture&&(this._initialized&&(this._context.bindFramebuffer(this),this._framebufferTexture2D(null,e.DEPTH_STENCIL_ATTACHMENT)),this._depthStencilTexture=(0,r.WD)(this._depthStencilTexture))}_validateTextureDescriptor(e){e.target!==s.Ap.TEXTURE_2D&&e.target!==s.Ap.TEXTURE_CUBE_MAP&&console.error("Texture type must be TEXTURE_2D or TEXTURE_CUBE_MAP!"),h(e,this._context.parameters.maxTextureSize),this._validateBufferDimensions(e)}_validateRenderBufferDescriptor(e){h(e,this._context.parameters.maxRenderbufferSize),this._validateBufferDimensions(e)}_validateBufferDimensions(e){e.width<=0&&(e.width=this.width),e.height<=0&&(e.height=this.height),this.width>0&&this.height>0&&(this.width===e.width&&this.height===e.height||console.error("Attachment size must match framebuffer size!"))}_getGLAttachmentPoint(e){switch(e.internalFormat){case s.yQ.DEPTH_COMPONENT16:case s.yQ.DEPTH_COMPONENT24:case s.yQ.DEPTH_COMPONENT32F:return this._context.gl.DEPTH_ATTACHMENT;case s.yQ.DEPTH24_STENCIL8:case s.yQ.DEPTH32F_STENCIL8:case s.yQ.DEPTH_STENCIL:return this._context.gl.DEPTH_STENCIL_ATTACHMENT;case s.yQ.STENCIL_INDEX8:return this._context.gl.STENCIL_ATTACHMENT}}_validateColorAttachmentPoint(e){if(-1===f._MAX_COLOR_ATTACHMENTS){const{gl:e}=this._context;f._MAX_COLOR_ATTACHMENTS=e.getParameter(e.MAX_COLOR_ATTACHMENTS)}const t=e-s.Nm.COLOR_ATTACHMENT0;t+1>f._MAX_COLOR_ATTACHMENTS&&i.A.getLogger("esri.views.webgl.FrameBufferObject").error("esri.FrameBufferObject",`illegal attachment point for color attachment: ${t+1}. Implementation supports up to ${f._MAX_COLOR_ATTACHMENTS} color attachments`)}}function d(e){return null!=e&&"type"in e&&e.type===l.p.Texture}function h(e,t){const n=Math.max(e.width,e.height);if(n>t){i.A.getLogger("esri.views.webgl.FramebufferObject").warn(`Resizing FBO attachment size ${e.width}x${e.height} to device limit ${t}`);const r=t/n;return e.width=Math.round(e.width*r),e.height=Math.round(e.height*r),!1}return!0}function _(e){return e.descriptor.target===s.Ap.TEXTURE_CUBE_MAP?s.Ap.TEXTURE_CUBE_MAP_POSITIVE_X:s.Ap.TEXTURE_2D}f._MAX_COLOR_ATTACHMENTS=-1},95904:function(e,t,n){n.d(t,{B:function(){return y}}),n(58941);var i=n(41835),r=n(85456);const o=["layout","centroid","smooth","case","mat2x2","mat2x3","mat2x4","mat3x2","mat3x3","mat3x4","mat4x2","mat4x3","mat4x4","uint","uvec2","uvec3","uvec4","samplerCubeShadow","sampler2DArray","sampler2DArrayShadow","isampler2D","isampler3D","isamplerCube","isampler2DArray","usampler2D","usampler3D","usamplerCube","usampler2DArray","coherent","restrict","readonly","writeonly","resource","atomic_uint","noperspective","patch","sample","subroutine","common","partition","active","filter","image1D","image2D","image3D","imageCube","iimage1D","iimage2D","iimage3D","iimageCube","uimage1D","uimage2D","uimage3D","uimageCube","image1DArray","image2DArray","iimage1DArray","iimage2DArray","uimage1DArray","uimage2DArray","image1DShadow","image2DShadow","image1DArrayShadow","image2DArrayShadow","imageBuffer","iimageBuffer","uimageBuffer","sampler1DArray","sampler1DArrayShadow","isampler1D","isampler1DArray","usampler1D","usampler1DArray","isampler2DRect","usampler2DRect","samplerBuffer","isamplerBuffer","usamplerBuffer","sampler2DMS","isampler2DMS","usampler2DMS","sampler2DMSArray","isampler2DMSArray","usampler2DMSArray","trunc","round","roundEven","isnan","isinf","floatBitsToInt","floatBitsToUint","intBitsToFloat","uintBitsToFloat","packSnorm2x16","unpackSnorm2x16","packUnorm2x16","unpackUnorm2x16","packHalf2x16","unpackHalf2x16","outerProduct","transpose","determinant","inverse","texture","textureSize","textureProj","textureLod","textureOffset","texelFetch","texelFetchOffset","textureProjOffset","textureLodOffset","textureProjLod","textureProjLodOffset","textureGrad","textureGradOffset","textureProjGrad","textureProjGradOffset"],a=["precision","highp","mediump","lowp","attribute","const","uniform","varying","break","continue","do","for","while","if","else","in","out","inout","float","int","void","bool","true","false","discard","return","mat2","mat3","mat4","vec2","vec3","vec4","ivec2","ivec3","ivec4","bvec2","bvec3","bvec4","sampler1D","sampler2D","sampler3D","samplerCube","sampler1DShadow","sampler2DShadow","struct","asm","class","union","enum","typedef","template","this","packed","goto","switch","default","inline","noinline","volatile","public","static","extern","external","interface","long","short","double","half","fixed","unsigned","input","output","hvec2","hvec3","hvec4","dvec2","dvec3","dvec4","fvec2","fvec3","fvec4","sampler2DRect","sampler3DRect","sampler2DRectShadow","sizeof","cast","namespace","using"],s=["<<=",">>=","++","--","<<",">>","<=",">=","==","!=","&&","||","+=","-=","*=","/=","%=","&=","^^","^=","|=","(",")","[","]",".","!","~","*","/","%","+","-","<",">","&","^","|","?",":","=",",",";","{","}"],l=["abs","acos","all","any","asin","atan","ceil","clamp","cos","cross","dFdx","dFdy","degrees","distance","dot","equal","exp","exp2","faceforward","floor","fract","gl_BackColor","gl_BackLightModelProduct","gl_BackLightProduct","gl_BackMaterial","gl_BackSecondaryColor","gl_ClipPlane","gl_ClipVertex","gl_Color","gl_DepthRange","gl_DepthRangeParameters","gl_EyePlaneQ","gl_EyePlaneR","gl_EyePlaneS","gl_EyePlaneT","gl_Fog","gl_FogCoord","gl_FogFragCoord","gl_FogParameters","gl_FragColor","gl_FragCoord","gl_FragData","gl_FragDepth","gl_FragDepthEXT","gl_FrontColor","gl_FrontFacing","gl_FrontLightModelProduct","gl_FrontLightProduct","gl_FrontMaterial","gl_FrontSecondaryColor","gl_LightModel","gl_LightModelParameters","gl_LightModelProducts","gl_LightProducts","gl_LightSource","gl_LightSourceParameters","gl_MaterialParameters","gl_MaxClipPlanes","gl_MaxCombinedTextureImageUnits","gl_MaxDrawBuffers","gl_MaxFragmentUniformComponents","gl_MaxLights","gl_MaxTextureCoords","gl_MaxTextureImageUnits","gl_MaxTextureUnits","gl_MaxVaryingFloats","gl_MaxVertexAttribs","gl_MaxVertexTextureImageUnits","gl_MaxVertexUniformComponents","gl_ModelViewMatrix","gl_ModelViewMatrixInverse","gl_ModelViewMatrixInverseTranspose","gl_ModelViewMatrixTranspose","gl_ModelViewProjectionMatrix","gl_ModelViewProjectionMatrixInverse","gl_ModelViewProjectionMatrixInverseTranspose","gl_ModelViewProjectionMatrixTranspose","gl_MultiTexCoord0","gl_MultiTexCoord1","gl_MultiTexCoord2","gl_MultiTexCoord3","gl_MultiTexCoord4","gl_MultiTexCoord5","gl_MultiTexCoord6","gl_MultiTexCoord7","gl_Normal","gl_NormalMatrix","gl_NormalScale","gl_ObjectPlaneQ","gl_ObjectPlaneR","gl_ObjectPlaneS","gl_ObjectPlaneT","gl_Point","gl_PointCoord","gl_PointParameters","gl_PointSize","gl_Position","gl_ProjectionMatrix","gl_ProjectionMatrixInverse","gl_ProjectionMatrixInverseTranspose","gl_ProjectionMatrixTranspose","gl_SecondaryColor","gl_TexCoord","gl_TextureEnvColor","gl_TextureMatrix","gl_TextureMatrixInverse","gl_TextureMatrixInverseTranspose","gl_TextureMatrixTranspose","gl_Vertex","greaterThan","greaterThanEqual","inversesqrt","length","lessThan","lessThanEqual","log","log2","matrixCompMult","max","min","mix","mod","normalize","not","notEqual","pow","radians","reflect","refract","sign","sin","smoothstep","sqrt","step","tan","texture2D","texture2DLod","texture2DProj","texture2DProjLod","textureCube","textureCubeLod","texture2DLodEXT","texture2DProjLodEXT","textureCubeLodEXT","texture2DGradEXT","texture2DProjGradEXT","textureCubeGradEXT","textureSize","texelFetch"];var u=999,c=["block-comment","line-comment","preprocessor","operator","integer","float","ident","builtin","keyword","whitespace","eof","integer"];function f(e){return function(e){var t=function(){var e,t,n,i=0,r=0,o=u,f=[],d=[],h=1,_=0,p=0,m=!1,g=!1,v="";return function(e){return d=[],null!==e?y(e.replace?e.replace(/\r\n/g,"\n"):e):(f.length&&x(f.join("")),o=10,x("(eof)"),d)};function x(e){e.length&&d.push({type:c[o],data:e,position:p,line:h,column:_})}function y(t){var a;for(i=0,n=(v+=t).length;e=v[i],i<n;){switch(a=i,o){case 0:i=E();break;case 1:case 2:i=b();break;case 3:i=A();break;case 4:i=R();break;case 11:i=O();break;case 5:i=M();break;case 9999:i=C();break;case 9:i=T();break;case u:i=S()}a!==i&&("\n"===v[a]?(_=0,++h):++_)}return r+=i,v=v.slice(i),d}function S(){return f=f.length?[]:f,"/"===t&&"*"===e?(p=r+i-1,o=0,t=e,i+1):"/"===t&&"/"===e?(p=r+i-1,o=1,t=e,i+1):"#"===e?(o=2,p=r+i,i):/\s/.test(e)?(o=9,p=r+i,i):(m=/\d/.test(e),g=/[^\w_]/.test(e),p=r+i,o=m?4:g?3:9999,i)}function T(){return/[^\s]/g.test(e)?(x(f.join("")),o=u,i):(f.push(e),t=e,i+1)}function b(){return"\r"!==e&&"\n"!==e||"\\"===t?(f.push(e),t=e,i+1):(x(f.join("")),o=u,i)}function E(){return"/"===e&&"*"===t?(f.push(e),x(f.join("")),o=u,i+1):(f.push(e),t=e,i+1)}function A(){if("."===t&&/\d/.test(e))return o=5,i;if("/"===t&&"*"===e)return o=0,i;if("/"===t&&"/"===e)return o=1,i;if("."===e&&f.length){for(;I(f););return o=5,i}if(";"===e||")"===e||"("===e){if(f.length)for(;I(f););return x(e),o=u,i+1}var n=2===f.length&&"="!==e;if(/[\w_\d\s]/.test(e)||n){for(;I(f););return o=u,i}return f.push(e),t=e,i+1}function I(e){for(var t,n,i=0;;){if(t=s.indexOf(e.slice(0,e.length+i).join("")),n=s[t],-1===t){if(i--+e.length>0)continue;n=e.slice(0,1).join("")}return x(n),p+=n.length,(f=f.slice(n.length)).length}}function O(){return/[^a-fA-F0-9]/.test(e)?(x(f.join("")),o=u,i):(f.push(e),t=e,i+1)}function R(){return"."===e||/[eE]/.test(e)?(f.push(e),o=5,t=e,i+1):"x"===e&&1===f.length&&"0"===f[0]?(o=11,f.push(e),t=e,i+1):/[^\d]/.test(e)?(x(f.join("")),o=u,i):(f.push(e),t=e,i+1)}function M(){return"f"===e&&(f.push(e),t=e,i+=1),/[eE]/.test(e)||"-"===e&&/[eE]/.test(t)?(f.push(e),t=e,i+1):/[^\d]/.test(e)?(x(f.join("")),o=u,i):(f.push(e),t=e,i+1)}function C(){if(/[^\d\w_]/.test(e)){var n=f.join("");return o=a.indexOf(n)>-1?8:l.indexOf(n)>-1?7:6,x(f.join("")),o=u,i}return f.push(e),t=e,i+1}}(),n=[];return(n=n.concat(t(e))).concat(t(null))}(e)}const d=new Set(["GL_OES_standard_derivatives","GL_EXT_frag_depth","GL_EXT_draw_buffers","GL_EXT_shader_texture_lod"]);function h(e,t){for(let n=t-1;n>=0;n--){const t=e[n];if("whitespace"!==t.type&&"block-comment"!==t.type){if("keyword"!==t.type)break;if("attribute"===t.data||"in"===t.data)return!0}}return!1}function _(e,t,n,i){i=i||n;for(const r of e)if("ident"===r.type&&r.data===n)return i in t?t[i]++:t[i]=0,_(e,t,i+"_"+t[i],i);return n}function p(e,t,n="afterVersion"){function i(e,t){for(let n=t;n<e.length;n++){const t=e[n];if("operator"===t.type&&";"===t.data)return n}return null}const r={data:"\n",type:"whitespace"},o=t=>t<e.length&&/[^\r\n]$/.test(e[t].data);let a=function(e){let t=-1,r=0,o=-1;for(let a=0;a<e.length;a++){const s=e[a];if("preprocessor"===s.type&&(/#(if|ifdef|ifndef)\s+.+/.test(s.data)?++r:/#endif\s*.*/.test(s.data)&&--r),"afterVersion"!==n&&"afterPrecision"!==n||"preprocessor"===s.type&&s.data.startsWith("#version")&&(o=Math.max(o,a)),"afterPrecision"===n&&"keyword"===s.type&&"precision"===s.data){const t=i(e,a);if(null===t)throw new Error("precision statement not followed by any semicolons!");o=Math.max(o,t)}t<o&&0===r&&(t=a)}return t+1}(e);o(a-1)&&e.splice(a++,0,r);for(const n of t)e.splice(a++,0,n);o(a-1)&&o(a)&&e.splice(a,0,r)}function m(e,t,n,i="lowp"){p(e,[{type:"keyword",data:"out"},{type:"whitespace",data:" "},{type:"keyword",data:i},{type:"whitespace",data:" "},{type:"keyword",data:n},{type:"whitespace",data:" "},{type:"ident",data:t},{type:"operator",data:";"}],"afterPrecision")}function g(e,t,n,i,r="lowp"){p(e,[{type:"keyword",data:"layout"},{type:"operator",data:"("},{type:"keyword",data:"location"},{type:"whitespace",data:" "},{type:"operator",data:"="},{type:"whitespace",data:" "},{type:"integer",data:i.toString()},{type:"operator",data:")"},{type:"whitespace",data:" "},{type:"keyword",data:"out"},{type:"whitespace",data:" "},{type:"keyword",data:r},{type:"whitespace",data:" "},{type:"keyword",data:n},{type:"whitespace",data:" "},{type:"ident",data:t},{type:"operator",data:";"}],"afterPrecision")}function v(e,t){let n,i,r=-1;for(let o=t;o<e.length;o++){const t=e[o];if("operator"===t.type&&("["===t.data&&(n=o),"]"===t.data)){i=o;break}"integer"===t.type&&(r=parseInt(t.data,10))}return n&&i&&e.splice(n,i-n+1),r}function x(e,t){if(e.startsWith("#version 300"))return e;const n=f(e);if("300 es"===function(e,t="100",n="300 es"){const i=/^\s*#version\s+([0-9]+(\s+[a-zA-Z]+)?)\s*/;for(const r of e)if("preprocessor"===r.type){const e=i.exec(r.data);if(e){const i=e[1].replaceAll(/\s{2,}/g," ");if(i===n)return i;if(i===t)return r.data="#version "+n,t;throw new Error("unknown glsl version: "+i)}}return e.splice(0,0,{type:"preprocessor",data:"#version "+n},{type:"whitespace",data:"\n"}),null}(n,"100","300 es"))return e;let i=null,a=null;const s={},l={};for(let e=0;e<n.length;++e){const u=n[e];switch(u.type){case"keyword":t===r.Co.VERTEX_SHADER&&"attribute"===u.data?u.data="in":"varying"===u.data&&(u.data=t===r.Co.VERTEX_SHADER?"out":"in");break;case"builtin":if(/^texture(2D|Cube)(Proj)?(Lod|Grad)?(EXT)?$/.test(u.data.trim())&&(u.data=u.data.replaceAll(/(2D|Cube|EXT)/g,"")),t===r.Co.FRAGMENT_SHADER&&"gl_FragColor"===u.data&&(i||(i=_(n,s,"fragColor"),m(n,i,"vec4")),u.data=i),t===r.Co.FRAGMENT_SHADER&&"gl_FragData"===u.data){const t=v(n,e+1),i=_(n,s,"fragData");g(n,i,"vec4",t,"mediump"),u.data=i}else t===r.Co.FRAGMENT_SHADER&&"gl_FragDepthEXT"===u.data&&(a||(a=_(n,s,"gl_FragDepth")),u.data=a);break;case"ident":if(o.includes(u.data)){if(t===r.Co.VERTEX_SHADER&&h(n,e))throw new Error("attribute in vertex shader uses a name that is a reserved word in glsl 300 es");u.data in l||(l[u.data]=_(n,s,u.data)),u.data=l[u.data]}}}for(let e=n.length-1;e>=0;--e){const t=n[e];if("preprocessor"===t.type){const i=t.data.match(/#extension\s+(.*):/);if(i?.[1]&&d.has(i[1].trim())){const t=n[e+1];n.splice(e,t&&"whitespace"===t.type?2:1)}const r=t.data.match(/#ifdef\s+(.*)/);r?.[1]&&d.has(r[1].trim())&&(t.data="#if 1");const o=t.data.match(/#ifndef\s+(.*)/);o?.[1]&&d.has(o[1].trim())&&(t.data="#if 0")}}return u=function(e){return e.map((e=>"eof"!==e.type?e.data:"")).join("")}(n),u;var u}new Map;class y{constructor(e,t,n,o,a=new Map,s=[]){this._context=e,this._locations=o,this._uniformBlockBindings=a,this._transformFeedbackVaryings=s,this._refCount=1,this._compiled=!1,this._linesOfCode=0,this._nameToUniformLocation=new Map,this._nameToUniform1=new Map,this._nameToUniform1v=new Map,this._nameToUniform2=new Map,this._nameToUniform3=new Map,this._nameToUniform4=new Map,this._nameToUniformMatrix3=new Map,this._nameToUniformMatrix4=new Map,e||console.error("RenderingContext isn't initialized!"),0===t.length&&console.error("Shaders source should not be empty!"),t=x(t,r.Co.VERTEX_SHADER),n=x(n,r.Co.FRAGMENT_SHADER),this._vShader=S(this._context,r.Co.VERTEX_SHADER,t),this._fShader=S(this._context,r.Co.FRAGMENT_SHADER,n),b.enabled&&(this._linesOfCode=t.match(/\n/g).length+n.match(/\n/g).length+2,this._context.instanceCounter.increment(r.vt.LinesOfCode,this._vShader,this._linesOfCode)),this._vShader&&this._fShader||console.error("Error loading shaders!"),this._context.instanceCounter.increment(r.vt.Shader,this),(0,i.Xc)()&&(this.vertexShader=t,this.fragmentShader=n),this.usedMemory=t.length+n.length;const l=this._context.gl,u=l.createProgram();l.attachShader(u,this._vShader),l.attachShader(u,this._fShader),this._locations.forEach(((e,t)=>l.bindAttribLocation(u,e,t))),this._transformFeedbackVaryings?.length&&l.transformFeedbackVaryings(u,this._transformFeedbackVaryings,l.SEPARATE_ATTRIBS),l.linkProgram(u),(0,i.Xc)()&&!l.getProgramParameter(u,l.LINK_STATUS)&&console.error(`Could not link shader\nvalidated: ${l.getProgramParameter(u,l.VALIDATE_STATUS)}, gl error ${l.getError()}, vertex: ${l.getShaderParameter(this._vShader,l.COMPILE_STATUS)}, fragment: ${l.getShaderParameter(this._fShader,l.COMPILE_STATUS)}, info log: ${l.getProgramInfoLog(u)}, vertex source: ${this.vertexShader}, fragment source: ${this.fragmentShader}`);for(const[e,t]of this._uniformBlockBindings){const n=l.getUniformBlockIndex(u,e);n<4294967295&&l.uniformBlockBinding(u,n,t)}this._glName=u,this._context.instanceCounter.increment(r.vt.Program,this)}get glName(){return this._glName}get hasGLName(){return null!=this._glName}get hasTransformFeedbackVaryings(){return!!this._transformFeedbackVaryings?.length}get compiled(){if(this._compiled)return!0;const e=this._context.gl.getExtension("KHR_parallel_shader_compile");return null==e||null==this.glName?(this._compiled=!0,!0):(this._compiled=!!this._context.gl.getProgramParameter(this.glName,e.COMPLETION_STATUS_KHR),this._compiled)}dispose(){if(--this._refCount>0)return;const e=this._context.gl,t=this._context.instanceCounter;this._nameToUniformLocation.forEach((e=>e&&t.decrement(r.vt.Uniform,e))),this._nameToUniformLocation.clear(),this._vShader&&(this._linesOfCode>0&&(t.decrement(r.vt.LinesOfCode,this._vShader,this._linesOfCode),this._linesOfCode=0),e.deleteShader(this._vShader),this._vShader=null,t.decrement(r.vt.Shader,this)),this._fShader&&(e.deleteShader(this._fShader),this._fShader=null),this._glName&&(e.deleteProgram(this._glName),this._glName=null,t.decrement(r.vt.Program,this))}ref(){++this._refCount}_getUniformLocation(e){const t=this._nameToUniformLocation.get(e);if(void 0!==t)return t;if(this.glName){const t=this._context.gl.getUniformLocation(this.glName,e);return this._nameToUniformLocation.set(e,t),t&&this._context.instanceCounter.increment(r.vt.Uniform,t),t}return null}hasUniform(e){return null!=this._getUniformLocation(e)}setUniform1i(e,t){const n=this._nameToUniform1.get(e);void 0!==n&&t===n||(this._context.gl.uniform1i(this._getUniformLocation(e),t),this._nameToUniform1.set(e,t))}setUniform1iv(e,t){T(this._nameToUniform1v,e,t)&&this._context.gl.uniform1iv(this._getUniformLocation(e),t)}setUniform2iv(e,t){T(this._nameToUniform2,e,t)&&this._context.gl.uniform2iv(this._getUniformLocation(e),t)}setUniform3iv(e,t){T(this._nameToUniform3,e,t)&&this._context.gl.uniform3iv(this._getUniformLocation(e),t)}setUniform4iv(e,t){T(this._nameToUniform4,e,t)&&this._context.gl.uniform4iv(this._getUniformLocation(e),t)}setUniform1f(e,t){const n=this._nameToUniform1.get(e);void 0!==n&&t===n||(this._context.gl.uniform1f(this._getUniformLocation(e),t),this._nameToUniform1.set(e,t))}setUniform1fv(e,t){T(this._nameToUniform1v,e,t)&&this._context.gl.uniform1fv(this._getUniformLocation(e),t)}setUniform2f(e,t,n){const i=this._nameToUniform2.get(e);void 0===i?(this._context.gl.uniform2f(this._getUniformLocation(e),t,n),this._nameToUniform2.set(e,[t,n])):t===i[0]&&n===i[1]||(this._context.gl.uniform2f(this._getUniformLocation(e),t,n),i[0]=t,i[1]=n)}setUniform2fv(e,t){T(this._nameToUniform2,e,t)&&this._context.gl.uniform2fv(this._getUniformLocation(e),t)}setUniform3f(e,t,n,i){const r=this._nameToUniform3.get(e);void 0===r?(this._context.gl.uniform3f(this._getUniformLocation(e),t,n,i),this._nameToUniform3.set(e,[t,n,i])):t===r[0]&&n===r[1]&&i===r[2]||(this._context.gl.uniform3f(this._getUniformLocation(e),t,n,i),r[0]=t,r[1]=n,r[2]=i)}setUniform3fv(e,t){const n=this._getUniformLocation(e);null!=n&&T(this._nameToUniform3,e,t)&&this._context.gl.uniform3fv(n,t)}setUniform4f(e,t,n,i,r){const o=this._nameToUniform4.get(e);void 0===o?(this._context.gl.uniform4f(this._getUniformLocation(e),t,n,i,r),this._nameToUniform4.set(e,[t,n,i,r])):void 0!==o&&t===o[0]&&n===o[1]&&i===o[2]&&r===o[3]||(this._context.gl.uniform4f(this._getUniformLocation(e),t,n,i,r),o[0]=t,o[1]=n,o[2]=i,o[3]=r)}setUniform4fv(e,t){const n=this._getUniformLocation(e);null!=n&&T(this._nameToUniform4,e,t)&&this._context.gl.uniform4fv(n,t)}setUniformMatrix3fv(e,t,n=!1){const i=this._getUniformLocation(e);null!=i&&T(this._nameToUniformMatrix3,e,t)&&this._context.gl.uniformMatrix3fv(i,n,t)}setUniformMatrix4fv(e,t,n=!1){const i=this._getUniformLocation(e);null!=i&&T(this._nameToUniformMatrix4,e,t)&&this._context.gl.uniformMatrix4fv(i,n,t)}stop(){}}function S(e,t,n){const o=e.gl,a=o.createShader(t);return o.shaderSource(a,n),o.compileShader(a),(0,i.Xc)()&&!o.getShaderParameter(a,o.COMPILE_STATUS)&&(console.error("Compile error in ".concat(t===r.Co.VERTEX_SHADER?"vertex":"fragment"," shader")),console.error(o.getShaderInfoLog(a)),console.error(function(e){let t=2;return e.replaceAll("\n",(()=>"\n"+function(e){return e>=1e3?e.toString():("  "+e).slice(-3)}(t++)+":"))}(n))),a}function T(e,t,n){const i=e.get(t);if(!i)return e.set(t,Array.from(n)),!0;const r=n.length;if(i.length!==r)return e.set(t,Array.from(n)),!0;for(let e=0;e<r;++e){const t=n[e];if(i[e]!==t){for(i[e]=t;e<r;++e)i[e]=n[e];return!0}}return!1}const b={enabled:!1}},10904:function(e,t,n){n.d(t,{r:function(){return r}});var i=n(95904);function r(e,t,n=""){return new i.B(e,n+t.shaders.vertexShader,n+t.shaders.fragmentShader,t.attributes)}},49414:function(e,t,n){n.d(t,{l:function(){return a}});var i=n(85456),r=n(69452),o=n(15167);class a{constructor(e,t){this._context=e,this._descriptor=t,this.type=r.p.RenderBuffer,this._context.instanceCounter.increment(i.vt.Renderbuffer,this);const n=this._context.gl;this.glName=n.createRenderbuffer(),this._context.bindRenderbuffer(this);const{width:o,height:a,internalFormat:s,multisampled:l}=t;l?n.renderbufferStorageMultisample(n.RENDERBUFFER,this.samples,s,o,a):n.renderbufferStorage(n.RENDERBUFFER,s,o,a),this._context.bindRenderbuffer(null)}get descriptor(){return this._descriptor}get samples(){const e=this._descriptor.samples,t=this._context.parameters.maxSamples;return e?Math.min(e,t):t}get usedMemory(){return(0,o.e)(this._descriptor)}resize(e,t){const n=this._descriptor;if(n.width===e&&n.height===t)return;n.width=e,n.height=t;const i=this._context.gl;this._context.bindRenderbuffer(this),n.multisampled?i.renderbufferStorageMultisample(i.RENDERBUFFER,this.samples,n.internalFormat,n.width,n.height):i.renderbufferStorage(i.RENDERBUFFER,n.internalFormat,n.width,n.height),this._context.bindRenderbuffer(null)}dispose(){this._context&&(this._context.gl.deleteRenderbuffer(this.glName),this._context.instanceCounter.decrement(i.vt.Renderbuffer,this),this._context=null)}}},15167:function(e,t,n){n.d(t,{e:function(){return o},q:function(){return r}});var i=n(93380);class r{constructor(e,t,n=t){this.internalFormat=e,this.width=t,this.height=n,this.multisampled=!1,this.samples=1}}function o(e){return e.width<=0||e.height<=0||null==e.internalFormat?0:e.width*e.height*(0,i.IB)(e.internalFormat)}},65644:function(e,t,n){n.d(t,{Z:function(){return i}});class i{constructor(e){this._readFile=e}resolveIncludes(e){return this._resolve(e)}_resolve(e,t=new Map){if(t.has(e))return t.get(e);const n=this._read(e);if(!n)throw new Error(`cannot find shader file ${e}`);const i=/^[^\S\n]*#include\s+<(\S+)>[^\S\n]?/gm;let r=i.exec(n);const o=[];for(;null!=r;)o.push({path:r[1],start:r.index,length:r[0].length}),r=i.exec(n);let a=0,s="";return o.forEach((e=>{s+=n.slice(a,e.start),s+=t.has(e.path)?"":this._resolve(e.path,t),a=e.start+e.length})),s+=n.slice(a),t.set(e,s),s}_read(e){return this._readFile(e)}}},81438:function(e,t,n){n.d(t,{Z:function(){return u}});var i=n(40633),r=n(95929),o=n(24540),a=n(85456),s=n(93380);const l=()=>i.A.getLogger("esri.views.webgl.VertexArrayObject");let u=class{constructor(e,t,n,i,r=null){this._context=e,this._locations=t,this._layout=n,this._buffers=i,this._indexBuffer=r,this._glName=null,this._initialized=!1}get glName(){return this._glName}get context(){return this._context}get vertexBuffers(){return this._buffers}get indexBuffer(){return this._indexBuffer}get byteSize(){return Array.from(this._buffers.values()).reduce(((e,t)=>e+t.usedMemory),null!=this._indexBuffer?this._indexBuffer.usedMemory:0)}get layout(){return this._layout}get locations(){return this._locations}get usedMemory(){return this.byteSize+(Object.keys(this._buffers).length+(this._indexBuffer?1:0))*o.zQ}dispose(){this._context?(this._context.getBoundVAO()===this&&this._context.bindVAO(null),this._buffers.forEach((e=>e.dispose())),this._buffers.clear(),this._indexBuffer=(0,r.WD)(this._indexBuffer),this.disposeVAOOnly()):(this._glName||Object.getOwnPropertyNames(this._buffers).length>0)&&l().warn("Leaked WebGL VAO")}disposeVAOOnly(){this._glName&&(this._context.gl.deleteVertexArray(this._glName),this._glName=null,this._context.instanceCounter.decrement(a.vt.VertexArrayObject,this)),this._context=null}initialize(){if(this._initialized)return;const{gl:e}=this._context,t=e.createVertexArray();e.bindVertexArray(t),this._bindLayout(),e.bindVertexArray(null),this._glName=t,this._context.instanceCounter.increment(a.vt.VertexArrayObject,this),this._initialized=!0}bind(){this.initialize(),this._context.gl.bindVertexArray(this.glName)}_bindLayout(){const{_buffers:e,_layout:t,_indexBuffer:n}=this;e||l().error("Vertex buffer dictionary is empty!");const i=this._context.gl;this._buffers.forEach(((e,n)=>{const i=t.get(n);i?(0,s.yu)(this._context,this._locations,e,i):l().error("Vertex element descriptor is empty!")})),null!=n&&i.bindBuffer(i.ELEMENT_ARRAY_BUFFER,n.glName)}unbind(){this.initialize(),this._context.gl.bindVertexArray(null)}}}}]);
//# sourceMappingURL=layers-BaseDynamicLayerView2D.js.map