"use strict";(self.webpackChunkdefra=self.webpackChunkdefra||[]).push([[2377],{75160:function(n,t,e){e.r(t),e.d(t,{buffer:function(){return z},changeDefaultSpatialReferenceTolerance:function(){return Z},clearDefaultSpatialReferenceTolerance:function(){return $},clip:function(){return w},contains:function(){return m},convexHull:function(){return k},crosses:function(){return h},cut:function(){return d},densify:function(){return F},difference:function(){return v},disjoint:function(){return O},distance:function(){return g},equals:function(){return S},extendedSpatialReferenceInfo:function(){return y},flipHorizontal:function(){return B},flipVertical:function(){return G},generalize:function(){return W},geodesicArea:function(){return U},geodesicBuffer:function(){return C},geodesicDensify:function(){return K},geodesicLength:function(){return X},intersect:function(){return T},intersectLinesToPoints:function(){return Y},intersects:function(){return R},isSimple:function(){return N},nearestCoordinate:function(){return H},nearestVertex:function(){return I},nearestVertices:function(){return P},offset:function(){return E},overlaps:function(){return D},planarArea:function(){return M},planarLength:function(){return Q},relate:function(){return J},rotate:function(){return q},simplify:function(){return b},symmetricDifference:function(){return L},touches:function(){return x},union:function(){return V},within:function(){return A}}),e(50917);var r=e(86027),i=e(45532),u=e(74697);function c(n){return Array.isArray(n)?n[0]?.spatialReference:n?.spatialReference}function a(n){return n?Array.isArray(n)?n.map(a):n.toJSON?n.toJSON():n:n}function o(n){return Array.isArray(n)?n.map((n=>(0,u.rS)(n))):(0,u.rS)(n)}let f;async function s(){return f||(f=(0,r.ho)("geometryEngineWorker",{strategy:"distributed"})),f}async function l(n,t){return(await s()).invoke("executeGEOperation",{operation:n,parameters:a(t)})}async function p(n,t){const e=await s();return Promise.all(e.broadcast("executeGEOperation",{operation:n,parameters:a(t)}))}function y(n){return l("extendedSpatialReferenceInfo",[n])}async function w(n,t){return o(await l("clip",[c(n),n,t]))}async function d(n,t){return o(await l("cut",[c(n),n,t]))}function m(n,t){return l("contains",[c(n),n,t])}function h(n,t){return l("crosses",[c(n),n,t])}function g(n,t,e){return l("distance",[c(n),n,t,e])}function S(n,t){return l("equals",[c(n),n,t])}function R(n,t){return l("intersects",[c(n),n,t])}function x(n,t){return l("touches",[c(n),n,t])}function A(n,t){return l("within",[c(n),n,t])}function O(n,t){return l("disjoint",[c(n),n,t])}function D(n,t){return l("overlaps",[c(n),n,t])}function J(n,t,e){return l("relate",[c(n),n,t,e])}function N(n){return l("isSimple",[c(n),n])}async function b(n){return o(await l("simplify",[c(n),n]))}async function k(n,t=!1){return o(await l("convexHull",[c(n),n,t]))}async function v(n,t){return o(await l("difference",[c(n),n,t]))}async function L(n,t){return o(await l("symmetricDifference",[c(n),n,t]))}async function T(n,t){return o(await l("intersect",[c(n),n,t]))}async function V(n,t=null){const e=function(n,t){let e;return Array.isArray(n)?e=n:(e=[],e.push(n),null!=t&&e.push(t)),e}(n,t);return o(await l("union",[c(e),e]))}async function E(n,t,e,r,i,u){return o(await l("offset",[c(n),n,t,e,r,i,u]))}async function z(n,t,e,r=!1){const i=[c(n),n,t,e,r];return o(await l("buffer",i))}async function C(n,t,e,r,i,u){const a=[c(n),n,t,e,r,i,u];return o(await l("geodesicBuffer",a))}async function H(n,t,e=!0){const r=await l("nearestCoordinate",[c(n),n,t,e]);return{...r,coordinate:i.default.fromJSON(r.coordinate)}}async function I(n,t){const e=await l("nearestVertex",[c(n),n,t]);return{...e,coordinate:i.default.fromJSON(e.coordinate)}}async function P(n,t,e,r){return(await l("nearestVertices",[c(n),n,t,e,r])).map((n=>({...n,coordinate:i.default.fromJSON(n.coordinate)})))}function j(n){return"xmin"in n?n.center:"x"in n?n:n.extent?.center}async function q(n,t,e){if(null==n)throw new _;const r=n.spatialReference;if(null==(e=e??j(n)))throw new _;const i=n.constructor.fromJSON(await l("rotate",[r,n,t,e]));return i.spatialReference=r,i}async function B(n,t){if(null==n)throw new _;const e=n.spatialReference;if(null==(t=t??j(n)))throw new _;const r=n.constructor.fromJSON(await l("flipHorizontal",[e,n,t]));return r.spatialReference=e,r}async function G(n,t){if(null==n)throw new _;const e=n.spatialReference;if(null==(t=t??j(n)))throw new _;const r=n.constructor.fromJSON(await l("flipVertical",[e,n,t]));return r.spatialReference=e,r}async function W(n,t,e,r){return o(await l("generalize",[c(n),n,t,e,r]))}async function F(n,t,e){return o(await l("densify",[c(n),n,t,e]))}async function K(n,t,e,r=0){return o(await l("geodesicDensify",[c(n),n,t,e,r]))}function M(n,t){return l("planarArea",[c(n),n,t])}function Q(n,t){return l("planarLength",[c(n),n,t])}function U(n,t,e){return l("geodesicArea",[c(n),n,t,e])}function X(n,t,e){return l("geodesicLength",[c(n),n,t,e])}async function Y(n,t){return o(await l("intersectLinesToPoints",[c(n),n,t]))}async function Z(n,t){await p("changeDefaultSpatialReferenceTolerance",[n,t])}async function $(n){await p("clearDefaultSpatialReferenceTolerance",[n])}class _ extends Error{constructor(){super("Illegal Argument Exception")}}}}]);
//# sourceMappingURL=geometry-geometryEngineAsync.js.map